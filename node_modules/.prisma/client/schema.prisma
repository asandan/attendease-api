// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WeekDays {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum ROLE {
  STUDENT
  TEACHER
  ADMIN
}

model MedicalCertificate {
  id           Int      @id @default(autoincrement())
  path         String   @unique
  status       Status   @default(PENDING)
  originalName String
  description  String
  startDate    DateTime @default(now())
  endDate      DateTime @default(now())

  studentId Int

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        Int  @id @default(autoincrement())
  accountId Int  @unique
  groupId   Int?

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  group   Group?  @relation(fields: [groupId], references: [id])

  MedicalCertificate MedicalCertificate[]
  AttendanceSnapshot AttendanceSnapshot[]
}

model Admin {
  id Int @id @default(autoincrement())

  accountId Int @unique

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Teacher {
  id Int @id @default(autoincrement())

  accountId Int  @unique
  subjectId Int? @unique

  account Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [subjectId], references: [id])

  groups Group[]
}

model Account {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String?
  surname  String?
  role     ROLE

  User    Student?
  Admin   Admin?
  Teacher Teacher?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faculty {
  id   Int    @id @default(autoincrement())
  name String @unique

  EPs EP[]
}

model EP {
  id        Int    @id @default(autoincrement())
  name      String @unique
  facultyId Int

  faculty Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  groups Group[]
}

model Schedule {
  id      Int @id @default(autoincrement())
  groupId Int @unique

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  weeks Week[]
}

model Week {
  id         Int @id @default(autoincrement())
  scheduleId Int
  number     Int

  schedule Schedule @relation(fields: [scheduleId], references: [id])

  days                Day[]
  attendanceSnapshots AttendanceSnapshot[]
}

model Day {
  id     Int      @id @default(autoincrement())
  name   WeekDays
  weekId Int

  week Week @relation(fields: [weekId], references: [id])

  subjects DaySubject[]
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String

  days DaySubject[]

  attendanceSnapshots AttendanceSnapshot[]
  teacher             Teacher?
}

model DaySubject {
  id        Int    @id @default(autoincrement())
  dayId     Int
  subjectId Int
  startTime String

  subject Subject @relation(fields: [subjectId], references: [id])
  day     Day     @relation(fields: [dayId], references: [id])
}

model Group {
  id        Int    @id @default(autoincrement())
  name      String @unique
  EPId      Int
  teacherId Int?

  users    Student[]
  schedule Schedule?

  ep      EP       @relation(fields: [EPId], references: [id])
  teacher Teacher? @relation(fields: [teacherId], references: [id])
}

model AttendanceSnapshot {
  id Int @id @default(autoincrement())

  day  WeekDays
  time String

  weekId    Int
  subjectId Int
  userId    Int

  week    Week    @relation(fields: [weekId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  user    Student @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
