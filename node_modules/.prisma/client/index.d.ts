
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model MedicalCertificate
 * 
 */
export type MedicalCertificate = $Result.DefaultSelection<Prisma.$MedicalCertificatePayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Faculty
 * 
 */
export type Faculty = $Result.DefaultSelection<Prisma.$FacultyPayload>
/**
 * Model EP
 * 
 */
export type EP = $Result.DefaultSelection<Prisma.$EPPayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model Week
 * 
 */
export type Week = $Result.DefaultSelection<Prisma.$WeekPayload>
/**
 * Model Day
 * 
 */
export type Day = $Result.DefaultSelection<Prisma.$DayPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model DaySubject
 * 
 */
export type DaySubject = $Result.DefaultSelection<Prisma.$DaySubjectPayload>
/**
 * Model Group
 * 
 */
export type Group = $Result.DefaultSelection<Prisma.$GroupPayload>
/**
 * Model AttendanceSnapshot
 * 
 */
export type AttendanceSnapshot = $Result.DefaultSelection<Prisma.$AttendanceSnapshotPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Status: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type Status = (typeof Status)[keyof typeof Status]


export const ROLE: {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  ADMIN: 'ADMIN'
};

export type ROLE = (typeof ROLE)[keyof typeof ROLE]


export const WeekDays: {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY'
};

export type WeekDays = (typeof WeekDays)[keyof typeof WeekDays]

}

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type ROLE = $Enums.ROLE

export const ROLE: typeof $Enums.ROLE

export type WeekDays = $Enums.WeekDays

export const WeekDays: typeof $Enums.WeekDays

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more MedicalCertificates
 * const medicalCertificates = await prisma.medicalCertificate.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more MedicalCertificates
   * const medicalCertificates = await prisma.medicalCertificate.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.medicalCertificate`: Exposes CRUD operations for the **MedicalCertificate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalCertificates
    * const medicalCertificates = await prisma.medicalCertificate.findMany()
    * ```
    */
  get medicalCertificate(): Prisma.MedicalCertificateDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.faculty`: Exposes CRUD operations for the **Faculty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faculties
    * const faculties = await prisma.faculty.findMany()
    * ```
    */
  get faculty(): Prisma.FacultyDelegate<ExtArgs>;

  /**
   * `prisma.eP`: Exposes CRUD operations for the **EP** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EPS
    * const ePS = await prisma.eP.findMany()
    * ```
    */
  get eP(): Prisma.EPDelegate<ExtArgs>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs>;

  /**
   * `prisma.week`: Exposes CRUD operations for the **Week** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Weeks
    * const weeks = await prisma.week.findMany()
    * ```
    */
  get week(): Prisma.WeekDelegate<ExtArgs>;

  /**
   * `prisma.day`: Exposes CRUD operations for the **Day** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Days
    * const days = await prisma.day.findMany()
    * ```
    */
  get day(): Prisma.DayDelegate<ExtArgs>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs>;

  /**
   * `prisma.daySubject`: Exposes CRUD operations for the **DaySubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DaySubjects
    * const daySubjects = await prisma.daySubject.findMany()
    * ```
    */
  get daySubject(): Prisma.DaySubjectDelegate<ExtArgs>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<ExtArgs>;

  /**
   * `prisma.attendanceSnapshot`: Exposes CRUD operations for the **AttendanceSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttendanceSnapshots
    * const attendanceSnapshots = await prisma.attendanceSnapshot.findMany()
    * ```
    */
  get attendanceSnapshot(): Prisma.AttendanceSnapshotDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    MedicalCertificate: 'MedicalCertificate',
    Student: 'Student',
    Admin: 'Admin',
    Teacher: 'Teacher',
    Account: 'Account',
    Faculty: 'Faculty',
    EP: 'EP',
    Schedule: 'Schedule',
    Week: 'Week',
    Day: 'Day',
    Subject: 'Subject',
    DaySubject: 'DaySubject',
    Group: 'Group',
    AttendanceSnapshot: 'AttendanceSnapshot'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'medicalCertificate' | 'student' | 'admin' | 'teacher' | 'account' | 'faculty' | 'eP' | 'schedule' | 'week' | 'day' | 'subject' | 'daySubject' | 'group' | 'attendanceSnapshot'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      MedicalCertificate: {
        payload: Prisma.$MedicalCertificatePayload<ExtArgs>
        fields: Prisma.MedicalCertificateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalCertificateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalCertificatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalCertificateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalCertificatePayload>
          }
          findFirst: {
            args: Prisma.MedicalCertificateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalCertificatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalCertificateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalCertificatePayload>
          }
          findMany: {
            args: Prisma.MedicalCertificateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalCertificatePayload>[]
          }
          create: {
            args: Prisma.MedicalCertificateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalCertificatePayload>
          }
          createMany: {
            args: Prisma.MedicalCertificateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MedicalCertificateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalCertificatePayload>
          }
          update: {
            args: Prisma.MedicalCertificateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalCertificatePayload>
          }
          deleteMany: {
            args: Prisma.MedicalCertificateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalCertificateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MedicalCertificateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalCertificatePayload>
          }
          aggregate: {
            args: Prisma.MedicalCertificateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMedicalCertificate>
          }
          groupBy: {
            args: Prisma.MedicalCertificateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MedicalCertificateGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalCertificateCountArgs<ExtArgs>,
            result: $Utils.Optional<MedicalCertificateCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>,
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Faculty: {
        payload: Prisma.$FacultyPayload<ExtArgs>
        fields: Prisma.FacultyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacultyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacultyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          findFirst: {
            args: Prisma.FacultyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacultyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          findMany: {
            args: Prisma.FacultyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>[]
          }
          create: {
            args: Prisma.FacultyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          createMany: {
            args: Prisma.FacultyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FacultyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          update: {
            args: Prisma.FacultyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          deleteMany: {
            args: Prisma.FacultyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FacultyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FacultyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          aggregate: {
            args: Prisma.FacultyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFaculty>
          }
          groupBy: {
            args: Prisma.FacultyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FacultyGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacultyCountArgs<ExtArgs>,
            result: $Utils.Optional<FacultyCountAggregateOutputType> | number
          }
        }
      }
      EP: {
        payload: Prisma.$EPPayload<ExtArgs>
        fields: Prisma.EPFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EPFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EPPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EPFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EPPayload>
          }
          findFirst: {
            args: Prisma.EPFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EPPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EPFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EPPayload>
          }
          findMany: {
            args: Prisma.EPFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EPPayload>[]
          }
          create: {
            args: Prisma.EPCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EPPayload>
          }
          createMany: {
            args: Prisma.EPCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EPDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EPPayload>
          }
          update: {
            args: Prisma.EPUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EPPayload>
          }
          deleteMany: {
            args: Prisma.EPDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EPUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EPUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EPPayload>
          }
          aggregate: {
            args: Prisma.EPAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEP>
          }
          groupBy: {
            args: Prisma.EPGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EPGroupByOutputType>[]
          }
          count: {
            args: Prisma.EPCountArgs<ExtArgs>,
            result: $Utils.Optional<EPCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>,
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      Week: {
        payload: Prisma.$WeekPayload<ExtArgs>
        fields: Prisma.WeekFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeekFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeekFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          findFirst: {
            args: Prisma.WeekFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeekFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          findMany: {
            args: Prisma.WeekFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>[]
          }
          create: {
            args: Prisma.WeekCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          createMany: {
            args: Prisma.WeekCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WeekDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          update: {
            args: Prisma.WeekUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          deleteMany: {
            args: Prisma.WeekDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WeekUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WeekUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          aggregate: {
            args: Prisma.WeekAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWeek>
          }
          groupBy: {
            args: Prisma.WeekGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WeekGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeekCountArgs<ExtArgs>,
            result: $Utils.Optional<WeekCountAggregateOutputType> | number
          }
        }
      }
      Day: {
        payload: Prisma.$DayPayload<ExtArgs>
        fields: Prisma.DayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DayFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DayFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayPayload>
          }
          findFirst: {
            args: Prisma.DayFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DayFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayPayload>
          }
          findMany: {
            args: Prisma.DayFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayPayload>[]
          }
          create: {
            args: Prisma.DayCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayPayload>
          }
          createMany: {
            args: Prisma.DayCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DayDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayPayload>
          }
          update: {
            args: Prisma.DayUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayPayload>
          }
          deleteMany: {
            args: Prisma.DayDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DayUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DayUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayPayload>
          }
          aggregate: {
            args: Prisma.DayAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDay>
          }
          groupBy: {
            args: Prisma.DayGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DayGroupByOutputType>[]
          }
          count: {
            args: Prisma.DayCountArgs<ExtArgs>,
            result: $Utils.Optional<DayCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>,
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      DaySubject: {
        payload: Prisma.$DaySubjectPayload<ExtArgs>
        fields: Prisma.DaySubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DaySubjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaySubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DaySubjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaySubjectPayload>
          }
          findFirst: {
            args: Prisma.DaySubjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaySubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DaySubjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaySubjectPayload>
          }
          findMany: {
            args: Prisma.DaySubjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaySubjectPayload>[]
          }
          create: {
            args: Prisma.DaySubjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaySubjectPayload>
          }
          createMany: {
            args: Prisma.DaySubjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DaySubjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaySubjectPayload>
          }
          update: {
            args: Prisma.DaySubjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaySubjectPayload>
          }
          deleteMany: {
            args: Prisma.DaySubjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DaySubjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DaySubjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DaySubjectPayload>
          }
          aggregate: {
            args: Prisma.DaySubjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDaySubject>
          }
          groupBy: {
            args: Prisma.DaySubjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DaySubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.DaySubjectCountArgs<ExtArgs>,
            result: $Utils.Optional<DaySubjectCountAggregateOutputType> | number
          }
        }
      }
      Group: {
        payload: Prisma.$GroupPayload<ExtArgs>
        fields: Prisma.GroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findFirst: {
            args: Prisma.GroupFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findMany: {
            args: Prisma.GroupFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          create: {
            args: Prisma.GroupCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          createMany: {
            args: Prisma.GroupCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GroupDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          update: {
            args: Prisma.GroupUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          deleteMany: {
            args: Prisma.GroupDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GroupUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GroupUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          aggregate: {
            args: Prisma.GroupAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGroup>
          }
          groupBy: {
            args: Prisma.GroupGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupCountArgs<ExtArgs>,
            result: $Utils.Optional<GroupCountAggregateOutputType> | number
          }
        }
      }
      AttendanceSnapshot: {
        payload: Prisma.$AttendanceSnapshotPayload<ExtArgs>
        fields: Prisma.AttendanceSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceSnapshotFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendanceSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceSnapshotFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendanceSnapshotPayload>
          }
          findFirst: {
            args: Prisma.AttendanceSnapshotFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendanceSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceSnapshotFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendanceSnapshotPayload>
          }
          findMany: {
            args: Prisma.AttendanceSnapshotFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendanceSnapshotPayload>[]
          }
          create: {
            args: Prisma.AttendanceSnapshotCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendanceSnapshotPayload>
          }
          createMany: {
            args: Prisma.AttendanceSnapshotCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AttendanceSnapshotDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendanceSnapshotPayload>
          }
          update: {
            args: Prisma.AttendanceSnapshotUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendanceSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.AttendanceSnapshotDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceSnapshotUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AttendanceSnapshotUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AttendanceSnapshotPayload>
          }
          aggregate: {
            args: Prisma.AttendanceSnapshotAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAttendanceSnapshot>
          }
          groupBy: {
            args: Prisma.AttendanceSnapshotGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AttendanceSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceSnapshotCountArgs<ExtArgs>,
            result: $Utils.Optional<AttendanceSnapshotCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    MedicalCertificate: number
    AttendanceSnapshot: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MedicalCertificate?: boolean | StudentCountOutputTypeCountMedicalCertificateArgs
    AttendanceSnapshot?: boolean | StudentCountOutputTypeCountAttendanceSnapshotArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountMedicalCertificateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalCertificateWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAttendanceSnapshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceSnapshotWhereInput
  }


  /**
   * Count Type TeacherCountOutputType
   */

  export type TeacherCountOutputType = {
    groups: number
  }

  export type TeacherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groups?: boolean | TeacherCountOutputTypeCountGroupsArgs
  }

  // Custom InputTypes
  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
  }


  /**
   * Count Type FacultyCountOutputType
   */

  export type FacultyCountOutputType = {
    EPs: number
  }

  export type FacultyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    EPs?: boolean | FacultyCountOutputTypeCountEPsArgs
  }

  // Custom InputTypes
  /**
   * FacultyCountOutputType without action
   */
  export type FacultyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacultyCountOutputType
     */
    select?: FacultyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FacultyCountOutputType without action
   */
  export type FacultyCountOutputTypeCountEPsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EPWhereInput
  }


  /**
   * Count Type EPCountOutputType
   */

  export type EPCountOutputType = {
    groups: number
  }

  export type EPCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groups?: boolean | EPCountOutputTypeCountGroupsArgs
  }

  // Custom InputTypes
  /**
   * EPCountOutputType without action
   */
  export type EPCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPCountOutputType
     */
    select?: EPCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EPCountOutputType without action
   */
  export type EPCountOutputTypeCountGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
  }


  /**
   * Count Type ScheduleCountOutputType
   */

  export type ScheduleCountOutputType = {
    weeks: number
  }

  export type ScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weeks?: boolean | ScheduleCountOutputTypeCountWeeksArgs
  }

  // Custom InputTypes
  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleCountOutputType
     */
    select?: ScheduleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeCountWeeksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeekWhereInput
  }


  /**
   * Count Type WeekCountOutputType
   */

  export type WeekCountOutputType = {
    days: number
    attendanceSnapshots: number
  }

  export type WeekCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    days?: boolean | WeekCountOutputTypeCountDaysArgs
    attendanceSnapshots?: boolean | WeekCountOutputTypeCountAttendanceSnapshotsArgs
  }

  // Custom InputTypes
  /**
   * WeekCountOutputType without action
   */
  export type WeekCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekCountOutputType
     */
    select?: WeekCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WeekCountOutputType without action
   */
  export type WeekCountOutputTypeCountDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DayWhereInput
  }

  /**
   * WeekCountOutputType without action
   */
  export type WeekCountOutputTypeCountAttendanceSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceSnapshotWhereInput
  }


  /**
   * Count Type DayCountOutputType
   */

  export type DayCountOutputType = {
    subjects: number
  }

  export type DayCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjects?: boolean | DayCountOutputTypeCountSubjectsArgs
  }

  // Custom InputTypes
  /**
   * DayCountOutputType without action
   */
  export type DayCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayCountOutputType
     */
    select?: DayCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DayCountOutputType without action
   */
  export type DayCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DaySubjectWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    days: number
    attendanceSnapshots: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    days?: boolean | SubjectCountOutputTypeCountDaysArgs
    attendanceSnapshots?: boolean | SubjectCountOutputTypeCountAttendanceSnapshotsArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DaySubjectWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountAttendanceSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceSnapshotWhereInput
  }


  /**
   * Count Type GroupCountOutputType
   */

  export type GroupCountOutputType = {
    users: number
  }

  export type GroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | GroupCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model MedicalCertificate
   */

  export type AggregateMedicalCertificate = {
    _count: MedicalCertificateCountAggregateOutputType | null
    _avg: MedicalCertificateAvgAggregateOutputType | null
    _sum: MedicalCertificateSumAggregateOutputType | null
    _min: MedicalCertificateMinAggregateOutputType | null
    _max: MedicalCertificateMaxAggregateOutputType | null
  }

  export type MedicalCertificateAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
  }

  export type MedicalCertificateSumAggregateOutputType = {
    id: number | null
    studentId: number | null
  }

  export type MedicalCertificateMinAggregateOutputType = {
    id: number | null
    path: string | null
    status: $Enums.Status | null
    originalName: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    studentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalCertificateMaxAggregateOutputType = {
    id: number | null
    path: string | null
    status: $Enums.Status | null
    originalName: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    studentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalCertificateCountAggregateOutputType = {
    id: number
    path: number
    status: number
    originalName: number
    description: number
    startDate: number
    endDate: number
    studentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicalCertificateAvgAggregateInputType = {
    id?: true
    studentId?: true
  }

  export type MedicalCertificateSumAggregateInputType = {
    id?: true
    studentId?: true
  }

  export type MedicalCertificateMinAggregateInputType = {
    id?: true
    path?: true
    status?: true
    originalName?: true
    description?: true
    startDate?: true
    endDate?: true
    studentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalCertificateMaxAggregateInputType = {
    id?: true
    path?: true
    status?: true
    originalName?: true
    description?: true
    startDate?: true
    endDate?: true
    studentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalCertificateCountAggregateInputType = {
    id?: true
    path?: true
    status?: true
    originalName?: true
    description?: true
    startDate?: true
    endDate?: true
    studentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicalCertificateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalCertificate to aggregate.
     */
    where?: MedicalCertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalCertificates to fetch.
     */
    orderBy?: MedicalCertificateOrderByWithRelationInput | MedicalCertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalCertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalCertificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalCertificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalCertificates
    **/
    _count?: true | MedicalCertificateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicalCertificateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicalCertificateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalCertificateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalCertificateMaxAggregateInputType
  }

  export type GetMedicalCertificateAggregateType<T extends MedicalCertificateAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalCertificate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalCertificate[P]>
      : GetScalarType<T[P], AggregateMedicalCertificate[P]>
  }




  export type MedicalCertificateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalCertificateWhereInput
    orderBy?: MedicalCertificateOrderByWithAggregationInput | MedicalCertificateOrderByWithAggregationInput[]
    by: MedicalCertificateScalarFieldEnum[] | MedicalCertificateScalarFieldEnum
    having?: MedicalCertificateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalCertificateCountAggregateInputType | true
    _avg?: MedicalCertificateAvgAggregateInputType
    _sum?: MedicalCertificateSumAggregateInputType
    _min?: MedicalCertificateMinAggregateInputType
    _max?: MedicalCertificateMaxAggregateInputType
  }

  export type MedicalCertificateGroupByOutputType = {
    id: number
    path: string
    status: $Enums.Status
    originalName: string
    description: string
    startDate: Date
    endDate: Date
    studentId: number
    createdAt: Date
    updatedAt: Date
    _count: MedicalCertificateCountAggregateOutputType | null
    _avg: MedicalCertificateAvgAggregateOutputType | null
    _sum: MedicalCertificateSumAggregateOutputType | null
    _min: MedicalCertificateMinAggregateOutputType | null
    _max: MedicalCertificateMaxAggregateOutputType | null
  }

  type GetMedicalCertificateGroupByPayload<T extends MedicalCertificateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalCertificateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalCertificateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalCertificateGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalCertificateGroupByOutputType[P]>
        }
      >
    >


  export type MedicalCertificateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    status?: boolean
    originalName?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    studentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalCertificate"]>

  export type MedicalCertificateSelectScalar = {
    id?: boolean
    path?: boolean
    status?: boolean
    originalName?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    studentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type MedicalCertificateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }


  export type $MedicalCertificatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicalCertificate"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      path: string
      status: $Enums.Status
      originalName: string
      description: string
      startDate: Date
      endDate: Date
      studentId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["medicalCertificate"]>
    composites: {}
  }


  type MedicalCertificateGetPayload<S extends boolean | null | undefined | MedicalCertificateDefaultArgs> = $Result.GetResult<Prisma.$MedicalCertificatePayload, S>

  type MedicalCertificateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MedicalCertificateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MedicalCertificateCountAggregateInputType | true
    }

  export interface MedicalCertificateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalCertificate'], meta: { name: 'MedicalCertificate' } }
    /**
     * Find zero or one MedicalCertificate that matches the filter.
     * @param {MedicalCertificateFindUniqueArgs} args - Arguments to find a MedicalCertificate
     * @example
     * // Get one MedicalCertificate
     * const medicalCertificate = await prisma.medicalCertificate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MedicalCertificateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalCertificateFindUniqueArgs<ExtArgs>>
    ): Prisma__MedicalCertificateClient<$Result.GetResult<Prisma.$MedicalCertificatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MedicalCertificate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MedicalCertificateFindUniqueOrThrowArgs} args - Arguments to find a MedicalCertificate
     * @example
     * // Get one MedicalCertificate
     * const medicalCertificate = await prisma.medicalCertificate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MedicalCertificateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalCertificateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MedicalCertificateClient<$Result.GetResult<Prisma.$MedicalCertificatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MedicalCertificate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCertificateFindFirstArgs} args - Arguments to find a MedicalCertificate
     * @example
     * // Get one MedicalCertificate
     * const medicalCertificate = await prisma.medicalCertificate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MedicalCertificateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalCertificateFindFirstArgs<ExtArgs>>
    ): Prisma__MedicalCertificateClient<$Result.GetResult<Prisma.$MedicalCertificatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MedicalCertificate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCertificateFindFirstOrThrowArgs} args - Arguments to find a MedicalCertificate
     * @example
     * // Get one MedicalCertificate
     * const medicalCertificate = await prisma.medicalCertificate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MedicalCertificateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalCertificateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MedicalCertificateClient<$Result.GetResult<Prisma.$MedicalCertificatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MedicalCertificates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCertificateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalCertificates
     * const medicalCertificates = await prisma.medicalCertificate.findMany()
     * 
     * // Get first 10 MedicalCertificates
     * const medicalCertificates = await prisma.medicalCertificate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalCertificateWithIdOnly = await prisma.medicalCertificate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MedicalCertificateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalCertificateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalCertificatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MedicalCertificate.
     * @param {MedicalCertificateCreateArgs} args - Arguments to create a MedicalCertificate.
     * @example
     * // Create one MedicalCertificate
     * const MedicalCertificate = await prisma.medicalCertificate.create({
     *   data: {
     *     // ... data to create a MedicalCertificate
     *   }
     * })
     * 
    **/
    create<T extends MedicalCertificateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalCertificateCreateArgs<ExtArgs>>
    ): Prisma__MedicalCertificateClient<$Result.GetResult<Prisma.$MedicalCertificatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MedicalCertificates.
     *     @param {MedicalCertificateCreateManyArgs} args - Arguments to create many MedicalCertificates.
     *     @example
     *     // Create many MedicalCertificates
     *     const medicalCertificate = await prisma.medicalCertificate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MedicalCertificateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalCertificateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MedicalCertificate.
     * @param {MedicalCertificateDeleteArgs} args - Arguments to delete one MedicalCertificate.
     * @example
     * // Delete one MedicalCertificate
     * const MedicalCertificate = await prisma.medicalCertificate.delete({
     *   where: {
     *     // ... filter to delete one MedicalCertificate
     *   }
     * })
     * 
    **/
    delete<T extends MedicalCertificateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalCertificateDeleteArgs<ExtArgs>>
    ): Prisma__MedicalCertificateClient<$Result.GetResult<Prisma.$MedicalCertificatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MedicalCertificate.
     * @param {MedicalCertificateUpdateArgs} args - Arguments to update one MedicalCertificate.
     * @example
     * // Update one MedicalCertificate
     * const medicalCertificate = await prisma.medicalCertificate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MedicalCertificateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalCertificateUpdateArgs<ExtArgs>>
    ): Prisma__MedicalCertificateClient<$Result.GetResult<Prisma.$MedicalCertificatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MedicalCertificates.
     * @param {MedicalCertificateDeleteManyArgs} args - Arguments to filter MedicalCertificates to delete.
     * @example
     * // Delete a few MedicalCertificates
     * const { count } = await prisma.medicalCertificate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MedicalCertificateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalCertificateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalCertificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCertificateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalCertificates
     * const medicalCertificate = await prisma.medicalCertificate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MedicalCertificateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalCertificateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MedicalCertificate.
     * @param {MedicalCertificateUpsertArgs} args - Arguments to update or create a MedicalCertificate.
     * @example
     * // Update or create a MedicalCertificate
     * const medicalCertificate = await prisma.medicalCertificate.upsert({
     *   create: {
     *     // ... data to create a MedicalCertificate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalCertificate we want to update
     *   }
     * })
    **/
    upsert<T extends MedicalCertificateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalCertificateUpsertArgs<ExtArgs>>
    ): Prisma__MedicalCertificateClient<$Result.GetResult<Prisma.$MedicalCertificatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MedicalCertificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCertificateCountArgs} args - Arguments to filter MedicalCertificates to count.
     * @example
     * // Count the number of MedicalCertificates
     * const count = await prisma.medicalCertificate.count({
     *   where: {
     *     // ... the filter for the MedicalCertificates we want to count
     *   }
     * })
    **/
    count<T extends MedicalCertificateCountArgs>(
      args?: Subset<T, MedicalCertificateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalCertificateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalCertificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCertificateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalCertificateAggregateArgs>(args: Subset<T, MedicalCertificateAggregateArgs>): Prisma.PrismaPromise<GetMedicalCertificateAggregateType<T>>

    /**
     * Group by MedicalCertificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCertificateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalCertificateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalCertificateGroupByArgs['orderBy'] }
        : { orderBy?: MedicalCertificateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalCertificateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalCertificateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalCertificate model
   */
  readonly fields: MedicalCertificateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalCertificate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalCertificateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MedicalCertificate model
   */ 
  interface MedicalCertificateFieldRefs {
    readonly id: FieldRef<"MedicalCertificate", 'Int'>
    readonly path: FieldRef<"MedicalCertificate", 'String'>
    readonly status: FieldRef<"MedicalCertificate", 'Status'>
    readonly originalName: FieldRef<"MedicalCertificate", 'String'>
    readonly description: FieldRef<"MedicalCertificate", 'String'>
    readonly startDate: FieldRef<"MedicalCertificate", 'DateTime'>
    readonly endDate: FieldRef<"MedicalCertificate", 'DateTime'>
    readonly studentId: FieldRef<"MedicalCertificate", 'Int'>
    readonly createdAt: FieldRef<"MedicalCertificate", 'DateTime'>
    readonly updatedAt: FieldRef<"MedicalCertificate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MedicalCertificate findUnique
   */
  export type MedicalCertificateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
    /**
     * Filter, which MedicalCertificate to fetch.
     */
    where: MedicalCertificateWhereUniqueInput
  }

  /**
   * MedicalCertificate findUniqueOrThrow
   */
  export type MedicalCertificateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
    /**
     * Filter, which MedicalCertificate to fetch.
     */
    where: MedicalCertificateWhereUniqueInput
  }

  /**
   * MedicalCertificate findFirst
   */
  export type MedicalCertificateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
    /**
     * Filter, which MedicalCertificate to fetch.
     */
    where?: MedicalCertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalCertificates to fetch.
     */
    orderBy?: MedicalCertificateOrderByWithRelationInput | MedicalCertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalCertificates.
     */
    cursor?: MedicalCertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalCertificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalCertificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalCertificates.
     */
    distinct?: MedicalCertificateScalarFieldEnum | MedicalCertificateScalarFieldEnum[]
  }

  /**
   * MedicalCertificate findFirstOrThrow
   */
  export type MedicalCertificateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
    /**
     * Filter, which MedicalCertificate to fetch.
     */
    where?: MedicalCertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalCertificates to fetch.
     */
    orderBy?: MedicalCertificateOrderByWithRelationInput | MedicalCertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalCertificates.
     */
    cursor?: MedicalCertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalCertificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalCertificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalCertificates.
     */
    distinct?: MedicalCertificateScalarFieldEnum | MedicalCertificateScalarFieldEnum[]
  }

  /**
   * MedicalCertificate findMany
   */
  export type MedicalCertificateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
    /**
     * Filter, which MedicalCertificates to fetch.
     */
    where?: MedicalCertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalCertificates to fetch.
     */
    orderBy?: MedicalCertificateOrderByWithRelationInput | MedicalCertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalCertificates.
     */
    cursor?: MedicalCertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalCertificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalCertificates.
     */
    skip?: number
    distinct?: MedicalCertificateScalarFieldEnum | MedicalCertificateScalarFieldEnum[]
  }

  /**
   * MedicalCertificate create
   */
  export type MedicalCertificateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalCertificate.
     */
    data: XOR<MedicalCertificateCreateInput, MedicalCertificateUncheckedCreateInput>
  }

  /**
   * MedicalCertificate createMany
   */
  export type MedicalCertificateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalCertificates.
     */
    data: MedicalCertificateCreateManyInput | MedicalCertificateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicalCertificate update
   */
  export type MedicalCertificateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalCertificate.
     */
    data: XOR<MedicalCertificateUpdateInput, MedicalCertificateUncheckedUpdateInput>
    /**
     * Choose, which MedicalCertificate to update.
     */
    where: MedicalCertificateWhereUniqueInput
  }

  /**
   * MedicalCertificate updateMany
   */
  export type MedicalCertificateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalCertificates.
     */
    data: XOR<MedicalCertificateUpdateManyMutationInput, MedicalCertificateUncheckedUpdateManyInput>
    /**
     * Filter which MedicalCertificates to update
     */
    where?: MedicalCertificateWhereInput
  }

  /**
   * MedicalCertificate upsert
   */
  export type MedicalCertificateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalCertificate to update in case it exists.
     */
    where: MedicalCertificateWhereUniqueInput
    /**
     * In case the MedicalCertificate found by the `where` argument doesn't exist, create a new MedicalCertificate with this data.
     */
    create: XOR<MedicalCertificateCreateInput, MedicalCertificateUncheckedCreateInput>
    /**
     * In case the MedicalCertificate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalCertificateUpdateInput, MedicalCertificateUncheckedUpdateInput>
  }

  /**
   * MedicalCertificate delete
   */
  export type MedicalCertificateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
    /**
     * Filter which MedicalCertificate to delete.
     */
    where: MedicalCertificateWhereUniqueInput
  }

  /**
   * MedicalCertificate deleteMany
   */
  export type MedicalCertificateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalCertificates to delete
     */
    where?: MedicalCertificateWhereInput
  }

  /**
   * MedicalCertificate without action
   */
  export type MedicalCertificateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
    accountId: number | null
    groupId: number | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
    accountId: number | null
    groupId: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    accountId: number | null
    groupId: number | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    accountId: number | null
    groupId: number | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    accountId: number
    groupId: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
    accountId?: true
    groupId?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
    accountId?: true
    groupId?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    accountId?: true
    groupId?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    accountId?: true
    groupId?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    accountId?: true
    groupId?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: number
    accountId: number
    groupId: number | null
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    groupId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    group?: boolean | Student$groupArgs<ExtArgs>
    MedicalCertificate?: boolean | Student$MedicalCertificateArgs<ExtArgs>
    AttendanceSnapshot?: boolean | Student$AttendanceSnapshotArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    accountId?: boolean
    groupId?: boolean
  }


  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    group?: boolean | Student$groupArgs<ExtArgs>
    MedicalCertificate?: boolean | Student$MedicalCertificateArgs<ExtArgs>
    AttendanceSnapshot?: boolean | Student$AttendanceSnapshotArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      group: Prisma.$GroupPayload<ExtArgs> | null
      MedicalCertificate: Prisma.$MedicalCertificatePayload<ExtArgs>[]
      AttendanceSnapshot: Prisma.$AttendanceSnapshotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      accountId: number
      groupId: number | null
    }, ExtArgs["result"]["student"]>
    composites: {}
  }


  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends StudentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentCreateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Students.
     *     @param {StudentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends StudentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends StudentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    group<T extends Student$groupArgs<ExtArgs> = {}>(args?: Subset<T, Student$groupArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    MedicalCertificate<T extends Student$MedicalCertificateArgs<ExtArgs> = {}>(args?: Subset<T, Student$MedicalCertificateArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalCertificatePayload<ExtArgs>, T, 'findMany'> | Null>;

    AttendanceSnapshot<T extends Student$AttendanceSnapshotArgs<ExtArgs> = {}>(args?: Subset<T, Student$AttendanceSnapshotArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Student model
   */ 
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'Int'>
    readonly accountId: FieldRef<"Student", 'Int'>
    readonly groupId: FieldRef<"Student", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
  }

  /**
   * Student.group
   */
  export type Student$groupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
  }

  /**
   * Student.MedicalCertificate
   */
  export type Student$MedicalCertificateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCertificate
     */
    select?: MedicalCertificateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCertificateInclude<ExtArgs> | null
    where?: MedicalCertificateWhereInput
    orderBy?: MedicalCertificateOrderByWithRelationInput | MedicalCertificateOrderByWithRelationInput[]
    cursor?: MedicalCertificateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalCertificateScalarFieldEnum | MedicalCertificateScalarFieldEnum[]
  }

  /**
   * Student.AttendanceSnapshot
   */
  export type Student$AttendanceSnapshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    where?: AttendanceSnapshotWhereInput
    orderBy?: AttendanceSnapshotOrderByWithRelationInput | AttendanceSnapshotOrderByWithRelationInput[]
    cursor?: AttendanceSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceSnapshotScalarFieldEnum | AttendanceSnapshotScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
    accountId: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
    accountId: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    accountId: number | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    accountId: number | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    accountId: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
    accountId?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
    accountId?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    accountId?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    accountId?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    accountId?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    accountId: number
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    accountId?: boolean
  }


  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }


  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      accountId: number
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }


  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminCreateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly accountId: FieldRef<"Admin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherAvgAggregateOutputType = {
    id: number | null
    accountId: number | null
    subjectId: number | null
  }

  export type TeacherSumAggregateOutputType = {
    id: number | null
    accountId: number | null
    subjectId: number | null
  }

  export type TeacherMinAggregateOutputType = {
    id: number | null
    accountId: number | null
    subjectId: number | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: number | null
    accountId: number | null
    subjectId: number | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    accountId: number
    subjectId: number
    _all: number
  }


  export type TeacherAvgAggregateInputType = {
    id?: true
    accountId?: true
    subjectId?: true
  }

  export type TeacherSumAggregateInputType = {
    id?: true
    accountId?: true
    subjectId?: true
  }

  export type TeacherMinAggregateInputType = {
    id?: true
    accountId?: true
    subjectId?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    accountId?: true
    subjectId?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    accountId?: true
    subjectId?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _avg?: TeacherAvgAggregateInputType
    _sum?: TeacherSumAggregateInputType
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    id: number
    accountId: number
    subjectId: number | null
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    subjectId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    subject?: boolean | Teacher$subjectArgs<ExtArgs>
    groups?: boolean | Teacher$groupsArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    id?: boolean
    accountId?: boolean
    subjectId?: boolean
  }


  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    subject?: boolean | Teacher$subjectArgs<ExtArgs>
    groups?: boolean | Teacher$groupsArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs> | null
      groups: Prisma.$GroupPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      accountId: number
      subjectId: number | null
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }


  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeacherFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Teacher that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeacherFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeacherFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
    **/
    create<T extends TeacherCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Teachers.
     *     @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     *     @example
     *     // Create many Teachers
     *     const teacher = await prisma.teacher.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeacherCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
    **/
    delete<T extends TeacherDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeacherUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeacherDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeacherUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
    **/
    upsert<T extends TeacherUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    subject<T extends Teacher$subjectArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$subjectArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    groups<T extends Teacher$groupsArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Teacher model
   */ 
  interface TeacherFieldRefs {
    readonly id: FieldRef<"Teacher", 'Int'>
    readonly accountId: FieldRef<"Teacher", 'Int'>
    readonly subjectId: FieldRef<"Teacher", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
  }

  /**
   * Teacher.subject
   */
  export type Teacher$subjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
  }

  /**
   * Teacher.groups
   */
  export type Teacher$groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number | null
  }

  export type AccountSumAggregateOutputType = {
    id: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    surname: string | null
    role: $Enums.ROLE | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    surname: string | null
    role: $Enums.ROLE | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    surname: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    surname?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    surname?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    surname?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string | null
    surname: string | null
    role: $Enums.ROLE
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    surname?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | Account$UserArgs<ExtArgs>
    Admin?: boolean | Account$AdminArgs<ExtArgs>
    Teacher?: boolean | Account$TeacherArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    surname?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Account$UserArgs<ExtArgs>
    Admin?: boolean | Account$AdminArgs<ExtArgs>
    Teacher?: boolean | Account$TeacherArgs<ExtArgs>
  }


  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      User: Prisma.$StudentPayload<ExtArgs> | null
      Admin: Prisma.$AdminPayload<ExtArgs> | null
      Teacher: Prisma.$TeacherPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string | null
      surname: string | null
      role: $Enums.ROLE
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends Account$UserArgs<ExtArgs> = {}>(args?: Subset<T, Account$UserArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Admin<T extends Account$AdminArgs<ExtArgs> = {}>(args?: Subset<T, Account$AdminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Teacher<T extends Account$TeacherArgs<ExtArgs> = {}>(args?: Subset<T, Account$TeacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'Int'>
    readonly email: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly name: FieldRef<"Account", 'String'>
    readonly surname: FieldRef<"Account", 'String'>
    readonly role: FieldRef<"Account", 'ROLE'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account.User
   */
  export type Account$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }

  /**
   * Account.Admin
   */
  export type Account$AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }

  /**
   * Account.Teacher
   */
  export type Account$TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Faculty
   */

  export type AggregateFaculty = {
    _count: FacultyCountAggregateOutputType | null
    _avg: FacultyAvgAggregateOutputType | null
    _sum: FacultySumAggregateOutputType | null
    _min: FacultyMinAggregateOutputType | null
    _max: FacultyMaxAggregateOutputType | null
  }

  export type FacultyAvgAggregateOutputType = {
    id: number | null
  }

  export type FacultySumAggregateOutputType = {
    id: number | null
  }

  export type FacultyMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type FacultyMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type FacultyCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type FacultyAvgAggregateInputType = {
    id?: true
  }

  export type FacultySumAggregateInputType = {
    id?: true
  }

  export type FacultyMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type FacultyMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type FacultyCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type FacultyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faculty to aggregate.
     */
    where?: FacultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faculties to fetch.
     */
    orderBy?: FacultyOrderByWithRelationInput | FacultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faculties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faculties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Faculties
    **/
    _count?: true | FacultyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacultyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacultySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacultyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacultyMaxAggregateInputType
  }

  export type GetFacultyAggregateType<T extends FacultyAggregateArgs> = {
        [P in keyof T & keyof AggregateFaculty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaculty[P]>
      : GetScalarType<T[P], AggregateFaculty[P]>
  }




  export type FacultyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacultyWhereInput
    orderBy?: FacultyOrderByWithAggregationInput | FacultyOrderByWithAggregationInput[]
    by: FacultyScalarFieldEnum[] | FacultyScalarFieldEnum
    having?: FacultyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacultyCountAggregateInputType | true
    _avg?: FacultyAvgAggregateInputType
    _sum?: FacultySumAggregateInputType
    _min?: FacultyMinAggregateInputType
    _max?: FacultyMaxAggregateInputType
  }

  export type FacultyGroupByOutputType = {
    id: number
    name: string
    _count: FacultyCountAggregateOutputType | null
    _avg: FacultyAvgAggregateOutputType | null
    _sum: FacultySumAggregateOutputType | null
    _min: FacultyMinAggregateOutputType | null
    _max: FacultyMaxAggregateOutputType | null
  }

  type GetFacultyGroupByPayload<T extends FacultyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacultyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacultyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacultyGroupByOutputType[P]>
            : GetScalarType<T[P], FacultyGroupByOutputType[P]>
        }
      >
    >


  export type FacultySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    EPs?: boolean | Faculty$EPsArgs<ExtArgs>
    _count?: boolean | FacultyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faculty"]>

  export type FacultySelectScalar = {
    id?: boolean
    name?: boolean
  }


  export type FacultyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    EPs?: boolean | Faculty$EPsArgs<ExtArgs>
    _count?: boolean | FacultyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FacultyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Faculty"
    objects: {
      EPs: Prisma.$EPPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["faculty"]>
    composites: {}
  }


  type FacultyGetPayload<S extends boolean | null | undefined | FacultyDefaultArgs> = $Result.GetResult<Prisma.$FacultyPayload, S>

  type FacultyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FacultyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FacultyCountAggregateInputType | true
    }

  export interface FacultyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Faculty'], meta: { name: 'Faculty' } }
    /**
     * Find zero or one Faculty that matches the filter.
     * @param {FacultyFindUniqueArgs} args - Arguments to find a Faculty
     * @example
     * // Get one Faculty
     * const faculty = await prisma.faculty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacultyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyFindUniqueArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Faculty that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacultyFindUniqueOrThrowArgs} args - Arguments to find a Faculty
     * @example
     * // Get one Faculty
     * const faculty = await prisma.faculty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacultyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Faculty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyFindFirstArgs} args - Arguments to find a Faculty
     * @example
     * // Get one Faculty
     * const faculty = await prisma.faculty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacultyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyFindFirstArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Faculty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyFindFirstOrThrowArgs} args - Arguments to find a Faculty
     * @example
     * // Get one Faculty
     * const faculty = await prisma.faculty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacultyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Faculties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faculties
     * const faculties = await prisma.faculty.findMany()
     * 
     * // Get first 10 Faculties
     * const faculties = await prisma.faculty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facultyWithIdOnly = await prisma.faculty.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacultyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Faculty.
     * @param {FacultyCreateArgs} args - Arguments to create a Faculty.
     * @example
     * // Create one Faculty
     * const Faculty = await prisma.faculty.create({
     *   data: {
     *     // ... data to create a Faculty
     *   }
     * })
     * 
    **/
    create<T extends FacultyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyCreateArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Faculties.
     *     @param {FacultyCreateManyArgs} args - Arguments to create many Faculties.
     *     @example
     *     // Create many Faculties
     *     const faculty = await prisma.faculty.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacultyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Faculty.
     * @param {FacultyDeleteArgs} args - Arguments to delete one Faculty.
     * @example
     * // Delete one Faculty
     * const Faculty = await prisma.faculty.delete({
     *   where: {
     *     // ... filter to delete one Faculty
     *   }
     * })
     * 
    **/
    delete<T extends FacultyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyDeleteArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Faculty.
     * @param {FacultyUpdateArgs} args - Arguments to update one Faculty.
     * @example
     * // Update one Faculty
     * const faculty = await prisma.faculty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacultyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyUpdateArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Faculties.
     * @param {FacultyDeleteManyArgs} args - Arguments to filter Faculties to delete.
     * @example
     * // Delete a few Faculties
     * const { count } = await prisma.faculty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacultyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faculties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faculties
     * const faculty = await prisma.faculty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacultyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Faculty.
     * @param {FacultyUpsertArgs} args - Arguments to update or create a Faculty.
     * @example
     * // Update or create a Faculty
     * const faculty = await prisma.faculty.upsert({
     *   create: {
     *     // ... data to create a Faculty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Faculty we want to update
     *   }
     * })
    **/
    upsert<T extends FacultyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyUpsertArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Faculties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyCountArgs} args - Arguments to filter Faculties to count.
     * @example
     * // Count the number of Faculties
     * const count = await prisma.faculty.count({
     *   where: {
     *     // ... the filter for the Faculties we want to count
     *   }
     * })
    **/
    count<T extends FacultyCountArgs>(
      args?: Subset<T, FacultyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacultyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Faculty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacultyAggregateArgs>(args: Subset<T, FacultyAggregateArgs>): Prisma.PrismaPromise<GetFacultyAggregateType<T>>

    /**
     * Group by Faculty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacultyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacultyGroupByArgs['orderBy'] }
        : { orderBy?: FacultyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacultyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacultyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Faculty model
   */
  readonly fields: FacultyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Faculty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacultyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    EPs<T extends Faculty$EPsArgs<ExtArgs> = {}>(args?: Subset<T, Faculty$EPsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Faculty model
   */ 
  interface FacultyFieldRefs {
    readonly id: FieldRef<"Faculty", 'Int'>
    readonly name: FieldRef<"Faculty", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Faculty findUnique
   */
  export type FacultyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter, which Faculty to fetch.
     */
    where: FacultyWhereUniqueInput
  }

  /**
   * Faculty findUniqueOrThrow
   */
  export type FacultyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter, which Faculty to fetch.
     */
    where: FacultyWhereUniqueInput
  }

  /**
   * Faculty findFirst
   */
  export type FacultyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter, which Faculty to fetch.
     */
    where?: FacultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faculties to fetch.
     */
    orderBy?: FacultyOrderByWithRelationInput | FacultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faculties.
     */
    cursor?: FacultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faculties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faculties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faculties.
     */
    distinct?: FacultyScalarFieldEnum | FacultyScalarFieldEnum[]
  }

  /**
   * Faculty findFirstOrThrow
   */
  export type FacultyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter, which Faculty to fetch.
     */
    where?: FacultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faculties to fetch.
     */
    orderBy?: FacultyOrderByWithRelationInput | FacultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faculties.
     */
    cursor?: FacultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faculties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faculties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faculties.
     */
    distinct?: FacultyScalarFieldEnum | FacultyScalarFieldEnum[]
  }

  /**
   * Faculty findMany
   */
  export type FacultyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter, which Faculties to fetch.
     */
    where?: FacultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faculties to fetch.
     */
    orderBy?: FacultyOrderByWithRelationInput | FacultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Faculties.
     */
    cursor?: FacultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faculties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faculties.
     */
    skip?: number
    distinct?: FacultyScalarFieldEnum | FacultyScalarFieldEnum[]
  }

  /**
   * Faculty create
   */
  export type FacultyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * The data needed to create a Faculty.
     */
    data: XOR<FacultyCreateInput, FacultyUncheckedCreateInput>
  }

  /**
   * Faculty createMany
   */
  export type FacultyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Faculties.
     */
    data: FacultyCreateManyInput | FacultyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Faculty update
   */
  export type FacultyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * The data needed to update a Faculty.
     */
    data: XOR<FacultyUpdateInput, FacultyUncheckedUpdateInput>
    /**
     * Choose, which Faculty to update.
     */
    where: FacultyWhereUniqueInput
  }

  /**
   * Faculty updateMany
   */
  export type FacultyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Faculties.
     */
    data: XOR<FacultyUpdateManyMutationInput, FacultyUncheckedUpdateManyInput>
    /**
     * Filter which Faculties to update
     */
    where?: FacultyWhereInput
  }

  /**
   * Faculty upsert
   */
  export type FacultyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * The filter to search for the Faculty to update in case it exists.
     */
    where: FacultyWhereUniqueInput
    /**
     * In case the Faculty found by the `where` argument doesn't exist, create a new Faculty with this data.
     */
    create: XOR<FacultyCreateInput, FacultyUncheckedCreateInput>
    /**
     * In case the Faculty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacultyUpdateInput, FacultyUncheckedUpdateInput>
  }

  /**
   * Faculty delete
   */
  export type FacultyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter which Faculty to delete.
     */
    where: FacultyWhereUniqueInput
  }

  /**
   * Faculty deleteMany
   */
  export type FacultyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faculties to delete
     */
    where?: FacultyWhereInput
  }

  /**
   * Faculty.EPs
   */
  export type Faculty$EPsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
    where?: EPWhereInput
    orderBy?: EPOrderByWithRelationInput | EPOrderByWithRelationInput[]
    cursor?: EPWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EPScalarFieldEnum | EPScalarFieldEnum[]
  }

  /**
   * Faculty without action
   */
  export type FacultyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultyInclude<ExtArgs> | null
  }


  /**
   * Model EP
   */

  export type AggregateEP = {
    _count: EPCountAggregateOutputType | null
    _avg: EPAvgAggregateOutputType | null
    _sum: EPSumAggregateOutputType | null
    _min: EPMinAggregateOutputType | null
    _max: EPMaxAggregateOutputType | null
  }

  export type EPAvgAggregateOutputType = {
    id: number | null
    facultyId: number | null
  }

  export type EPSumAggregateOutputType = {
    id: number | null
    facultyId: number | null
  }

  export type EPMinAggregateOutputType = {
    id: number | null
    name: string | null
    facultyId: number | null
  }

  export type EPMaxAggregateOutputType = {
    id: number | null
    name: string | null
    facultyId: number | null
  }

  export type EPCountAggregateOutputType = {
    id: number
    name: number
    facultyId: number
    _all: number
  }


  export type EPAvgAggregateInputType = {
    id?: true
    facultyId?: true
  }

  export type EPSumAggregateInputType = {
    id?: true
    facultyId?: true
  }

  export type EPMinAggregateInputType = {
    id?: true
    name?: true
    facultyId?: true
  }

  export type EPMaxAggregateInputType = {
    id?: true
    name?: true
    facultyId?: true
  }

  export type EPCountAggregateInputType = {
    id?: true
    name?: true
    facultyId?: true
    _all?: true
  }

  export type EPAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EP to aggregate.
     */
    where?: EPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EPS to fetch.
     */
    orderBy?: EPOrderByWithRelationInput | EPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EPS
    **/
    _count?: true | EPCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EPAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EPSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EPMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EPMaxAggregateInputType
  }

  export type GetEPAggregateType<T extends EPAggregateArgs> = {
        [P in keyof T & keyof AggregateEP]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEP[P]>
      : GetScalarType<T[P], AggregateEP[P]>
  }




  export type EPGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EPWhereInput
    orderBy?: EPOrderByWithAggregationInput | EPOrderByWithAggregationInput[]
    by: EPScalarFieldEnum[] | EPScalarFieldEnum
    having?: EPScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EPCountAggregateInputType | true
    _avg?: EPAvgAggregateInputType
    _sum?: EPSumAggregateInputType
    _min?: EPMinAggregateInputType
    _max?: EPMaxAggregateInputType
  }

  export type EPGroupByOutputType = {
    id: number
    name: string
    facultyId: number
    _count: EPCountAggregateOutputType | null
    _avg: EPAvgAggregateOutputType | null
    _sum: EPSumAggregateOutputType | null
    _min: EPMinAggregateOutputType | null
    _max: EPMaxAggregateOutputType | null
  }

  type GetEPGroupByPayload<T extends EPGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EPGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EPGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EPGroupByOutputType[P]>
            : GetScalarType<T[P], EPGroupByOutputType[P]>
        }
      >
    >


  export type EPSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    facultyId?: boolean
    faculty?: boolean | FacultyDefaultArgs<ExtArgs>
    groups?: boolean | EP$groupsArgs<ExtArgs>
    _count?: boolean | EPCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eP"]>

  export type EPSelectScalar = {
    id?: boolean
    name?: boolean
    facultyId?: boolean
  }


  export type EPInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faculty?: boolean | FacultyDefaultArgs<ExtArgs>
    groups?: boolean | EP$groupsArgs<ExtArgs>
    _count?: boolean | EPCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EPPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EP"
    objects: {
      faculty: Prisma.$FacultyPayload<ExtArgs>
      groups: Prisma.$GroupPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      facultyId: number
    }, ExtArgs["result"]["eP"]>
    composites: {}
  }


  type EPGetPayload<S extends boolean | null | undefined | EPDefaultArgs> = $Result.GetResult<Prisma.$EPPayload, S>

  type EPCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EPFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EPCountAggregateInputType | true
    }

  export interface EPDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EP'], meta: { name: 'EP' } }
    /**
     * Find zero or one EP that matches the filter.
     * @param {EPFindUniqueArgs} args - Arguments to find a EP
     * @example
     * // Get one EP
     * const eP = await prisma.eP.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EPFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EPFindUniqueArgs<ExtArgs>>
    ): Prisma__EPClient<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EP that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EPFindUniqueOrThrowArgs} args - Arguments to find a EP
     * @example
     * // Get one EP
     * const eP = await prisma.eP.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EPFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EPFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EPClient<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EP that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPFindFirstArgs} args - Arguments to find a EP
     * @example
     * // Get one EP
     * const eP = await prisma.eP.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EPFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EPFindFirstArgs<ExtArgs>>
    ): Prisma__EPClient<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EP that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPFindFirstOrThrowArgs} args - Arguments to find a EP
     * @example
     * // Get one EP
     * const eP = await prisma.eP.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EPFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EPFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EPClient<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EPS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EPS
     * const ePS = await prisma.eP.findMany()
     * 
     * // Get first 10 EPS
     * const ePS = await prisma.eP.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ePWithIdOnly = await prisma.eP.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EPFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EPFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EP.
     * @param {EPCreateArgs} args - Arguments to create a EP.
     * @example
     * // Create one EP
     * const EP = await prisma.eP.create({
     *   data: {
     *     // ... data to create a EP
     *   }
     * })
     * 
    **/
    create<T extends EPCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EPCreateArgs<ExtArgs>>
    ): Prisma__EPClient<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EPS.
     *     @param {EPCreateManyArgs} args - Arguments to create many EPS.
     *     @example
     *     // Create many EPS
     *     const eP = await prisma.eP.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EPCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EPCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EP.
     * @param {EPDeleteArgs} args - Arguments to delete one EP.
     * @example
     * // Delete one EP
     * const EP = await prisma.eP.delete({
     *   where: {
     *     // ... filter to delete one EP
     *   }
     * })
     * 
    **/
    delete<T extends EPDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EPDeleteArgs<ExtArgs>>
    ): Prisma__EPClient<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EP.
     * @param {EPUpdateArgs} args - Arguments to update one EP.
     * @example
     * // Update one EP
     * const eP = await prisma.eP.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EPUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EPUpdateArgs<ExtArgs>>
    ): Prisma__EPClient<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EPS.
     * @param {EPDeleteManyArgs} args - Arguments to filter EPS to delete.
     * @example
     * // Delete a few EPS
     * const { count } = await prisma.eP.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EPDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EPDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EPS
     * const eP = await prisma.eP.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EPUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EPUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EP.
     * @param {EPUpsertArgs} args - Arguments to update or create a EP.
     * @example
     * // Update or create a EP
     * const eP = await prisma.eP.upsert({
     *   create: {
     *     // ... data to create a EP
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EP we want to update
     *   }
     * })
    **/
    upsert<T extends EPUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EPUpsertArgs<ExtArgs>>
    ): Prisma__EPClient<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPCountArgs} args - Arguments to filter EPS to count.
     * @example
     * // Count the number of EPS
     * const count = await prisma.eP.count({
     *   where: {
     *     // ... the filter for the EPS we want to count
     *   }
     * })
    **/
    count<T extends EPCountArgs>(
      args?: Subset<T, EPCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EPCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EPAggregateArgs>(args: Subset<T, EPAggregateArgs>): Prisma.PrismaPromise<GetEPAggregateType<T>>

    /**
     * Group by EP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EPGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EPGroupByArgs['orderBy'] }
        : { orderBy?: EPGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EPGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEPGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EP model
   */
  readonly fields: EPFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EP.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EPClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    faculty<T extends FacultyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FacultyDefaultArgs<ExtArgs>>): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    groups<T extends EP$groupsArgs<ExtArgs> = {}>(args?: Subset<T, EP$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EP model
   */ 
  interface EPFieldRefs {
    readonly id: FieldRef<"EP", 'Int'>
    readonly name: FieldRef<"EP", 'String'>
    readonly facultyId: FieldRef<"EP", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * EP findUnique
   */
  export type EPFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
    /**
     * Filter, which EP to fetch.
     */
    where: EPWhereUniqueInput
  }

  /**
   * EP findUniqueOrThrow
   */
  export type EPFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
    /**
     * Filter, which EP to fetch.
     */
    where: EPWhereUniqueInput
  }

  /**
   * EP findFirst
   */
  export type EPFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
    /**
     * Filter, which EP to fetch.
     */
    where?: EPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EPS to fetch.
     */
    orderBy?: EPOrderByWithRelationInput | EPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EPS.
     */
    cursor?: EPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EPS.
     */
    distinct?: EPScalarFieldEnum | EPScalarFieldEnum[]
  }

  /**
   * EP findFirstOrThrow
   */
  export type EPFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
    /**
     * Filter, which EP to fetch.
     */
    where?: EPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EPS to fetch.
     */
    orderBy?: EPOrderByWithRelationInput | EPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EPS.
     */
    cursor?: EPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EPS.
     */
    distinct?: EPScalarFieldEnum | EPScalarFieldEnum[]
  }

  /**
   * EP findMany
   */
  export type EPFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
    /**
     * Filter, which EPS to fetch.
     */
    where?: EPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EPS to fetch.
     */
    orderBy?: EPOrderByWithRelationInput | EPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EPS.
     */
    cursor?: EPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EPS.
     */
    skip?: number
    distinct?: EPScalarFieldEnum | EPScalarFieldEnum[]
  }

  /**
   * EP create
   */
  export type EPCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
    /**
     * The data needed to create a EP.
     */
    data: XOR<EPCreateInput, EPUncheckedCreateInput>
  }

  /**
   * EP createMany
   */
  export type EPCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EPS.
     */
    data: EPCreateManyInput | EPCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EP update
   */
  export type EPUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
    /**
     * The data needed to update a EP.
     */
    data: XOR<EPUpdateInput, EPUncheckedUpdateInput>
    /**
     * Choose, which EP to update.
     */
    where: EPWhereUniqueInput
  }

  /**
   * EP updateMany
   */
  export type EPUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EPS.
     */
    data: XOR<EPUpdateManyMutationInput, EPUncheckedUpdateManyInput>
    /**
     * Filter which EPS to update
     */
    where?: EPWhereInput
  }

  /**
   * EP upsert
   */
  export type EPUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
    /**
     * The filter to search for the EP to update in case it exists.
     */
    where: EPWhereUniqueInput
    /**
     * In case the EP found by the `where` argument doesn't exist, create a new EP with this data.
     */
    create: XOR<EPCreateInput, EPUncheckedCreateInput>
    /**
     * In case the EP was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EPUpdateInput, EPUncheckedUpdateInput>
  }

  /**
   * EP delete
   */
  export type EPDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
    /**
     * Filter which EP to delete.
     */
    where: EPWhereUniqueInput
  }

  /**
   * EP deleteMany
   */
  export type EPDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EPS to delete
     */
    where?: EPWhereInput
  }

  /**
   * EP.groups
   */
  export type EP$groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * EP without action
   */
  export type EPDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EP
     */
    select?: EPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    id: number | null
    groupId: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    id: number | null
    groupId: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: number | null
    groupId: number | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: number | null
    groupId: number | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    groupId: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    id?: true
    groupId?: true
  }

  export type ScheduleSumAggregateInputType = {
    id?: true
    groupId?: true
  }

  export type ScheduleMinAggregateInputType = {
    id?: true
    groupId?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    groupId?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    groupId?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: number
    groupId: number
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupId?: boolean
    group?: boolean | GroupDefaultArgs<ExtArgs>
    weeks?: boolean | Schedule$weeksArgs<ExtArgs>
    _count?: boolean | ScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectScalar = {
    id?: boolean
    groupId?: boolean
  }


  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | GroupDefaultArgs<ExtArgs>
    weeks?: boolean | Schedule$weeksArgs<ExtArgs>
    _count?: boolean | ScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      group: Prisma.$GroupPayload<ExtArgs>
      weeks: Prisma.$WeekPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      groupId: number
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }


  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ScheduleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Schedule that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ScheduleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ScheduleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
    **/
    create<T extends ScheduleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Schedules.
     *     @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     *     @example
     *     // Create many Schedules
     *     const schedule = await prisma.schedule.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ScheduleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
    **/
    delete<T extends ScheduleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ScheduleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ScheduleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ScheduleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
    **/
    upsert<T extends ScheduleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    group<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    weeks<T extends Schedule$weeksArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$weeksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Schedule model
   */ 
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'Int'>
    readonly groupId: FieldRef<"Schedule", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule.weeks
   */
  export type Schedule$weeksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    where?: WeekWhereInput
    orderBy?: WeekOrderByWithRelationInput | WeekOrderByWithRelationInput[]
    cursor?: WeekWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeekScalarFieldEnum | WeekScalarFieldEnum[]
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model Week
   */

  export type AggregateWeek = {
    _count: WeekCountAggregateOutputType | null
    _avg: WeekAvgAggregateOutputType | null
    _sum: WeekSumAggregateOutputType | null
    _min: WeekMinAggregateOutputType | null
    _max: WeekMaxAggregateOutputType | null
  }

  export type WeekAvgAggregateOutputType = {
    id: number | null
    scheduleId: number | null
    number: number | null
  }

  export type WeekSumAggregateOutputType = {
    id: number | null
    scheduleId: number | null
    number: number | null
  }

  export type WeekMinAggregateOutputType = {
    id: number | null
    scheduleId: number | null
    number: number | null
  }

  export type WeekMaxAggregateOutputType = {
    id: number | null
    scheduleId: number | null
    number: number | null
  }

  export type WeekCountAggregateOutputType = {
    id: number
    scheduleId: number
    number: number
    _all: number
  }


  export type WeekAvgAggregateInputType = {
    id?: true
    scheduleId?: true
    number?: true
  }

  export type WeekSumAggregateInputType = {
    id?: true
    scheduleId?: true
    number?: true
  }

  export type WeekMinAggregateInputType = {
    id?: true
    scheduleId?: true
    number?: true
  }

  export type WeekMaxAggregateInputType = {
    id?: true
    scheduleId?: true
    number?: true
  }

  export type WeekCountAggregateInputType = {
    id?: true
    scheduleId?: true
    number?: true
    _all?: true
  }

  export type WeekAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Week to aggregate.
     */
    where?: WeekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weeks to fetch.
     */
    orderBy?: WeekOrderByWithRelationInput | WeekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weeks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Weeks
    **/
    _count?: true | WeekCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeekAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeekSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeekMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeekMaxAggregateInputType
  }

  export type GetWeekAggregateType<T extends WeekAggregateArgs> = {
        [P in keyof T & keyof AggregateWeek]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeek[P]>
      : GetScalarType<T[P], AggregateWeek[P]>
  }




  export type WeekGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeekWhereInput
    orderBy?: WeekOrderByWithAggregationInput | WeekOrderByWithAggregationInput[]
    by: WeekScalarFieldEnum[] | WeekScalarFieldEnum
    having?: WeekScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeekCountAggregateInputType | true
    _avg?: WeekAvgAggregateInputType
    _sum?: WeekSumAggregateInputType
    _min?: WeekMinAggregateInputType
    _max?: WeekMaxAggregateInputType
  }

  export type WeekGroupByOutputType = {
    id: number
    scheduleId: number
    number: number
    _count: WeekCountAggregateOutputType | null
    _avg: WeekAvgAggregateOutputType | null
    _sum: WeekSumAggregateOutputType | null
    _min: WeekMinAggregateOutputType | null
    _max: WeekMaxAggregateOutputType | null
  }

  type GetWeekGroupByPayload<T extends WeekGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeekGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeekGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeekGroupByOutputType[P]>
            : GetScalarType<T[P], WeekGroupByOutputType[P]>
        }
      >
    >


  export type WeekSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scheduleId?: boolean
    number?: boolean
    schedule?: boolean | ScheduleDefaultArgs<ExtArgs>
    days?: boolean | Week$daysArgs<ExtArgs>
    attendanceSnapshots?: boolean | Week$attendanceSnapshotsArgs<ExtArgs>
    _count?: boolean | WeekCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["week"]>

  export type WeekSelectScalar = {
    id?: boolean
    scheduleId?: boolean
    number?: boolean
  }


  export type WeekInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | ScheduleDefaultArgs<ExtArgs>
    days?: boolean | Week$daysArgs<ExtArgs>
    attendanceSnapshots?: boolean | Week$attendanceSnapshotsArgs<ExtArgs>
    _count?: boolean | WeekCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $WeekPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Week"
    objects: {
      schedule: Prisma.$SchedulePayload<ExtArgs>
      days: Prisma.$DayPayload<ExtArgs>[]
      attendanceSnapshots: Prisma.$AttendanceSnapshotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      scheduleId: number
      number: number
    }, ExtArgs["result"]["week"]>
    composites: {}
  }


  type WeekGetPayload<S extends boolean | null | undefined | WeekDefaultArgs> = $Result.GetResult<Prisma.$WeekPayload, S>

  type WeekCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeekFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeekCountAggregateInputType | true
    }

  export interface WeekDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Week'], meta: { name: 'Week' } }
    /**
     * Find zero or one Week that matches the filter.
     * @param {WeekFindUniqueArgs} args - Arguments to find a Week
     * @example
     * // Get one Week
     * const week = await prisma.week.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WeekFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WeekFindUniqueArgs<ExtArgs>>
    ): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Week that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WeekFindUniqueOrThrowArgs} args - Arguments to find a Week
     * @example
     * // Get one Week
     * const week = await prisma.week.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WeekFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Week that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekFindFirstArgs} args - Arguments to find a Week
     * @example
     * // Get one Week
     * const week = await prisma.week.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WeekFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekFindFirstArgs<ExtArgs>>
    ): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Week that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekFindFirstOrThrowArgs} args - Arguments to find a Week
     * @example
     * // Get one Week
     * const week = await prisma.week.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WeekFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Weeks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Weeks
     * const weeks = await prisma.week.findMany()
     * 
     * // Get first 10 Weeks
     * const weeks = await prisma.week.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weekWithIdOnly = await prisma.week.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WeekFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Week.
     * @param {WeekCreateArgs} args - Arguments to create a Week.
     * @example
     * // Create one Week
     * const Week = await prisma.week.create({
     *   data: {
     *     // ... data to create a Week
     *   }
     * })
     * 
    **/
    create<T extends WeekCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WeekCreateArgs<ExtArgs>>
    ): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Weeks.
     *     @param {WeekCreateManyArgs} args - Arguments to create many Weeks.
     *     @example
     *     // Create many Weeks
     *     const week = await prisma.week.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WeekCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Week.
     * @param {WeekDeleteArgs} args - Arguments to delete one Week.
     * @example
     * // Delete one Week
     * const Week = await prisma.week.delete({
     *   where: {
     *     // ... filter to delete one Week
     *   }
     * })
     * 
    **/
    delete<T extends WeekDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDeleteArgs<ExtArgs>>
    ): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Week.
     * @param {WeekUpdateArgs} args - Arguments to update one Week.
     * @example
     * // Update one Week
     * const week = await prisma.week.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WeekUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WeekUpdateArgs<ExtArgs>>
    ): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Weeks.
     * @param {WeekDeleteManyArgs} args - Arguments to filter Weeks to delete.
     * @example
     * // Delete a few Weeks
     * const { count } = await prisma.week.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WeekDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Weeks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Weeks
     * const week = await prisma.week.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WeekUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WeekUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Week.
     * @param {WeekUpsertArgs} args - Arguments to update or create a Week.
     * @example
     * // Update or create a Week
     * const week = await prisma.week.upsert({
     *   create: {
     *     // ... data to create a Week
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Week we want to update
     *   }
     * })
    **/
    upsert<T extends WeekUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WeekUpsertArgs<ExtArgs>>
    ): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Weeks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekCountArgs} args - Arguments to filter Weeks to count.
     * @example
     * // Count the number of Weeks
     * const count = await prisma.week.count({
     *   where: {
     *     // ... the filter for the Weeks we want to count
     *   }
     * })
    **/
    count<T extends WeekCountArgs>(
      args?: Subset<T, WeekCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeekCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Week.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeekAggregateArgs>(args: Subset<T, WeekAggregateArgs>): Prisma.PrismaPromise<GetWeekAggregateType<T>>

    /**
     * Group by Week.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeekGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeekGroupByArgs['orderBy'] }
        : { orderBy?: WeekGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeekGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeekGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Week model
   */
  readonly fields: WeekFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Week.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeekClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    schedule<T extends ScheduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleDefaultArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    days<T extends Week$daysArgs<ExtArgs> = {}>(args?: Subset<T, Week$daysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'findMany'> | Null>;

    attendanceSnapshots<T extends Week$attendanceSnapshotsArgs<ExtArgs> = {}>(args?: Subset<T, Week$attendanceSnapshotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Week model
   */ 
  interface WeekFieldRefs {
    readonly id: FieldRef<"Week", 'Int'>
    readonly scheduleId: FieldRef<"Week", 'Int'>
    readonly number: FieldRef<"Week", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Week findUnique
   */
  export type WeekFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter, which Week to fetch.
     */
    where: WeekWhereUniqueInput
  }

  /**
   * Week findUniqueOrThrow
   */
  export type WeekFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter, which Week to fetch.
     */
    where: WeekWhereUniqueInput
  }

  /**
   * Week findFirst
   */
  export type WeekFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter, which Week to fetch.
     */
    where?: WeekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weeks to fetch.
     */
    orderBy?: WeekOrderByWithRelationInput | WeekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weeks.
     */
    cursor?: WeekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weeks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weeks.
     */
    distinct?: WeekScalarFieldEnum | WeekScalarFieldEnum[]
  }

  /**
   * Week findFirstOrThrow
   */
  export type WeekFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter, which Week to fetch.
     */
    where?: WeekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weeks to fetch.
     */
    orderBy?: WeekOrderByWithRelationInput | WeekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weeks.
     */
    cursor?: WeekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weeks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weeks.
     */
    distinct?: WeekScalarFieldEnum | WeekScalarFieldEnum[]
  }

  /**
   * Week findMany
   */
  export type WeekFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter, which Weeks to fetch.
     */
    where?: WeekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weeks to fetch.
     */
    orderBy?: WeekOrderByWithRelationInput | WeekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Weeks.
     */
    cursor?: WeekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weeks.
     */
    skip?: number
    distinct?: WeekScalarFieldEnum | WeekScalarFieldEnum[]
  }

  /**
   * Week create
   */
  export type WeekCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * The data needed to create a Week.
     */
    data: XOR<WeekCreateInput, WeekUncheckedCreateInput>
  }

  /**
   * Week createMany
   */
  export type WeekCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Weeks.
     */
    data: WeekCreateManyInput | WeekCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Week update
   */
  export type WeekUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * The data needed to update a Week.
     */
    data: XOR<WeekUpdateInput, WeekUncheckedUpdateInput>
    /**
     * Choose, which Week to update.
     */
    where: WeekWhereUniqueInput
  }

  /**
   * Week updateMany
   */
  export type WeekUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Weeks.
     */
    data: XOR<WeekUpdateManyMutationInput, WeekUncheckedUpdateManyInput>
    /**
     * Filter which Weeks to update
     */
    where?: WeekWhereInput
  }

  /**
   * Week upsert
   */
  export type WeekUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * The filter to search for the Week to update in case it exists.
     */
    where: WeekWhereUniqueInput
    /**
     * In case the Week found by the `where` argument doesn't exist, create a new Week with this data.
     */
    create: XOR<WeekCreateInput, WeekUncheckedCreateInput>
    /**
     * In case the Week was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeekUpdateInput, WeekUncheckedUpdateInput>
  }

  /**
   * Week delete
   */
  export type WeekDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter which Week to delete.
     */
    where: WeekWhereUniqueInput
  }

  /**
   * Week deleteMany
   */
  export type WeekDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Weeks to delete
     */
    where?: WeekWhereInput
  }

  /**
   * Week.days
   */
  export type Week$daysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
    where?: DayWhereInput
    orderBy?: DayOrderByWithRelationInput | DayOrderByWithRelationInput[]
    cursor?: DayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DayScalarFieldEnum | DayScalarFieldEnum[]
  }

  /**
   * Week.attendanceSnapshots
   */
  export type Week$attendanceSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    where?: AttendanceSnapshotWhereInput
    orderBy?: AttendanceSnapshotOrderByWithRelationInput | AttendanceSnapshotOrderByWithRelationInput[]
    cursor?: AttendanceSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceSnapshotScalarFieldEnum | AttendanceSnapshotScalarFieldEnum[]
  }

  /**
   * Week without action
   */
  export type WeekDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
  }


  /**
   * Model Day
   */

  export type AggregateDay = {
    _count: DayCountAggregateOutputType | null
    _avg: DayAvgAggregateOutputType | null
    _sum: DaySumAggregateOutputType | null
    _min: DayMinAggregateOutputType | null
    _max: DayMaxAggregateOutputType | null
  }

  export type DayAvgAggregateOutputType = {
    id: number | null
    weekId: number | null
  }

  export type DaySumAggregateOutputType = {
    id: number | null
    weekId: number | null
  }

  export type DayMinAggregateOutputType = {
    id: number | null
    name: $Enums.WeekDays | null
    weekId: number | null
  }

  export type DayMaxAggregateOutputType = {
    id: number | null
    name: $Enums.WeekDays | null
    weekId: number | null
  }

  export type DayCountAggregateOutputType = {
    id: number
    name: number
    weekId: number
    _all: number
  }


  export type DayAvgAggregateInputType = {
    id?: true
    weekId?: true
  }

  export type DaySumAggregateInputType = {
    id?: true
    weekId?: true
  }

  export type DayMinAggregateInputType = {
    id?: true
    name?: true
    weekId?: true
  }

  export type DayMaxAggregateInputType = {
    id?: true
    name?: true
    weekId?: true
  }

  export type DayCountAggregateInputType = {
    id?: true
    name?: true
    weekId?: true
    _all?: true
  }

  export type DayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Day to aggregate.
     */
    where?: DayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Days to fetch.
     */
    orderBy?: DayOrderByWithRelationInput | DayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Days.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Days
    **/
    _count?: true | DayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DayMaxAggregateInputType
  }

  export type GetDayAggregateType<T extends DayAggregateArgs> = {
        [P in keyof T & keyof AggregateDay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDay[P]>
      : GetScalarType<T[P], AggregateDay[P]>
  }




  export type DayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DayWhereInput
    orderBy?: DayOrderByWithAggregationInput | DayOrderByWithAggregationInput[]
    by: DayScalarFieldEnum[] | DayScalarFieldEnum
    having?: DayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DayCountAggregateInputType | true
    _avg?: DayAvgAggregateInputType
    _sum?: DaySumAggregateInputType
    _min?: DayMinAggregateInputType
    _max?: DayMaxAggregateInputType
  }

  export type DayGroupByOutputType = {
    id: number
    name: $Enums.WeekDays
    weekId: number
    _count: DayCountAggregateOutputType | null
    _avg: DayAvgAggregateOutputType | null
    _sum: DaySumAggregateOutputType | null
    _min: DayMinAggregateOutputType | null
    _max: DayMaxAggregateOutputType | null
  }

  type GetDayGroupByPayload<T extends DayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DayGroupByOutputType[P]>
            : GetScalarType<T[P], DayGroupByOutputType[P]>
        }
      >
    >


  export type DaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    weekId?: boolean
    week?: boolean | WeekDefaultArgs<ExtArgs>
    subjects?: boolean | Day$subjectsArgs<ExtArgs>
    _count?: boolean | DayCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["day"]>

  export type DaySelectScalar = {
    id?: boolean
    name?: boolean
    weekId?: boolean
  }


  export type DayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    week?: boolean | WeekDefaultArgs<ExtArgs>
    subjects?: boolean | Day$subjectsArgs<ExtArgs>
    _count?: boolean | DayCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Day"
    objects: {
      week: Prisma.$WeekPayload<ExtArgs>
      subjects: Prisma.$DaySubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: $Enums.WeekDays
      weekId: number
    }, ExtArgs["result"]["day"]>
    composites: {}
  }


  type DayGetPayload<S extends boolean | null | undefined | DayDefaultArgs> = $Result.GetResult<Prisma.$DayPayload, S>

  type DayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DayFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DayCountAggregateInputType | true
    }

  export interface DayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Day'], meta: { name: 'Day' } }
    /**
     * Find zero or one Day that matches the filter.
     * @param {DayFindUniqueArgs} args - Arguments to find a Day
     * @example
     * // Get one Day
     * const day = await prisma.day.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DayFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DayFindUniqueArgs<ExtArgs>>
    ): Prisma__DayClient<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Day that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DayFindUniqueOrThrowArgs} args - Arguments to find a Day
     * @example
     * // Get one Day
     * const day = await prisma.day.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DayFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DayFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DayClient<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Day that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayFindFirstArgs} args - Arguments to find a Day
     * @example
     * // Get one Day
     * const day = await prisma.day.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DayFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DayFindFirstArgs<ExtArgs>>
    ): Prisma__DayClient<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Day that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayFindFirstOrThrowArgs} args - Arguments to find a Day
     * @example
     * // Get one Day
     * const day = await prisma.day.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DayFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DayFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DayClient<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Days that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Days
     * const days = await prisma.day.findMany()
     * 
     * // Get first 10 Days
     * const days = await prisma.day.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dayWithIdOnly = await prisma.day.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DayFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DayFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Day.
     * @param {DayCreateArgs} args - Arguments to create a Day.
     * @example
     * // Create one Day
     * const Day = await prisma.day.create({
     *   data: {
     *     // ... data to create a Day
     *   }
     * })
     * 
    **/
    create<T extends DayCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DayCreateArgs<ExtArgs>>
    ): Prisma__DayClient<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Days.
     *     @param {DayCreateManyArgs} args - Arguments to create many Days.
     *     @example
     *     // Create many Days
     *     const day = await prisma.day.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DayCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DayCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Day.
     * @param {DayDeleteArgs} args - Arguments to delete one Day.
     * @example
     * // Delete one Day
     * const Day = await prisma.day.delete({
     *   where: {
     *     // ... filter to delete one Day
     *   }
     * })
     * 
    **/
    delete<T extends DayDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DayDeleteArgs<ExtArgs>>
    ): Prisma__DayClient<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Day.
     * @param {DayUpdateArgs} args - Arguments to update one Day.
     * @example
     * // Update one Day
     * const day = await prisma.day.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DayUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DayUpdateArgs<ExtArgs>>
    ): Prisma__DayClient<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Days.
     * @param {DayDeleteManyArgs} args - Arguments to filter Days to delete.
     * @example
     * // Delete a few Days
     * const { count } = await prisma.day.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DayDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DayDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Days.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Days
     * const day = await prisma.day.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DayUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DayUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Day.
     * @param {DayUpsertArgs} args - Arguments to update or create a Day.
     * @example
     * // Update or create a Day
     * const day = await prisma.day.upsert({
     *   create: {
     *     // ... data to create a Day
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Day we want to update
     *   }
     * })
    **/
    upsert<T extends DayUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DayUpsertArgs<ExtArgs>>
    ): Prisma__DayClient<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Days.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayCountArgs} args - Arguments to filter Days to count.
     * @example
     * // Count the number of Days
     * const count = await prisma.day.count({
     *   where: {
     *     // ... the filter for the Days we want to count
     *   }
     * })
    **/
    count<T extends DayCountArgs>(
      args?: Subset<T, DayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Day.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DayAggregateArgs>(args: Subset<T, DayAggregateArgs>): Prisma.PrismaPromise<GetDayAggregateType<T>>

    /**
     * Group by Day.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DayGroupByArgs['orderBy'] }
        : { orderBy?: DayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Day model
   */
  readonly fields: DayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Day.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    week<T extends WeekDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WeekDefaultArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    subjects<T extends Day$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, Day$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Day model
   */ 
  interface DayFieldRefs {
    readonly id: FieldRef<"Day", 'Int'>
    readonly name: FieldRef<"Day", 'WeekDays'>
    readonly weekId: FieldRef<"Day", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Day findUnique
   */
  export type DayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
    /**
     * Filter, which Day to fetch.
     */
    where: DayWhereUniqueInput
  }

  /**
   * Day findUniqueOrThrow
   */
  export type DayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
    /**
     * Filter, which Day to fetch.
     */
    where: DayWhereUniqueInput
  }

  /**
   * Day findFirst
   */
  export type DayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
    /**
     * Filter, which Day to fetch.
     */
    where?: DayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Days to fetch.
     */
    orderBy?: DayOrderByWithRelationInput | DayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Days.
     */
    cursor?: DayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Days.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Days.
     */
    distinct?: DayScalarFieldEnum | DayScalarFieldEnum[]
  }

  /**
   * Day findFirstOrThrow
   */
  export type DayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
    /**
     * Filter, which Day to fetch.
     */
    where?: DayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Days to fetch.
     */
    orderBy?: DayOrderByWithRelationInput | DayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Days.
     */
    cursor?: DayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Days.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Days.
     */
    distinct?: DayScalarFieldEnum | DayScalarFieldEnum[]
  }

  /**
   * Day findMany
   */
  export type DayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
    /**
     * Filter, which Days to fetch.
     */
    where?: DayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Days to fetch.
     */
    orderBy?: DayOrderByWithRelationInput | DayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Days.
     */
    cursor?: DayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Days.
     */
    skip?: number
    distinct?: DayScalarFieldEnum | DayScalarFieldEnum[]
  }

  /**
   * Day create
   */
  export type DayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
    /**
     * The data needed to create a Day.
     */
    data: XOR<DayCreateInput, DayUncheckedCreateInput>
  }

  /**
   * Day createMany
   */
  export type DayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Days.
     */
    data: DayCreateManyInput | DayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Day update
   */
  export type DayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
    /**
     * The data needed to update a Day.
     */
    data: XOR<DayUpdateInput, DayUncheckedUpdateInput>
    /**
     * Choose, which Day to update.
     */
    where: DayWhereUniqueInput
  }

  /**
   * Day updateMany
   */
  export type DayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Days.
     */
    data: XOR<DayUpdateManyMutationInput, DayUncheckedUpdateManyInput>
    /**
     * Filter which Days to update
     */
    where?: DayWhereInput
  }

  /**
   * Day upsert
   */
  export type DayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
    /**
     * The filter to search for the Day to update in case it exists.
     */
    where: DayWhereUniqueInput
    /**
     * In case the Day found by the `where` argument doesn't exist, create a new Day with this data.
     */
    create: XOR<DayCreateInput, DayUncheckedCreateInput>
    /**
     * In case the Day was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DayUpdateInput, DayUncheckedUpdateInput>
  }

  /**
   * Day delete
   */
  export type DayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
    /**
     * Filter which Day to delete.
     */
    where: DayWhereUniqueInput
  }

  /**
   * Day deleteMany
   */
  export type DayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Days to delete
     */
    where?: DayWhereInput
  }

  /**
   * Day.subjects
   */
  export type Day$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    where?: DaySubjectWhereInput
    orderBy?: DaySubjectOrderByWithRelationInput | DaySubjectOrderByWithRelationInput[]
    cursor?: DaySubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DaySubjectScalarFieldEnum | DaySubjectScalarFieldEnum[]
  }

  /**
   * Day without action
   */
  export type DayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Day
     */
    select?: DaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    id: number | null
  }

  export type SubjectSumAggregateOutputType = {
    id: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    id?: true
  }

  export type SubjectSumAggregateInputType = {
    id?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: number
    name: string
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    days?: boolean | Subject$daysArgs<ExtArgs>
    attendanceSnapshots?: boolean | Subject$attendanceSnapshotsArgs<ExtArgs>
    teacher?: boolean | Subject$teacherArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    id?: boolean
    name?: boolean
  }


  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    days?: boolean | Subject$daysArgs<ExtArgs>
    attendanceSnapshots?: boolean | Subject$attendanceSnapshotsArgs<ExtArgs>
    teacher?: boolean | Subject$teacherArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      days: Prisma.$DaySubjectPayload<ExtArgs>[]
      attendanceSnapshots: Prisma.$AttendanceSnapshotPayload<ExtArgs>[]
      teacher: Prisma.$TeacherPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }


  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Subject that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
    **/
    create<T extends SubjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Subjects.
     *     @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     *     @example
     *     // Create many Subjects
     *     const subject = await prisma.subject.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
    **/
    delete<T extends SubjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
    **/
    upsert<T extends SubjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    days<T extends Subject$daysArgs<ExtArgs> = {}>(args?: Subset<T, Subject$daysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    attendanceSnapshots<T extends Subject$attendanceSnapshotsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$attendanceSnapshotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'findMany'> | Null>;

    teacher<T extends Subject$teacherArgs<ExtArgs> = {}>(args?: Subset<T, Subject$teacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Subject model
   */ 
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'Int'>
    readonly name: FieldRef<"Subject", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
  }

  /**
   * Subject.days
   */
  export type Subject$daysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    where?: DaySubjectWhereInput
    orderBy?: DaySubjectOrderByWithRelationInput | DaySubjectOrderByWithRelationInput[]
    cursor?: DaySubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DaySubjectScalarFieldEnum | DaySubjectScalarFieldEnum[]
  }

  /**
   * Subject.attendanceSnapshots
   */
  export type Subject$attendanceSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    where?: AttendanceSnapshotWhereInput
    orderBy?: AttendanceSnapshotOrderByWithRelationInput | AttendanceSnapshotOrderByWithRelationInput[]
    cursor?: AttendanceSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceSnapshotScalarFieldEnum | AttendanceSnapshotScalarFieldEnum[]
  }

  /**
   * Subject.teacher
   */
  export type Subject$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model DaySubject
   */

  export type AggregateDaySubject = {
    _count: DaySubjectCountAggregateOutputType | null
    _avg: DaySubjectAvgAggregateOutputType | null
    _sum: DaySubjectSumAggregateOutputType | null
    _min: DaySubjectMinAggregateOutputType | null
    _max: DaySubjectMaxAggregateOutputType | null
  }

  export type DaySubjectAvgAggregateOutputType = {
    id: number | null
    dayId: number | null
    subjectId: number | null
  }

  export type DaySubjectSumAggregateOutputType = {
    id: number | null
    dayId: number | null
    subjectId: number | null
  }

  export type DaySubjectMinAggregateOutputType = {
    id: number | null
    dayId: number | null
    subjectId: number | null
    startTime: string | null
  }

  export type DaySubjectMaxAggregateOutputType = {
    id: number | null
    dayId: number | null
    subjectId: number | null
    startTime: string | null
  }

  export type DaySubjectCountAggregateOutputType = {
    id: number
    dayId: number
    subjectId: number
    startTime: number
    _all: number
  }


  export type DaySubjectAvgAggregateInputType = {
    id?: true
    dayId?: true
    subjectId?: true
  }

  export type DaySubjectSumAggregateInputType = {
    id?: true
    dayId?: true
    subjectId?: true
  }

  export type DaySubjectMinAggregateInputType = {
    id?: true
    dayId?: true
    subjectId?: true
    startTime?: true
  }

  export type DaySubjectMaxAggregateInputType = {
    id?: true
    dayId?: true
    subjectId?: true
    startTime?: true
  }

  export type DaySubjectCountAggregateInputType = {
    id?: true
    dayId?: true
    subjectId?: true
    startTime?: true
    _all?: true
  }

  export type DaySubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DaySubject to aggregate.
     */
    where?: DaySubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaySubjects to fetch.
     */
    orderBy?: DaySubjectOrderByWithRelationInput | DaySubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DaySubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaySubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaySubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DaySubjects
    **/
    _count?: true | DaySubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DaySubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DaySubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DaySubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DaySubjectMaxAggregateInputType
  }

  export type GetDaySubjectAggregateType<T extends DaySubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateDaySubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDaySubject[P]>
      : GetScalarType<T[P], AggregateDaySubject[P]>
  }




  export type DaySubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DaySubjectWhereInput
    orderBy?: DaySubjectOrderByWithAggregationInput | DaySubjectOrderByWithAggregationInput[]
    by: DaySubjectScalarFieldEnum[] | DaySubjectScalarFieldEnum
    having?: DaySubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DaySubjectCountAggregateInputType | true
    _avg?: DaySubjectAvgAggregateInputType
    _sum?: DaySubjectSumAggregateInputType
    _min?: DaySubjectMinAggregateInputType
    _max?: DaySubjectMaxAggregateInputType
  }

  export type DaySubjectGroupByOutputType = {
    id: number
    dayId: number
    subjectId: number
    startTime: string
    _count: DaySubjectCountAggregateOutputType | null
    _avg: DaySubjectAvgAggregateOutputType | null
    _sum: DaySubjectSumAggregateOutputType | null
    _min: DaySubjectMinAggregateOutputType | null
    _max: DaySubjectMaxAggregateOutputType | null
  }

  type GetDaySubjectGroupByPayload<T extends DaySubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DaySubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DaySubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DaySubjectGroupByOutputType[P]>
            : GetScalarType<T[P], DaySubjectGroupByOutputType[P]>
        }
      >
    >


  export type DaySubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dayId?: boolean
    subjectId?: boolean
    startTime?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    day?: boolean | DayDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["daySubject"]>

  export type DaySubjectSelectScalar = {
    id?: boolean
    dayId?: boolean
    subjectId?: boolean
    startTime?: boolean
  }


  export type DaySubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    day?: boolean | DayDefaultArgs<ExtArgs>
  }


  export type $DaySubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DaySubject"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs>
      day: Prisma.$DayPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dayId: number
      subjectId: number
      startTime: string
    }, ExtArgs["result"]["daySubject"]>
    composites: {}
  }


  type DaySubjectGetPayload<S extends boolean | null | undefined | DaySubjectDefaultArgs> = $Result.GetResult<Prisma.$DaySubjectPayload, S>

  type DaySubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DaySubjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DaySubjectCountAggregateInputType | true
    }

  export interface DaySubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DaySubject'], meta: { name: 'DaySubject' } }
    /**
     * Find zero or one DaySubject that matches the filter.
     * @param {DaySubjectFindUniqueArgs} args - Arguments to find a DaySubject
     * @example
     * // Get one DaySubject
     * const daySubject = await prisma.daySubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DaySubjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DaySubjectFindUniqueArgs<ExtArgs>>
    ): Prisma__DaySubjectClient<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DaySubject that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DaySubjectFindUniqueOrThrowArgs} args - Arguments to find a DaySubject
     * @example
     * // Get one DaySubject
     * const daySubject = await prisma.daySubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DaySubjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DaySubjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DaySubjectClient<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DaySubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySubjectFindFirstArgs} args - Arguments to find a DaySubject
     * @example
     * // Get one DaySubject
     * const daySubject = await prisma.daySubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DaySubjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DaySubjectFindFirstArgs<ExtArgs>>
    ): Prisma__DaySubjectClient<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DaySubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySubjectFindFirstOrThrowArgs} args - Arguments to find a DaySubject
     * @example
     * // Get one DaySubject
     * const daySubject = await prisma.daySubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DaySubjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DaySubjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DaySubjectClient<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DaySubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySubjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DaySubjects
     * const daySubjects = await prisma.daySubject.findMany()
     * 
     * // Get first 10 DaySubjects
     * const daySubjects = await prisma.daySubject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const daySubjectWithIdOnly = await prisma.daySubject.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DaySubjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DaySubjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DaySubject.
     * @param {DaySubjectCreateArgs} args - Arguments to create a DaySubject.
     * @example
     * // Create one DaySubject
     * const DaySubject = await prisma.daySubject.create({
     *   data: {
     *     // ... data to create a DaySubject
     *   }
     * })
     * 
    **/
    create<T extends DaySubjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DaySubjectCreateArgs<ExtArgs>>
    ): Prisma__DaySubjectClient<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DaySubjects.
     *     @param {DaySubjectCreateManyArgs} args - Arguments to create many DaySubjects.
     *     @example
     *     // Create many DaySubjects
     *     const daySubject = await prisma.daySubject.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DaySubjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DaySubjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DaySubject.
     * @param {DaySubjectDeleteArgs} args - Arguments to delete one DaySubject.
     * @example
     * // Delete one DaySubject
     * const DaySubject = await prisma.daySubject.delete({
     *   where: {
     *     // ... filter to delete one DaySubject
     *   }
     * })
     * 
    **/
    delete<T extends DaySubjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DaySubjectDeleteArgs<ExtArgs>>
    ): Prisma__DaySubjectClient<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DaySubject.
     * @param {DaySubjectUpdateArgs} args - Arguments to update one DaySubject.
     * @example
     * // Update one DaySubject
     * const daySubject = await prisma.daySubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DaySubjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DaySubjectUpdateArgs<ExtArgs>>
    ): Prisma__DaySubjectClient<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DaySubjects.
     * @param {DaySubjectDeleteManyArgs} args - Arguments to filter DaySubjects to delete.
     * @example
     * // Delete a few DaySubjects
     * const { count } = await prisma.daySubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DaySubjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DaySubjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DaySubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DaySubjects
     * const daySubject = await prisma.daySubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DaySubjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DaySubjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DaySubject.
     * @param {DaySubjectUpsertArgs} args - Arguments to update or create a DaySubject.
     * @example
     * // Update or create a DaySubject
     * const daySubject = await prisma.daySubject.upsert({
     *   create: {
     *     // ... data to create a DaySubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DaySubject we want to update
     *   }
     * })
    **/
    upsert<T extends DaySubjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DaySubjectUpsertArgs<ExtArgs>>
    ): Prisma__DaySubjectClient<$Result.GetResult<Prisma.$DaySubjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DaySubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySubjectCountArgs} args - Arguments to filter DaySubjects to count.
     * @example
     * // Count the number of DaySubjects
     * const count = await prisma.daySubject.count({
     *   where: {
     *     // ... the filter for the DaySubjects we want to count
     *   }
     * })
    **/
    count<T extends DaySubjectCountArgs>(
      args?: Subset<T, DaySubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DaySubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DaySubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DaySubjectAggregateArgs>(args: Subset<T, DaySubjectAggregateArgs>): Prisma.PrismaPromise<GetDaySubjectAggregateType<T>>

    /**
     * Group by DaySubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaySubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DaySubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DaySubjectGroupByArgs['orderBy'] }
        : { orderBy?: DaySubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DaySubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDaySubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DaySubject model
   */
  readonly fields: DaySubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DaySubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DaySubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    day<T extends DayDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DayDefaultArgs<ExtArgs>>): Prisma__DayClient<$Result.GetResult<Prisma.$DayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DaySubject model
   */ 
  interface DaySubjectFieldRefs {
    readonly id: FieldRef<"DaySubject", 'Int'>
    readonly dayId: FieldRef<"DaySubject", 'Int'>
    readonly subjectId: FieldRef<"DaySubject", 'Int'>
    readonly startTime: FieldRef<"DaySubject", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DaySubject findUnique
   */
  export type DaySubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    /**
     * Filter, which DaySubject to fetch.
     */
    where: DaySubjectWhereUniqueInput
  }

  /**
   * DaySubject findUniqueOrThrow
   */
  export type DaySubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    /**
     * Filter, which DaySubject to fetch.
     */
    where: DaySubjectWhereUniqueInput
  }

  /**
   * DaySubject findFirst
   */
  export type DaySubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    /**
     * Filter, which DaySubject to fetch.
     */
    where?: DaySubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaySubjects to fetch.
     */
    orderBy?: DaySubjectOrderByWithRelationInput | DaySubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DaySubjects.
     */
    cursor?: DaySubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaySubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaySubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DaySubjects.
     */
    distinct?: DaySubjectScalarFieldEnum | DaySubjectScalarFieldEnum[]
  }

  /**
   * DaySubject findFirstOrThrow
   */
  export type DaySubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    /**
     * Filter, which DaySubject to fetch.
     */
    where?: DaySubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaySubjects to fetch.
     */
    orderBy?: DaySubjectOrderByWithRelationInput | DaySubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DaySubjects.
     */
    cursor?: DaySubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaySubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaySubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DaySubjects.
     */
    distinct?: DaySubjectScalarFieldEnum | DaySubjectScalarFieldEnum[]
  }

  /**
   * DaySubject findMany
   */
  export type DaySubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    /**
     * Filter, which DaySubjects to fetch.
     */
    where?: DaySubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaySubjects to fetch.
     */
    orderBy?: DaySubjectOrderByWithRelationInput | DaySubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DaySubjects.
     */
    cursor?: DaySubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaySubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaySubjects.
     */
    skip?: number
    distinct?: DaySubjectScalarFieldEnum | DaySubjectScalarFieldEnum[]
  }

  /**
   * DaySubject create
   */
  export type DaySubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a DaySubject.
     */
    data: XOR<DaySubjectCreateInput, DaySubjectUncheckedCreateInput>
  }

  /**
   * DaySubject createMany
   */
  export type DaySubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DaySubjects.
     */
    data: DaySubjectCreateManyInput | DaySubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DaySubject update
   */
  export type DaySubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a DaySubject.
     */
    data: XOR<DaySubjectUpdateInput, DaySubjectUncheckedUpdateInput>
    /**
     * Choose, which DaySubject to update.
     */
    where: DaySubjectWhereUniqueInput
  }

  /**
   * DaySubject updateMany
   */
  export type DaySubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DaySubjects.
     */
    data: XOR<DaySubjectUpdateManyMutationInput, DaySubjectUncheckedUpdateManyInput>
    /**
     * Filter which DaySubjects to update
     */
    where?: DaySubjectWhereInput
  }

  /**
   * DaySubject upsert
   */
  export type DaySubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the DaySubject to update in case it exists.
     */
    where: DaySubjectWhereUniqueInput
    /**
     * In case the DaySubject found by the `where` argument doesn't exist, create a new DaySubject with this data.
     */
    create: XOR<DaySubjectCreateInput, DaySubjectUncheckedCreateInput>
    /**
     * In case the DaySubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DaySubjectUpdateInput, DaySubjectUncheckedUpdateInput>
  }

  /**
   * DaySubject delete
   */
  export type DaySubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
    /**
     * Filter which DaySubject to delete.
     */
    where: DaySubjectWhereUniqueInput
  }

  /**
   * DaySubject deleteMany
   */
  export type DaySubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DaySubjects to delete
     */
    where?: DaySubjectWhereInput
  }

  /**
   * DaySubject without action
   */
  export type DaySubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaySubject
     */
    select?: DaySubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaySubjectInclude<ExtArgs> | null
  }


  /**
   * Model Group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupAvgAggregateOutputType = {
    id: number | null
    EPId: number | null
    teacherId: number | null
  }

  export type GroupSumAggregateOutputType = {
    id: number | null
    EPId: number | null
    teacherId: number | null
  }

  export type GroupMinAggregateOutputType = {
    id: number | null
    name: string | null
    EPId: number | null
    teacherId: number | null
  }

  export type GroupMaxAggregateOutputType = {
    id: number | null
    name: string | null
    EPId: number | null
    teacherId: number | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    name: number
    EPId: number
    teacherId: number
    _all: number
  }


  export type GroupAvgAggregateInputType = {
    id?: true
    EPId?: true
    teacherId?: true
  }

  export type GroupSumAggregateInputType = {
    id?: true
    EPId?: true
    teacherId?: true
  }

  export type GroupMinAggregateInputType = {
    id?: true
    name?: true
    EPId?: true
    teacherId?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    name?: true
    EPId?: true
    teacherId?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    name?: true
    EPId?: true
    teacherId?: true
    _all?: true
  }

  export type GroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithAggregationInput | GroupOrderByWithAggregationInput[]
    by: GroupScalarFieldEnum[] | GroupScalarFieldEnum
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _avg?: GroupAvgAggregateInputType
    _sum?: GroupSumAggregateInputType
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }

  export type GroupGroupByOutputType = {
    id: number
    name: string
    EPId: number
    teacherId: number | null
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    EPId?: boolean
    teacherId?: boolean
    users?: boolean | Group$usersArgs<ExtArgs>
    schedule?: boolean | Group$scheduleArgs<ExtArgs>
    ep?: boolean | EPDefaultArgs<ExtArgs>
    teacher?: boolean | Group$teacherArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectScalar = {
    id?: boolean
    name?: boolean
    EPId?: boolean
    teacherId?: boolean
  }


  export type GroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Group$usersArgs<ExtArgs>
    schedule?: boolean | Group$scheduleArgs<ExtArgs>
    ep?: boolean | EPDefaultArgs<ExtArgs>
    teacher?: boolean | Group$teacherArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Group"
    objects: {
      users: Prisma.$StudentPayload<ExtArgs>[]
      schedule: Prisma.$SchedulePayload<ExtArgs> | null
      ep: Prisma.$EPPayload<ExtArgs>
      teacher: Prisma.$TeacherPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      EPId: number
      teacherId: number | null
    }, ExtArgs["result"]["group"]>
    composites: {}
  }


  type GroupGetPayload<S extends boolean | null | undefined | GroupDefaultArgs> = $Result.GetResult<Prisma.$GroupPayload, S>

  type GroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Group'], meta: { name: 'Group' } }
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GroupFindUniqueArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Group that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindFirstArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
    **/
    create<T extends GroupCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GroupCreateArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Groups.
     *     @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const group = await prisma.group.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
    **/
    delete<T extends GroupDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GroupDeleteArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GroupUpdateArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GroupUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
    **/
    upsert<T extends GroupUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GroupUpsertArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Group model
   */
  readonly fields: GroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Group$usersArgs<ExtArgs> = {}>(args?: Subset<T, Group$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'> | Null>;

    schedule<T extends Group$scheduleArgs<ExtArgs> = {}>(args?: Subset<T, Group$scheduleArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    ep<T extends EPDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EPDefaultArgs<ExtArgs>>): Prisma__EPClient<$Result.GetResult<Prisma.$EPPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    teacher<T extends Group$teacherArgs<ExtArgs> = {}>(args?: Subset<T, Group$teacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Group model
   */ 
  interface GroupFieldRefs {
    readonly id: FieldRef<"Group", 'Int'>
    readonly name: FieldRef<"Group", 'String'>
    readonly EPId: FieldRef<"Group", 'Int'>
    readonly teacherId: FieldRef<"Group", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Group findUnique
   */
  export type GroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findFirst
   */
  export type GroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findMany
   */
  export type GroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group create
   */
  export type GroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }

  /**
   * Group createMany
   */
  export type GroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Group update
   */
  export type GroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }

  /**
   * Group upsert
   */
  export type GroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }

  /**
   * Group delete
   */
  export type GroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }

  /**
   * Group.users
   */
  export type Group$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Group.schedule
   */
  export type Group$scheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
  }

  /**
   * Group.teacher
   */
  export type Group$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * Group without action
   */
  export type GroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
  }


  /**
   * Model AttendanceSnapshot
   */

  export type AggregateAttendanceSnapshot = {
    _count: AttendanceSnapshotCountAggregateOutputType | null
    _avg: AttendanceSnapshotAvgAggregateOutputType | null
    _sum: AttendanceSnapshotSumAggregateOutputType | null
    _min: AttendanceSnapshotMinAggregateOutputType | null
    _max: AttendanceSnapshotMaxAggregateOutputType | null
  }

  export type AttendanceSnapshotAvgAggregateOutputType = {
    id: number | null
    weekId: number | null
    subjectId: number | null
    userId: number | null
  }

  export type AttendanceSnapshotSumAggregateOutputType = {
    id: number | null
    weekId: number | null
    subjectId: number | null
    userId: number | null
  }

  export type AttendanceSnapshotMinAggregateOutputType = {
    id: number | null
    day: $Enums.WeekDays | null
    time: string | null
    weekId: number | null
    subjectId: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttendanceSnapshotMaxAggregateOutputType = {
    id: number | null
    day: $Enums.WeekDays | null
    time: string | null
    weekId: number | null
    subjectId: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttendanceSnapshotCountAggregateOutputType = {
    id: number
    day: number
    time: number
    weekId: number
    subjectId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AttendanceSnapshotAvgAggregateInputType = {
    id?: true
    weekId?: true
    subjectId?: true
    userId?: true
  }

  export type AttendanceSnapshotSumAggregateInputType = {
    id?: true
    weekId?: true
    subjectId?: true
    userId?: true
  }

  export type AttendanceSnapshotMinAggregateInputType = {
    id?: true
    day?: true
    time?: true
    weekId?: true
    subjectId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttendanceSnapshotMaxAggregateInputType = {
    id?: true
    day?: true
    time?: true
    weekId?: true
    subjectId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttendanceSnapshotCountAggregateInputType = {
    id?: true
    day?: true
    time?: true
    weekId?: true
    subjectId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AttendanceSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceSnapshot to aggregate.
     */
    where?: AttendanceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceSnapshots to fetch.
     */
    orderBy?: AttendanceSnapshotOrderByWithRelationInput | AttendanceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AttendanceSnapshots
    **/
    _count?: true | AttendanceSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceSnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceSnapshotMaxAggregateInputType
  }

  export type GetAttendanceSnapshotAggregateType<T extends AttendanceSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendanceSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendanceSnapshot[P]>
      : GetScalarType<T[P], AggregateAttendanceSnapshot[P]>
  }




  export type AttendanceSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceSnapshotWhereInput
    orderBy?: AttendanceSnapshotOrderByWithAggregationInput | AttendanceSnapshotOrderByWithAggregationInput[]
    by: AttendanceSnapshotScalarFieldEnum[] | AttendanceSnapshotScalarFieldEnum
    having?: AttendanceSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceSnapshotCountAggregateInputType | true
    _avg?: AttendanceSnapshotAvgAggregateInputType
    _sum?: AttendanceSnapshotSumAggregateInputType
    _min?: AttendanceSnapshotMinAggregateInputType
    _max?: AttendanceSnapshotMaxAggregateInputType
  }

  export type AttendanceSnapshotGroupByOutputType = {
    id: number
    day: $Enums.WeekDays
    time: string
    weekId: number
    subjectId: number
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: AttendanceSnapshotCountAggregateOutputType | null
    _avg: AttendanceSnapshotAvgAggregateOutputType | null
    _sum: AttendanceSnapshotSumAggregateOutputType | null
    _min: AttendanceSnapshotMinAggregateOutputType | null
    _max: AttendanceSnapshotMaxAggregateOutputType | null
  }

  type GetAttendanceSnapshotGroupByPayload<T extends AttendanceSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    day?: boolean
    time?: boolean
    weekId?: boolean
    subjectId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    week?: boolean | WeekDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    user?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceSnapshot"]>

  export type AttendanceSnapshotSelectScalar = {
    id?: boolean
    day?: boolean
    time?: boolean
    weekId?: boolean
    subjectId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type AttendanceSnapshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    week?: boolean | WeekDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    user?: boolean | StudentDefaultArgs<ExtArgs>
  }


  export type $AttendanceSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AttendanceSnapshot"
    objects: {
      week: Prisma.$WeekPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
      user: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      day: $Enums.WeekDays
      time: string
      weekId: number
      subjectId: number
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["attendanceSnapshot"]>
    composites: {}
  }


  type AttendanceSnapshotGetPayload<S extends boolean | null | undefined | AttendanceSnapshotDefaultArgs> = $Result.GetResult<Prisma.$AttendanceSnapshotPayload, S>

  type AttendanceSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttendanceSnapshotFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttendanceSnapshotCountAggregateInputType | true
    }

  export interface AttendanceSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AttendanceSnapshot'], meta: { name: 'AttendanceSnapshot' } }
    /**
     * Find zero or one AttendanceSnapshot that matches the filter.
     * @param {AttendanceSnapshotFindUniqueArgs} args - Arguments to find a AttendanceSnapshot
     * @example
     * // Get one AttendanceSnapshot
     * const attendanceSnapshot = await prisma.attendanceSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AttendanceSnapshotFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AttendanceSnapshotFindUniqueArgs<ExtArgs>>
    ): Prisma__AttendanceSnapshotClient<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AttendanceSnapshot that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AttendanceSnapshotFindUniqueOrThrowArgs} args - Arguments to find a AttendanceSnapshot
     * @example
     * // Get one AttendanceSnapshot
     * const attendanceSnapshot = await prisma.attendanceSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AttendanceSnapshotFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendanceSnapshotFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AttendanceSnapshotClient<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AttendanceSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSnapshotFindFirstArgs} args - Arguments to find a AttendanceSnapshot
     * @example
     * // Get one AttendanceSnapshot
     * const attendanceSnapshot = await prisma.attendanceSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AttendanceSnapshotFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendanceSnapshotFindFirstArgs<ExtArgs>>
    ): Prisma__AttendanceSnapshotClient<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AttendanceSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSnapshotFindFirstOrThrowArgs} args - Arguments to find a AttendanceSnapshot
     * @example
     * // Get one AttendanceSnapshot
     * const attendanceSnapshot = await prisma.attendanceSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AttendanceSnapshotFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendanceSnapshotFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AttendanceSnapshotClient<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AttendanceSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSnapshotFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AttendanceSnapshots
     * const attendanceSnapshots = await prisma.attendanceSnapshot.findMany()
     * 
     * // Get first 10 AttendanceSnapshots
     * const attendanceSnapshots = await prisma.attendanceSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceSnapshotWithIdOnly = await prisma.attendanceSnapshot.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AttendanceSnapshotFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendanceSnapshotFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AttendanceSnapshot.
     * @param {AttendanceSnapshotCreateArgs} args - Arguments to create a AttendanceSnapshot.
     * @example
     * // Create one AttendanceSnapshot
     * const AttendanceSnapshot = await prisma.attendanceSnapshot.create({
     *   data: {
     *     // ... data to create a AttendanceSnapshot
     *   }
     * })
     * 
    **/
    create<T extends AttendanceSnapshotCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AttendanceSnapshotCreateArgs<ExtArgs>>
    ): Prisma__AttendanceSnapshotClient<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AttendanceSnapshots.
     *     @param {AttendanceSnapshotCreateManyArgs} args - Arguments to create many AttendanceSnapshots.
     *     @example
     *     // Create many AttendanceSnapshots
     *     const attendanceSnapshot = await prisma.attendanceSnapshot.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AttendanceSnapshotCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendanceSnapshotCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AttendanceSnapshot.
     * @param {AttendanceSnapshotDeleteArgs} args - Arguments to delete one AttendanceSnapshot.
     * @example
     * // Delete one AttendanceSnapshot
     * const AttendanceSnapshot = await prisma.attendanceSnapshot.delete({
     *   where: {
     *     // ... filter to delete one AttendanceSnapshot
     *   }
     * })
     * 
    **/
    delete<T extends AttendanceSnapshotDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AttendanceSnapshotDeleteArgs<ExtArgs>>
    ): Prisma__AttendanceSnapshotClient<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AttendanceSnapshot.
     * @param {AttendanceSnapshotUpdateArgs} args - Arguments to update one AttendanceSnapshot.
     * @example
     * // Update one AttendanceSnapshot
     * const attendanceSnapshot = await prisma.attendanceSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AttendanceSnapshotUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AttendanceSnapshotUpdateArgs<ExtArgs>>
    ): Prisma__AttendanceSnapshotClient<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AttendanceSnapshots.
     * @param {AttendanceSnapshotDeleteManyArgs} args - Arguments to filter AttendanceSnapshots to delete.
     * @example
     * // Delete a few AttendanceSnapshots
     * const { count } = await prisma.attendanceSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AttendanceSnapshotDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AttendanceSnapshotDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AttendanceSnapshots
     * const attendanceSnapshot = await prisma.attendanceSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AttendanceSnapshotUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AttendanceSnapshotUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AttendanceSnapshot.
     * @param {AttendanceSnapshotUpsertArgs} args - Arguments to update or create a AttendanceSnapshot.
     * @example
     * // Update or create a AttendanceSnapshot
     * const attendanceSnapshot = await prisma.attendanceSnapshot.upsert({
     *   create: {
     *     // ... data to create a AttendanceSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AttendanceSnapshot we want to update
     *   }
     * })
    **/
    upsert<T extends AttendanceSnapshotUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AttendanceSnapshotUpsertArgs<ExtArgs>>
    ): Prisma__AttendanceSnapshotClient<$Result.GetResult<Prisma.$AttendanceSnapshotPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AttendanceSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSnapshotCountArgs} args - Arguments to filter AttendanceSnapshots to count.
     * @example
     * // Count the number of AttendanceSnapshots
     * const count = await prisma.attendanceSnapshot.count({
     *   where: {
     *     // ... the filter for the AttendanceSnapshots we want to count
     *   }
     * })
    **/
    count<T extends AttendanceSnapshotCountArgs>(
      args?: Subset<T, AttendanceSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AttendanceSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceSnapshotAggregateArgs>(args: Subset<T, AttendanceSnapshotAggregateArgs>): Prisma.PrismaPromise<GetAttendanceSnapshotAggregateType<T>>

    /**
     * Group by AttendanceSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AttendanceSnapshot model
   */
  readonly fields: AttendanceSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AttendanceSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    week<T extends WeekDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WeekDefaultArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AttendanceSnapshot model
   */ 
  interface AttendanceSnapshotFieldRefs {
    readonly id: FieldRef<"AttendanceSnapshot", 'Int'>
    readonly day: FieldRef<"AttendanceSnapshot", 'WeekDays'>
    readonly time: FieldRef<"AttendanceSnapshot", 'String'>
    readonly weekId: FieldRef<"AttendanceSnapshot", 'Int'>
    readonly subjectId: FieldRef<"AttendanceSnapshot", 'Int'>
    readonly userId: FieldRef<"AttendanceSnapshot", 'Int'>
    readonly createdAt: FieldRef<"AttendanceSnapshot", 'DateTime'>
    readonly updatedAt: FieldRef<"AttendanceSnapshot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AttendanceSnapshot findUnique
   */
  export type AttendanceSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceSnapshot to fetch.
     */
    where: AttendanceSnapshotWhereUniqueInput
  }

  /**
   * AttendanceSnapshot findUniqueOrThrow
   */
  export type AttendanceSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceSnapshot to fetch.
     */
    where: AttendanceSnapshotWhereUniqueInput
  }

  /**
   * AttendanceSnapshot findFirst
   */
  export type AttendanceSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceSnapshot to fetch.
     */
    where?: AttendanceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceSnapshots to fetch.
     */
    orderBy?: AttendanceSnapshotOrderByWithRelationInput | AttendanceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceSnapshots.
     */
    cursor?: AttendanceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceSnapshots.
     */
    distinct?: AttendanceSnapshotScalarFieldEnum | AttendanceSnapshotScalarFieldEnum[]
  }

  /**
   * AttendanceSnapshot findFirstOrThrow
   */
  export type AttendanceSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceSnapshot to fetch.
     */
    where?: AttendanceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceSnapshots to fetch.
     */
    orderBy?: AttendanceSnapshotOrderByWithRelationInput | AttendanceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceSnapshots.
     */
    cursor?: AttendanceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceSnapshots.
     */
    distinct?: AttendanceSnapshotScalarFieldEnum | AttendanceSnapshotScalarFieldEnum[]
  }

  /**
   * AttendanceSnapshot findMany
   */
  export type AttendanceSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceSnapshots to fetch.
     */
    where?: AttendanceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceSnapshots to fetch.
     */
    orderBy?: AttendanceSnapshotOrderByWithRelationInput | AttendanceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AttendanceSnapshots.
     */
    cursor?: AttendanceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceSnapshots.
     */
    skip?: number
    distinct?: AttendanceSnapshotScalarFieldEnum | AttendanceSnapshotScalarFieldEnum[]
  }

  /**
   * AttendanceSnapshot create
   */
  export type AttendanceSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to create a AttendanceSnapshot.
     */
    data: XOR<AttendanceSnapshotCreateInput, AttendanceSnapshotUncheckedCreateInput>
  }

  /**
   * AttendanceSnapshot createMany
   */
  export type AttendanceSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AttendanceSnapshots.
     */
    data: AttendanceSnapshotCreateManyInput | AttendanceSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AttendanceSnapshot update
   */
  export type AttendanceSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to update a AttendanceSnapshot.
     */
    data: XOR<AttendanceSnapshotUpdateInput, AttendanceSnapshotUncheckedUpdateInput>
    /**
     * Choose, which AttendanceSnapshot to update.
     */
    where: AttendanceSnapshotWhereUniqueInput
  }

  /**
   * AttendanceSnapshot updateMany
   */
  export type AttendanceSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AttendanceSnapshots.
     */
    data: XOR<AttendanceSnapshotUpdateManyMutationInput, AttendanceSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceSnapshots to update
     */
    where?: AttendanceSnapshotWhereInput
  }

  /**
   * AttendanceSnapshot upsert
   */
  export type AttendanceSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    /**
     * The filter to search for the AttendanceSnapshot to update in case it exists.
     */
    where: AttendanceSnapshotWhereUniqueInput
    /**
     * In case the AttendanceSnapshot found by the `where` argument doesn't exist, create a new AttendanceSnapshot with this data.
     */
    create: XOR<AttendanceSnapshotCreateInput, AttendanceSnapshotUncheckedCreateInput>
    /**
     * In case the AttendanceSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceSnapshotUpdateInput, AttendanceSnapshotUncheckedUpdateInput>
  }

  /**
   * AttendanceSnapshot delete
   */
  export type AttendanceSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter which AttendanceSnapshot to delete.
     */
    where: AttendanceSnapshotWhereUniqueInput
  }

  /**
   * AttendanceSnapshot deleteMany
   */
  export type AttendanceSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceSnapshots to delete
     */
    where?: AttendanceSnapshotWhereInput
  }

  /**
   * AttendanceSnapshot without action
   */
  export type AttendanceSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceSnapshot
     */
    select?: AttendanceSnapshotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceSnapshotInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MedicalCertificateScalarFieldEnum: {
    id: 'id',
    path: 'path',
    status: 'status',
    originalName: 'originalName',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    studentId: 'studentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicalCertificateScalarFieldEnum = (typeof MedicalCertificateScalarFieldEnum)[keyof typeof MedicalCertificateScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    groupId: 'groupId'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    subjectId: 'subjectId'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    surname: 'surname',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const FacultyScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type FacultyScalarFieldEnum = (typeof FacultyScalarFieldEnum)[keyof typeof FacultyScalarFieldEnum]


  export const EPScalarFieldEnum: {
    id: 'id',
    name: 'name',
    facultyId: 'facultyId'
  };

  export type EPScalarFieldEnum = (typeof EPScalarFieldEnum)[keyof typeof EPScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    groupId: 'groupId'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const WeekScalarFieldEnum: {
    id: 'id',
    scheduleId: 'scheduleId',
    number: 'number'
  };

  export type WeekScalarFieldEnum = (typeof WeekScalarFieldEnum)[keyof typeof WeekScalarFieldEnum]


  export const DayScalarFieldEnum: {
    id: 'id',
    name: 'name',
    weekId: 'weekId'
  };

  export type DayScalarFieldEnum = (typeof DayScalarFieldEnum)[keyof typeof DayScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const DaySubjectScalarFieldEnum: {
    id: 'id',
    dayId: 'dayId',
    subjectId: 'subjectId',
    startTime: 'startTime'
  };

  export type DaySubjectScalarFieldEnum = (typeof DaySubjectScalarFieldEnum)[keyof typeof DaySubjectScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    name: 'name',
    EPId: 'EPId',
    teacherId: 'teacherId'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const AttendanceSnapshotScalarFieldEnum: {
    id: 'id',
    day: 'day',
    time: 'time',
    weekId: 'weekId',
    subjectId: 'subjectId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AttendanceSnapshotScalarFieldEnum = (typeof AttendanceSnapshotScalarFieldEnum)[keyof typeof AttendanceSnapshotScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ROLE'
   */
  export type EnumROLEFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ROLE'>
    


  /**
   * Reference to a field of type 'ROLE[]'
   */
  export type ListEnumROLEFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ROLE[]'>
    


  /**
   * Reference to a field of type 'WeekDays'
   */
  export type EnumWeekDaysFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WeekDays'>
    


  /**
   * Reference to a field of type 'WeekDays[]'
   */
  export type ListEnumWeekDaysFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WeekDays[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type MedicalCertificateWhereInput = {
    AND?: MedicalCertificateWhereInput | MedicalCertificateWhereInput[]
    OR?: MedicalCertificateWhereInput[]
    NOT?: MedicalCertificateWhereInput | MedicalCertificateWhereInput[]
    id?: IntFilter<"MedicalCertificate"> | number
    path?: StringFilter<"MedicalCertificate"> | string
    status?: EnumStatusFilter<"MedicalCertificate"> | $Enums.Status
    originalName?: StringFilter<"MedicalCertificate"> | string
    description?: StringFilter<"MedicalCertificate"> | string
    startDate?: DateTimeFilter<"MedicalCertificate"> | Date | string
    endDate?: DateTimeFilter<"MedicalCertificate"> | Date | string
    studentId?: IntFilter<"MedicalCertificate"> | number
    createdAt?: DateTimeFilter<"MedicalCertificate"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalCertificate"> | Date | string
    student?: XOR<StudentRelationFilter, StudentWhereInput>
  }

  export type MedicalCertificateOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    status?: SortOrder
    originalName?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type MedicalCertificateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    path?: string
    AND?: MedicalCertificateWhereInput | MedicalCertificateWhereInput[]
    OR?: MedicalCertificateWhereInput[]
    NOT?: MedicalCertificateWhereInput | MedicalCertificateWhereInput[]
    status?: EnumStatusFilter<"MedicalCertificate"> | $Enums.Status
    originalName?: StringFilter<"MedicalCertificate"> | string
    description?: StringFilter<"MedicalCertificate"> | string
    startDate?: DateTimeFilter<"MedicalCertificate"> | Date | string
    endDate?: DateTimeFilter<"MedicalCertificate"> | Date | string
    studentId?: IntFilter<"MedicalCertificate"> | number
    createdAt?: DateTimeFilter<"MedicalCertificate"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalCertificate"> | Date | string
    student?: XOR<StudentRelationFilter, StudentWhereInput>
  }, "id" | "path">

  export type MedicalCertificateOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    status?: SortOrder
    originalName?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicalCertificateCountOrderByAggregateInput
    _avg?: MedicalCertificateAvgOrderByAggregateInput
    _max?: MedicalCertificateMaxOrderByAggregateInput
    _min?: MedicalCertificateMinOrderByAggregateInput
    _sum?: MedicalCertificateSumOrderByAggregateInput
  }

  export type MedicalCertificateScalarWhereWithAggregatesInput = {
    AND?: MedicalCertificateScalarWhereWithAggregatesInput | MedicalCertificateScalarWhereWithAggregatesInput[]
    OR?: MedicalCertificateScalarWhereWithAggregatesInput[]
    NOT?: MedicalCertificateScalarWhereWithAggregatesInput | MedicalCertificateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MedicalCertificate"> | number
    path?: StringWithAggregatesFilter<"MedicalCertificate"> | string
    status?: EnumStatusWithAggregatesFilter<"MedicalCertificate"> | $Enums.Status
    originalName?: StringWithAggregatesFilter<"MedicalCertificate"> | string
    description?: StringWithAggregatesFilter<"MedicalCertificate"> | string
    startDate?: DateTimeWithAggregatesFilter<"MedicalCertificate"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"MedicalCertificate"> | Date | string
    studentId?: IntWithAggregatesFilter<"MedicalCertificate"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MedicalCertificate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MedicalCertificate"> | Date | string
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: IntFilter<"Student"> | number
    accountId?: IntFilter<"Student"> | number
    groupId?: IntNullableFilter<"Student"> | number | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    group?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
    MedicalCertificate?: MedicalCertificateListRelationFilter
    AttendanceSnapshot?: AttendanceSnapshotListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    groupId?: SortOrderInput | SortOrder
    account?: AccountOrderByWithRelationInput
    group?: GroupOrderByWithRelationInput
    MedicalCertificate?: MedicalCertificateOrderByRelationAggregateInput
    AttendanceSnapshot?: AttendanceSnapshotOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    accountId?: number
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    groupId?: IntNullableFilter<"Student"> | number | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    group?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
    MedicalCertificate?: MedicalCertificateListRelationFilter
    AttendanceSnapshot?: AttendanceSnapshotListRelationFilter
  }, "id" | "accountId">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    groupId?: SortOrderInput | SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Student"> | number
    accountId?: IntWithAggregatesFilter<"Student"> | number
    groupId?: IntNullableWithAggregatesFilter<"Student"> | number | null
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    accountId?: IntFilter<"Admin"> | number
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    accountId?: number
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }, "id" | "accountId">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    accountId?: IntWithAggregatesFilter<"Admin"> | number
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    id?: IntFilter<"Teacher"> | number
    accountId?: IntFilter<"Teacher"> | number
    subjectId?: IntNullableFilter<"Teacher"> | number | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    subject?: XOR<SubjectNullableRelationFilter, SubjectWhereInput> | null
    groups?: GroupListRelationFilter
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    subjectId?: SortOrderInput | SortOrder
    account?: AccountOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    groups?: GroupOrderByRelationAggregateInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    accountId?: number
    subjectId?: number
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    subject?: XOR<SubjectNullableRelationFilter, SubjectWhereInput> | null
    groups?: GroupListRelationFilter
  }, "id" | "accountId" | "subjectId">

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    subjectId?: SortOrderInput | SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _avg?: TeacherAvgOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
    _sum?: TeacherSumOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Teacher"> | number
    accountId?: IntWithAggregatesFilter<"Teacher"> | number
    subjectId?: IntNullableWithAggregatesFilter<"Teacher"> | number | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: IntFilter<"Account"> | number
    email?: StringFilter<"Account"> | string
    password?: StringFilter<"Account"> | string
    name?: StringNullableFilter<"Account"> | string | null
    surname?: StringNullableFilter<"Account"> | string | null
    role?: EnumROLEFilter<"Account"> | $Enums.ROLE
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    User?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    Admin?: XOR<AdminNullableRelationFilter, AdminWhereInput> | null
    Teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    surname?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    User?: StudentOrderByWithRelationInput
    Admin?: AdminOrderByWithRelationInput
    Teacher?: TeacherOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    password?: StringFilter<"Account"> | string
    name?: StringNullableFilter<"Account"> | string | null
    surname?: StringNullableFilter<"Account"> | string | null
    role?: EnumROLEFilter<"Account"> | $Enums.ROLE
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    User?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    Admin?: XOR<AdminNullableRelationFilter, AdminWhereInput> | null
    Teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
  }, "id" | "email">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    surname?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Account"> | number
    email?: StringWithAggregatesFilter<"Account"> | string
    password?: StringWithAggregatesFilter<"Account"> | string
    name?: StringNullableWithAggregatesFilter<"Account"> | string | null
    surname?: StringNullableWithAggregatesFilter<"Account"> | string | null
    role?: EnumROLEWithAggregatesFilter<"Account"> | $Enums.ROLE
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type FacultyWhereInput = {
    AND?: FacultyWhereInput | FacultyWhereInput[]
    OR?: FacultyWhereInput[]
    NOT?: FacultyWhereInput | FacultyWhereInput[]
    id?: IntFilter<"Faculty"> | number
    name?: StringFilter<"Faculty"> | string
    EPs?: EPListRelationFilter
  }

  export type FacultyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    EPs?: EPOrderByRelationAggregateInput
  }

  export type FacultyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: FacultyWhereInput | FacultyWhereInput[]
    OR?: FacultyWhereInput[]
    NOT?: FacultyWhereInput | FacultyWhereInput[]
    EPs?: EPListRelationFilter
  }, "id" | "name">

  export type FacultyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: FacultyCountOrderByAggregateInput
    _avg?: FacultyAvgOrderByAggregateInput
    _max?: FacultyMaxOrderByAggregateInput
    _min?: FacultyMinOrderByAggregateInput
    _sum?: FacultySumOrderByAggregateInput
  }

  export type FacultyScalarWhereWithAggregatesInput = {
    AND?: FacultyScalarWhereWithAggregatesInput | FacultyScalarWhereWithAggregatesInput[]
    OR?: FacultyScalarWhereWithAggregatesInput[]
    NOT?: FacultyScalarWhereWithAggregatesInput | FacultyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Faculty"> | number
    name?: StringWithAggregatesFilter<"Faculty"> | string
  }

  export type EPWhereInput = {
    AND?: EPWhereInput | EPWhereInput[]
    OR?: EPWhereInput[]
    NOT?: EPWhereInput | EPWhereInput[]
    id?: IntFilter<"EP"> | number
    name?: StringFilter<"EP"> | string
    facultyId?: IntFilter<"EP"> | number
    faculty?: XOR<FacultyRelationFilter, FacultyWhereInput>
    groups?: GroupListRelationFilter
  }

  export type EPOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    facultyId?: SortOrder
    faculty?: FacultyOrderByWithRelationInput
    groups?: GroupOrderByRelationAggregateInput
  }

  export type EPWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: EPWhereInput | EPWhereInput[]
    OR?: EPWhereInput[]
    NOT?: EPWhereInput | EPWhereInput[]
    facultyId?: IntFilter<"EP"> | number
    faculty?: XOR<FacultyRelationFilter, FacultyWhereInput>
    groups?: GroupListRelationFilter
  }, "id" | "name">

  export type EPOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    facultyId?: SortOrder
    _count?: EPCountOrderByAggregateInput
    _avg?: EPAvgOrderByAggregateInput
    _max?: EPMaxOrderByAggregateInput
    _min?: EPMinOrderByAggregateInput
    _sum?: EPSumOrderByAggregateInput
  }

  export type EPScalarWhereWithAggregatesInput = {
    AND?: EPScalarWhereWithAggregatesInput | EPScalarWhereWithAggregatesInput[]
    OR?: EPScalarWhereWithAggregatesInput[]
    NOT?: EPScalarWhereWithAggregatesInput | EPScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EP"> | number
    name?: StringWithAggregatesFilter<"EP"> | string
    facultyId?: IntWithAggregatesFilter<"EP"> | number
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: IntFilter<"Schedule"> | number
    groupId?: IntFilter<"Schedule"> | number
    group?: XOR<GroupRelationFilter, GroupWhereInput>
    weeks?: WeekListRelationFilter
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    groupId?: SortOrder
    group?: GroupOrderByWithRelationInput
    weeks?: WeekOrderByRelationAggregateInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    groupId?: number
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    group?: XOR<GroupRelationFilter, GroupWhereInput>
    weeks?: WeekListRelationFilter
  }, "id" | "groupId">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    groupId?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _avg?: ScheduleAvgOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
    _sum?: ScheduleSumOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Schedule"> | number
    groupId?: IntWithAggregatesFilter<"Schedule"> | number
  }

  export type WeekWhereInput = {
    AND?: WeekWhereInput | WeekWhereInput[]
    OR?: WeekWhereInput[]
    NOT?: WeekWhereInput | WeekWhereInput[]
    id?: IntFilter<"Week"> | number
    scheduleId?: IntFilter<"Week"> | number
    number?: IntFilter<"Week"> | number
    schedule?: XOR<ScheduleRelationFilter, ScheduleWhereInput>
    days?: DayListRelationFilter
    attendanceSnapshots?: AttendanceSnapshotListRelationFilter
  }

  export type WeekOrderByWithRelationInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    number?: SortOrder
    schedule?: ScheduleOrderByWithRelationInput
    days?: DayOrderByRelationAggregateInput
    attendanceSnapshots?: AttendanceSnapshotOrderByRelationAggregateInput
  }

  export type WeekWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WeekWhereInput | WeekWhereInput[]
    OR?: WeekWhereInput[]
    NOT?: WeekWhereInput | WeekWhereInput[]
    scheduleId?: IntFilter<"Week"> | number
    number?: IntFilter<"Week"> | number
    schedule?: XOR<ScheduleRelationFilter, ScheduleWhereInput>
    days?: DayListRelationFilter
    attendanceSnapshots?: AttendanceSnapshotListRelationFilter
  }, "id">

  export type WeekOrderByWithAggregationInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    number?: SortOrder
    _count?: WeekCountOrderByAggregateInput
    _avg?: WeekAvgOrderByAggregateInput
    _max?: WeekMaxOrderByAggregateInput
    _min?: WeekMinOrderByAggregateInput
    _sum?: WeekSumOrderByAggregateInput
  }

  export type WeekScalarWhereWithAggregatesInput = {
    AND?: WeekScalarWhereWithAggregatesInput | WeekScalarWhereWithAggregatesInput[]
    OR?: WeekScalarWhereWithAggregatesInput[]
    NOT?: WeekScalarWhereWithAggregatesInput | WeekScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Week"> | number
    scheduleId?: IntWithAggregatesFilter<"Week"> | number
    number?: IntWithAggregatesFilter<"Week"> | number
  }

  export type DayWhereInput = {
    AND?: DayWhereInput | DayWhereInput[]
    OR?: DayWhereInput[]
    NOT?: DayWhereInput | DayWhereInput[]
    id?: IntFilter<"Day"> | number
    name?: EnumWeekDaysFilter<"Day"> | $Enums.WeekDays
    weekId?: IntFilter<"Day"> | number
    week?: XOR<WeekRelationFilter, WeekWhereInput>
    subjects?: DaySubjectListRelationFilter
  }

  export type DayOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    weekId?: SortOrder
    week?: WeekOrderByWithRelationInput
    subjects?: DaySubjectOrderByRelationAggregateInput
  }

  export type DayWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DayWhereInput | DayWhereInput[]
    OR?: DayWhereInput[]
    NOT?: DayWhereInput | DayWhereInput[]
    name?: EnumWeekDaysFilter<"Day"> | $Enums.WeekDays
    weekId?: IntFilter<"Day"> | number
    week?: XOR<WeekRelationFilter, WeekWhereInput>
    subjects?: DaySubjectListRelationFilter
  }, "id">

  export type DayOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    weekId?: SortOrder
    _count?: DayCountOrderByAggregateInput
    _avg?: DayAvgOrderByAggregateInput
    _max?: DayMaxOrderByAggregateInput
    _min?: DayMinOrderByAggregateInput
    _sum?: DaySumOrderByAggregateInput
  }

  export type DayScalarWhereWithAggregatesInput = {
    AND?: DayScalarWhereWithAggregatesInput | DayScalarWhereWithAggregatesInput[]
    OR?: DayScalarWhereWithAggregatesInput[]
    NOT?: DayScalarWhereWithAggregatesInput | DayScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Day"> | number
    name?: EnumWeekDaysWithAggregatesFilter<"Day"> | $Enums.WeekDays
    weekId?: IntWithAggregatesFilter<"Day"> | number
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: IntFilter<"Subject"> | number
    name?: StringFilter<"Subject"> | string
    days?: DaySubjectListRelationFilter
    attendanceSnapshots?: AttendanceSnapshotListRelationFilter
    teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    days?: DaySubjectOrderByRelationAggregateInput
    attendanceSnapshots?: AttendanceSnapshotOrderByRelationAggregateInput
    teacher?: TeacherOrderByWithRelationInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    name?: StringFilter<"Subject"> | string
    days?: DaySubjectListRelationFilter
    attendanceSnapshots?: AttendanceSnapshotListRelationFilter
    teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
  }, "id">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subject"> | number
    name?: StringWithAggregatesFilter<"Subject"> | string
  }

  export type DaySubjectWhereInput = {
    AND?: DaySubjectWhereInput | DaySubjectWhereInput[]
    OR?: DaySubjectWhereInput[]
    NOT?: DaySubjectWhereInput | DaySubjectWhereInput[]
    id?: IntFilter<"DaySubject"> | number
    dayId?: IntFilter<"DaySubject"> | number
    subjectId?: IntFilter<"DaySubject"> | number
    startTime?: StringFilter<"DaySubject"> | string
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    day?: XOR<DayRelationFilter, DayWhereInput>
  }

  export type DaySubjectOrderByWithRelationInput = {
    id?: SortOrder
    dayId?: SortOrder
    subjectId?: SortOrder
    startTime?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    day?: DayOrderByWithRelationInput
  }

  export type DaySubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DaySubjectWhereInput | DaySubjectWhereInput[]
    OR?: DaySubjectWhereInput[]
    NOT?: DaySubjectWhereInput | DaySubjectWhereInput[]
    dayId?: IntFilter<"DaySubject"> | number
    subjectId?: IntFilter<"DaySubject"> | number
    startTime?: StringFilter<"DaySubject"> | string
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    day?: XOR<DayRelationFilter, DayWhereInput>
  }, "id">

  export type DaySubjectOrderByWithAggregationInput = {
    id?: SortOrder
    dayId?: SortOrder
    subjectId?: SortOrder
    startTime?: SortOrder
    _count?: DaySubjectCountOrderByAggregateInput
    _avg?: DaySubjectAvgOrderByAggregateInput
    _max?: DaySubjectMaxOrderByAggregateInput
    _min?: DaySubjectMinOrderByAggregateInput
    _sum?: DaySubjectSumOrderByAggregateInput
  }

  export type DaySubjectScalarWhereWithAggregatesInput = {
    AND?: DaySubjectScalarWhereWithAggregatesInput | DaySubjectScalarWhereWithAggregatesInput[]
    OR?: DaySubjectScalarWhereWithAggregatesInput[]
    NOT?: DaySubjectScalarWhereWithAggregatesInput | DaySubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DaySubject"> | number
    dayId?: IntWithAggregatesFilter<"DaySubject"> | number
    subjectId?: IntWithAggregatesFilter<"DaySubject"> | number
    startTime?: StringWithAggregatesFilter<"DaySubject"> | string
  }

  export type GroupWhereInput = {
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    id?: IntFilter<"Group"> | number
    name?: StringFilter<"Group"> | string
    EPId?: IntFilter<"Group"> | number
    teacherId?: IntNullableFilter<"Group"> | number | null
    users?: StudentListRelationFilter
    schedule?: XOR<ScheduleNullableRelationFilter, ScheduleWhereInput> | null
    ep?: XOR<EPRelationFilter, EPWhereInput>
    teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    EPId?: SortOrder
    teacherId?: SortOrderInput | SortOrder
    users?: StudentOrderByRelationAggregateInput
    schedule?: ScheduleOrderByWithRelationInput
    ep?: EPOrderByWithRelationInput
    teacher?: TeacherOrderByWithRelationInput
  }

  export type GroupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    EPId?: IntFilter<"Group"> | number
    teacherId?: IntNullableFilter<"Group"> | number | null
    users?: StudentListRelationFilter
    schedule?: XOR<ScheduleNullableRelationFilter, ScheduleWhereInput> | null
    ep?: XOR<EPRelationFilter, EPWhereInput>
    teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
  }, "id" | "name">

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    EPId?: SortOrder
    teacherId?: SortOrderInput | SortOrder
    _count?: GroupCountOrderByAggregateInput
    _avg?: GroupAvgOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
    _sum?: GroupSumOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    OR?: GroupScalarWhereWithAggregatesInput[]
    NOT?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Group"> | number
    name?: StringWithAggregatesFilter<"Group"> | string
    EPId?: IntWithAggregatesFilter<"Group"> | number
    teacherId?: IntNullableWithAggregatesFilter<"Group"> | number | null
  }

  export type AttendanceSnapshotWhereInput = {
    AND?: AttendanceSnapshotWhereInput | AttendanceSnapshotWhereInput[]
    OR?: AttendanceSnapshotWhereInput[]
    NOT?: AttendanceSnapshotWhereInput | AttendanceSnapshotWhereInput[]
    id?: IntFilter<"AttendanceSnapshot"> | number
    day?: EnumWeekDaysFilter<"AttendanceSnapshot"> | $Enums.WeekDays
    time?: StringFilter<"AttendanceSnapshot"> | string
    weekId?: IntFilter<"AttendanceSnapshot"> | number
    subjectId?: IntFilter<"AttendanceSnapshot"> | number
    userId?: IntFilter<"AttendanceSnapshot"> | number
    createdAt?: DateTimeFilter<"AttendanceSnapshot"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceSnapshot"> | Date | string
    week?: XOR<WeekRelationFilter, WeekWhereInput>
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    user?: XOR<StudentRelationFilter, StudentWhereInput>
  }

  export type AttendanceSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    day?: SortOrder
    time?: SortOrder
    weekId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    week?: WeekOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    user?: StudentOrderByWithRelationInput
  }

  export type AttendanceSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AttendanceSnapshotWhereInput | AttendanceSnapshotWhereInput[]
    OR?: AttendanceSnapshotWhereInput[]
    NOT?: AttendanceSnapshotWhereInput | AttendanceSnapshotWhereInput[]
    day?: EnumWeekDaysFilter<"AttendanceSnapshot"> | $Enums.WeekDays
    time?: StringFilter<"AttendanceSnapshot"> | string
    weekId?: IntFilter<"AttendanceSnapshot"> | number
    subjectId?: IntFilter<"AttendanceSnapshot"> | number
    userId?: IntFilter<"AttendanceSnapshot"> | number
    createdAt?: DateTimeFilter<"AttendanceSnapshot"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceSnapshot"> | Date | string
    week?: XOR<WeekRelationFilter, WeekWhereInput>
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    user?: XOR<StudentRelationFilter, StudentWhereInput>
  }, "id">

  export type AttendanceSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    day?: SortOrder
    time?: SortOrder
    weekId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AttendanceSnapshotCountOrderByAggregateInput
    _avg?: AttendanceSnapshotAvgOrderByAggregateInput
    _max?: AttendanceSnapshotMaxOrderByAggregateInput
    _min?: AttendanceSnapshotMinOrderByAggregateInput
    _sum?: AttendanceSnapshotSumOrderByAggregateInput
  }

  export type AttendanceSnapshotScalarWhereWithAggregatesInput = {
    AND?: AttendanceSnapshotScalarWhereWithAggregatesInput | AttendanceSnapshotScalarWhereWithAggregatesInput[]
    OR?: AttendanceSnapshotScalarWhereWithAggregatesInput[]
    NOT?: AttendanceSnapshotScalarWhereWithAggregatesInput | AttendanceSnapshotScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AttendanceSnapshot"> | number
    day?: EnumWeekDaysWithAggregatesFilter<"AttendanceSnapshot"> | $Enums.WeekDays
    time?: StringWithAggregatesFilter<"AttendanceSnapshot"> | string
    weekId?: IntWithAggregatesFilter<"AttendanceSnapshot"> | number
    subjectId?: IntWithAggregatesFilter<"AttendanceSnapshot"> | number
    userId?: IntWithAggregatesFilter<"AttendanceSnapshot"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AttendanceSnapshot"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AttendanceSnapshot"> | Date | string
  }

  export type MedicalCertificateCreateInput = {
    path: string
    status?: $Enums.Status
    originalName: string
    description: string
    startDate?: Date | string
    endDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutMedicalCertificateInput
  }

  export type MedicalCertificateUncheckedCreateInput = {
    id?: number
    path: string
    status?: $Enums.Status
    originalName: string
    description: string
    startDate?: Date | string
    endDate?: Date | string
    studentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalCertificateUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    originalName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutMedicalCertificateNestedInput
  }

  export type MedicalCertificateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    originalName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalCertificateCreateManyInput = {
    id?: number
    path: string
    status?: $Enums.Status
    originalName: string
    description: string
    startDate?: Date | string
    endDate?: Date | string
    studentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalCertificateUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    originalName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalCertificateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    originalName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateInput = {
    account: AccountCreateNestedOneWithoutUserInput
    group?: GroupCreateNestedOneWithoutUsersInput
    MedicalCertificate?: MedicalCertificateCreateNestedManyWithoutStudentInput
    AttendanceSnapshot?: AttendanceSnapshotCreateNestedManyWithoutUserInput
  }

  export type StudentUncheckedCreateInput = {
    id?: number
    accountId: number
    groupId?: number | null
    MedicalCertificate?: MedicalCertificateUncheckedCreateNestedManyWithoutStudentInput
    AttendanceSnapshot?: AttendanceSnapshotUncheckedCreateNestedManyWithoutUserInput
  }

  export type StudentUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutUserNestedInput
    group?: GroupUpdateOneWithoutUsersNestedInput
    MedicalCertificate?: MedicalCertificateUpdateManyWithoutStudentNestedInput
    AttendanceSnapshot?: AttendanceSnapshotUpdateManyWithoutUserNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    MedicalCertificate?: MedicalCertificateUncheckedUpdateManyWithoutStudentNestedInput
    AttendanceSnapshot?: AttendanceSnapshotUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StudentCreateManyInput = {
    id?: number
    accountId: number
    groupId?: number | null
  }

  export type StudentUpdateManyMutationInput = {

  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AdminCreateInput = {
    account: AccountCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    accountId: number
  }

  export type AdminUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateManyInput = {
    id?: number
    accountId: number
  }

  export type AdminUpdateManyMutationInput = {

  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherCreateInput = {
    account: AccountCreateNestedOneWithoutTeacherInput
    subject?: SubjectCreateNestedOneWithoutTeacherInput
    groups?: GroupCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    id?: number
    accountId: number
    subjectId?: number | null
    groups?: GroupUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutTeacherNestedInput
    subject?: SubjectUpdateOneWithoutTeacherNestedInput
    groups?: GroupUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    subjectId?: NullableIntFieldUpdateOperationsInput | number | null
    groups?: GroupUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherCreateManyInput = {
    id?: number
    accountId: number
    subjectId?: number | null
  }

  export type TeacherUpdateManyMutationInput = {

  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    subjectId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountCreateInput = {
    email: string
    password: string
    name?: string | null
    surname?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string
    updatedAt?: Date | string
    User?: StudentCreateNestedOneWithoutAccountInput
    Admin?: AdminCreateNestedOneWithoutAccountInput
    Teacher?: TeacherCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    surname?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string
    updatedAt?: Date | string
    User?: StudentUncheckedCreateNestedOneWithoutAccountInput
    Admin?: AdminUncheckedCreateNestedOneWithoutAccountInput
    Teacher?: TeacherUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: StudentUpdateOneWithoutAccountNestedInput
    Admin?: AdminUpdateOneWithoutAccountNestedInput
    Teacher?: TeacherUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: StudentUncheckedUpdateOneWithoutAccountNestedInput
    Admin?: AdminUncheckedUpdateOneWithoutAccountNestedInput
    Teacher?: TeacherUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    surname?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacultyCreateInput = {
    name: string
    EPs?: EPCreateNestedManyWithoutFacultyInput
  }

  export type FacultyUncheckedCreateInput = {
    id?: number
    name: string
    EPs?: EPUncheckedCreateNestedManyWithoutFacultyInput
  }

  export type FacultyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    EPs?: EPUpdateManyWithoutFacultyNestedInput
  }

  export type FacultyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EPs?: EPUncheckedUpdateManyWithoutFacultyNestedInput
  }

  export type FacultyCreateManyInput = {
    id?: number
    name: string
  }

  export type FacultyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FacultyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EPCreateInput = {
    name: string
    faculty: FacultyCreateNestedOneWithoutEPsInput
    groups?: GroupCreateNestedManyWithoutEpInput
  }

  export type EPUncheckedCreateInput = {
    id?: number
    name: string
    facultyId: number
    groups?: GroupUncheckedCreateNestedManyWithoutEpInput
  }

  export type EPUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    faculty?: FacultyUpdateOneRequiredWithoutEPsNestedInput
    groups?: GroupUpdateManyWithoutEpNestedInput
  }

  export type EPUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    facultyId?: IntFieldUpdateOperationsInput | number
    groups?: GroupUncheckedUpdateManyWithoutEpNestedInput
  }

  export type EPCreateManyInput = {
    id?: number
    name: string
    facultyId: number
  }

  export type EPUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EPUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    facultyId?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleCreateInput = {
    group: GroupCreateNestedOneWithoutScheduleInput
    weeks?: WeekCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: number
    groupId: number
    weeks?: WeekUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUpdateInput = {
    group?: GroupUpdateOneRequiredWithoutScheduleNestedInput
    weeks?: WeekUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
    weeks?: WeekUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleCreateManyInput = {
    id?: number
    groupId: number
  }

  export type ScheduleUpdateManyMutationInput = {

  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type WeekCreateInput = {
    number: number
    schedule: ScheduleCreateNestedOneWithoutWeeksInput
    days?: DayCreateNestedManyWithoutWeekInput
    attendanceSnapshots?: AttendanceSnapshotCreateNestedManyWithoutWeekInput
  }

  export type WeekUncheckedCreateInput = {
    id?: number
    scheduleId: number
    number: number
    days?: DayUncheckedCreateNestedManyWithoutWeekInput
    attendanceSnapshots?: AttendanceSnapshotUncheckedCreateNestedManyWithoutWeekInput
  }

  export type WeekUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    schedule?: ScheduleUpdateOneRequiredWithoutWeeksNestedInput
    days?: DayUpdateManyWithoutWeekNestedInput
    attendanceSnapshots?: AttendanceSnapshotUpdateManyWithoutWeekNestedInput
  }

  export type WeekUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleId?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    days?: DayUncheckedUpdateManyWithoutWeekNestedInput
    attendanceSnapshots?: AttendanceSnapshotUncheckedUpdateManyWithoutWeekNestedInput
  }

  export type WeekCreateManyInput = {
    id?: number
    scheduleId: number
    number: number
  }

  export type WeekUpdateManyMutationInput = {
    number?: IntFieldUpdateOperationsInput | number
  }

  export type WeekUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleId?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
  }

  export type DayCreateInput = {
    name: $Enums.WeekDays
    week: WeekCreateNestedOneWithoutDaysInput
    subjects?: DaySubjectCreateNestedManyWithoutDayInput
  }

  export type DayUncheckedCreateInput = {
    id?: number
    name: $Enums.WeekDays
    weekId: number
    subjects?: DaySubjectUncheckedCreateNestedManyWithoutDayInput
  }

  export type DayUpdateInput = {
    name?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    week?: WeekUpdateOneRequiredWithoutDaysNestedInput
    subjects?: DaySubjectUpdateManyWithoutDayNestedInput
  }

  export type DayUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    weekId?: IntFieldUpdateOperationsInput | number
    subjects?: DaySubjectUncheckedUpdateManyWithoutDayNestedInput
  }

  export type DayCreateManyInput = {
    id?: number
    name: $Enums.WeekDays
    weekId: number
  }

  export type DayUpdateManyMutationInput = {
    name?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
  }

  export type DayUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    weekId?: IntFieldUpdateOperationsInput | number
  }

  export type SubjectCreateInput = {
    name: string
    days?: DaySubjectCreateNestedManyWithoutSubjectInput
    attendanceSnapshots?: AttendanceSnapshotCreateNestedManyWithoutSubjectInput
    teacher?: TeacherCreateNestedOneWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: number
    name: string
    days?: DaySubjectUncheckedCreateNestedManyWithoutSubjectInput
    attendanceSnapshots?: AttendanceSnapshotUncheckedCreateNestedManyWithoutSubjectInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    days?: DaySubjectUpdateManyWithoutSubjectNestedInput
    attendanceSnapshots?: AttendanceSnapshotUpdateManyWithoutSubjectNestedInput
    teacher?: TeacherUpdateOneWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    days?: DaySubjectUncheckedUpdateManyWithoutSubjectNestedInput
    attendanceSnapshots?: AttendanceSnapshotUncheckedUpdateManyWithoutSubjectNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: number
    name: string
  }

  export type SubjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DaySubjectCreateInput = {
    startTime: string
    subject: SubjectCreateNestedOneWithoutDaysInput
    day: DayCreateNestedOneWithoutSubjectsInput
  }

  export type DaySubjectUncheckedCreateInput = {
    id?: number
    dayId: number
    subjectId: number
    startTime: string
  }

  export type DaySubjectUpdateInput = {
    startTime?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutDaysNestedInput
    day?: DayUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type DaySubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
  }

  export type DaySubjectCreateManyInput = {
    id?: number
    dayId: number
    subjectId: number
    startTime: string
  }

  export type DaySubjectUpdateManyMutationInput = {
    startTime?: StringFieldUpdateOperationsInput | string
  }

  export type DaySubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
  }

  export type GroupCreateInput = {
    name: string
    users?: StudentCreateNestedManyWithoutGroupInput
    schedule?: ScheduleCreateNestedOneWithoutGroupInput
    ep: EPCreateNestedOneWithoutGroupsInput
    teacher?: TeacherCreateNestedOneWithoutGroupsInput
  }

  export type GroupUncheckedCreateInput = {
    id?: number
    name: string
    EPId: number
    teacherId?: number | null
    users?: StudentUncheckedCreateNestedManyWithoutGroupInput
    schedule?: ScheduleUncheckedCreateNestedOneWithoutGroupInput
  }

  export type GroupUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: StudentUpdateManyWithoutGroupNestedInput
    schedule?: ScheduleUpdateOneWithoutGroupNestedInput
    ep?: EPUpdateOneRequiredWithoutGroupsNestedInput
    teacher?: TeacherUpdateOneWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EPId?: IntFieldUpdateOperationsInput | number
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    users?: StudentUncheckedUpdateManyWithoutGroupNestedInput
    schedule?: ScheduleUncheckedUpdateOneWithoutGroupNestedInput
  }

  export type GroupCreateManyInput = {
    id?: number
    name: string
    EPId: number
    teacherId?: number | null
  }

  export type GroupUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EPId?: IntFieldUpdateOperationsInput | number
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendanceSnapshotCreateInput = {
    day: $Enums.WeekDays
    time: string
    createdAt?: Date | string
    updatedAt?: Date | string
    week: WeekCreateNestedOneWithoutAttendanceSnapshotsInput
    subject: SubjectCreateNestedOneWithoutAttendanceSnapshotsInput
    user: StudentCreateNestedOneWithoutAttendanceSnapshotInput
  }

  export type AttendanceSnapshotUncheckedCreateInput = {
    id?: number
    day: $Enums.WeekDays
    time: string
    weekId: number
    subjectId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceSnapshotUpdateInput = {
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    week?: WeekUpdateOneRequiredWithoutAttendanceSnapshotsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutAttendanceSnapshotsNestedInput
    user?: StudentUpdateOneRequiredWithoutAttendanceSnapshotNestedInput
  }

  export type AttendanceSnapshotUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    weekId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceSnapshotCreateManyInput = {
    id?: number
    day: $Enums.WeekDays
    time: string
    weekId: number
    subjectId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceSnapshotUpdateManyMutationInput = {
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceSnapshotUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    weekId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StudentRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type MedicalCertificateCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    status?: SortOrder
    originalName?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalCertificateAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
  }

  export type MedicalCertificateMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    status?: SortOrder
    originalName?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalCertificateMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    status?: SortOrder
    originalName?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalCertificateSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AccountRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type GroupNullableRelationFilter = {
    is?: GroupWhereInput | null
    isNot?: GroupWhereInput | null
  }

  export type MedicalCertificateListRelationFilter = {
    every?: MedicalCertificateWhereInput
    some?: MedicalCertificateWhereInput
    none?: MedicalCertificateWhereInput
  }

  export type AttendanceSnapshotListRelationFilter = {
    every?: AttendanceSnapshotWhereInput
    some?: AttendanceSnapshotWhereInput
    none?: AttendanceSnapshotWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MedicalCertificateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceSnapshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    groupId?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    groupId?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    groupId?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    groupId?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    groupId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
  }

  export type SubjectNullableRelationFilter = {
    is?: SubjectWhereInput | null
    isNot?: SubjectWhereInput | null
  }

  export type GroupListRelationFilter = {
    every?: GroupWhereInput
    some?: GroupWhereInput
    none?: GroupWhereInput
  }

  export type GroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    subjectId?: SortOrder
  }

  export type TeacherAvgOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    subjectId?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    subjectId?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    subjectId?: SortOrder
  }

  export type TeacherSumOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    subjectId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumROLEFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    notIn?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    not?: NestedEnumROLEFilter<$PrismaModel> | $Enums.ROLE
  }

  export type StudentNullableRelationFilter = {
    is?: StudentWhereInput | null
    isNot?: StudentWhereInput | null
  }

  export type AdminNullableRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type TeacherNullableRelationFilter = {
    is?: TeacherWhereInput | null
    isNot?: TeacherWhereInput | null
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumROLEWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    notIn?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    not?: NestedEnumROLEWithAggregatesFilter<$PrismaModel> | $Enums.ROLE
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumROLEFilter<$PrismaModel>
    _max?: NestedEnumROLEFilter<$PrismaModel>
  }

  export type EPListRelationFilter = {
    every?: EPWhereInput
    some?: EPWhereInput
    none?: EPWhereInput
  }

  export type EPOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacultyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FacultyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacultyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FacultyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FacultySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacultyRelationFilter = {
    is?: FacultyWhereInput
    isNot?: FacultyWhereInput
  }

  export type EPCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    facultyId?: SortOrder
  }

  export type EPAvgOrderByAggregateInput = {
    id?: SortOrder
    facultyId?: SortOrder
  }

  export type EPMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    facultyId?: SortOrder
  }

  export type EPMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    facultyId?: SortOrder
  }

  export type EPSumOrderByAggregateInput = {
    id?: SortOrder
    facultyId?: SortOrder
  }

  export type GroupRelationFilter = {
    is?: GroupWhereInput
    isNot?: GroupWhereInput
  }

  export type WeekListRelationFilter = {
    every?: WeekWhereInput
    some?: WeekWhereInput
    none?: WeekWhereInput
  }

  export type WeekOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
  }

  export type ScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
  }

  export type ScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
  }

  export type ScheduleRelationFilter = {
    is?: ScheduleWhereInput
    isNot?: ScheduleWhereInput
  }

  export type DayListRelationFilter = {
    every?: DayWhereInput
    some?: DayWhereInput
    none?: DayWhereInput
  }

  export type DayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeekCountOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    number?: SortOrder
  }

  export type WeekAvgOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    number?: SortOrder
  }

  export type WeekMaxOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    number?: SortOrder
  }

  export type WeekMinOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    number?: SortOrder
  }

  export type WeekSumOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    number?: SortOrder
  }

  export type EnumWeekDaysFilter<$PrismaModel = never> = {
    equals?: $Enums.WeekDays | EnumWeekDaysFieldRefInput<$PrismaModel>
    in?: $Enums.WeekDays[] | ListEnumWeekDaysFieldRefInput<$PrismaModel>
    notIn?: $Enums.WeekDays[] | ListEnumWeekDaysFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekDaysFilter<$PrismaModel> | $Enums.WeekDays
  }

  export type WeekRelationFilter = {
    is?: WeekWhereInput
    isNot?: WeekWhereInput
  }

  export type DaySubjectListRelationFilter = {
    every?: DaySubjectWhereInput
    some?: DaySubjectWhereInput
    none?: DaySubjectWhereInput
  }

  export type DaySubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DayCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    weekId?: SortOrder
  }

  export type DayAvgOrderByAggregateInput = {
    id?: SortOrder
    weekId?: SortOrder
  }

  export type DayMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    weekId?: SortOrder
  }

  export type DayMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    weekId?: SortOrder
  }

  export type DaySumOrderByAggregateInput = {
    id?: SortOrder
    weekId?: SortOrder
  }

  export type EnumWeekDaysWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WeekDays | EnumWeekDaysFieldRefInput<$PrismaModel>
    in?: $Enums.WeekDays[] | ListEnumWeekDaysFieldRefInput<$PrismaModel>
    notIn?: $Enums.WeekDays[] | ListEnumWeekDaysFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekDaysWithAggregatesFilter<$PrismaModel> | $Enums.WeekDays
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWeekDaysFilter<$PrismaModel>
    _max?: NestedEnumWeekDaysFilter<$PrismaModel>
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubjectRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type DayRelationFilter = {
    is?: DayWhereInput
    isNot?: DayWhereInput
  }

  export type DaySubjectCountOrderByAggregateInput = {
    id?: SortOrder
    dayId?: SortOrder
    subjectId?: SortOrder
    startTime?: SortOrder
  }

  export type DaySubjectAvgOrderByAggregateInput = {
    id?: SortOrder
    dayId?: SortOrder
    subjectId?: SortOrder
  }

  export type DaySubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    dayId?: SortOrder
    subjectId?: SortOrder
    startTime?: SortOrder
  }

  export type DaySubjectMinOrderByAggregateInput = {
    id?: SortOrder
    dayId?: SortOrder
    subjectId?: SortOrder
    startTime?: SortOrder
  }

  export type DaySubjectSumOrderByAggregateInput = {
    id?: SortOrder
    dayId?: SortOrder
    subjectId?: SortOrder
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type ScheduleNullableRelationFilter = {
    is?: ScheduleWhereInput | null
    isNot?: ScheduleWhereInput | null
  }

  export type EPRelationFilter = {
    is?: EPWhereInput
    isNot?: EPWhereInput
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    EPId?: SortOrder
    teacherId?: SortOrder
  }

  export type GroupAvgOrderByAggregateInput = {
    id?: SortOrder
    EPId?: SortOrder
    teacherId?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    EPId?: SortOrder
    teacherId?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    EPId?: SortOrder
    teacherId?: SortOrder
  }

  export type GroupSumOrderByAggregateInput = {
    id?: SortOrder
    EPId?: SortOrder
    teacherId?: SortOrder
  }

  export type AttendanceSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    time?: SortOrder
    weekId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceSnapshotAvgOrderByAggregateInput = {
    id?: SortOrder
    weekId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
  }

  export type AttendanceSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    time?: SortOrder
    weekId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    time?: SortOrder
    weekId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceSnapshotSumOrderByAggregateInput = {
    id?: SortOrder
    weekId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
  }

  export type StudentCreateNestedOneWithoutMedicalCertificateInput = {
    create?: XOR<StudentCreateWithoutMedicalCertificateInput, StudentUncheckedCreateWithoutMedicalCertificateInput>
    connectOrCreate?: StudentCreateOrConnectWithoutMedicalCertificateInput
    connect?: StudentWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StudentUpdateOneRequiredWithoutMedicalCertificateNestedInput = {
    create?: XOR<StudentCreateWithoutMedicalCertificateInput, StudentUncheckedCreateWithoutMedicalCertificateInput>
    connectOrCreate?: StudentCreateOrConnectWithoutMedicalCertificateInput
    upsert?: StudentUpsertWithoutMedicalCertificateInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutMedicalCertificateInput, StudentUpdateWithoutMedicalCertificateInput>, StudentUncheckedUpdateWithoutMedicalCertificateInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountCreateNestedOneWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput
    connect?: AccountWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutUsersInput = {
    create?: XOR<GroupCreateWithoutUsersInput, GroupUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GroupCreateOrConnectWithoutUsersInput
    connect?: GroupWhereUniqueInput
  }

  export type MedicalCertificateCreateNestedManyWithoutStudentInput = {
    create?: XOR<MedicalCertificateCreateWithoutStudentInput, MedicalCertificateUncheckedCreateWithoutStudentInput> | MedicalCertificateCreateWithoutStudentInput[] | MedicalCertificateUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: MedicalCertificateCreateOrConnectWithoutStudentInput | MedicalCertificateCreateOrConnectWithoutStudentInput[]
    createMany?: MedicalCertificateCreateManyStudentInputEnvelope
    connect?: MedicalCertificateWhereUniqueInput | MedicalCertificateWhereUniqueInput[]
  }

  export type AttendanceSnapshotCreateNestedManyWithoutUserInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutUserInput, AttendanceSnapshotUncheckedCreateWithoutUserInput> | AttendanceSnapshotCreateWithoutUserInput[] | AttendanceSnapshotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutUserInput | AttendanceSnapshotCreateOrConnectWithoutUserInput[]
    createMany?: AttendanceSnapshotCreateManyUserInputEnvelope
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
  }

  export type MedicalCertificateUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<MedicalCertificateCreateWithoutStudentInput, MedicalCertificateUncheckedCreateWithoutStudentInput> | MedicalCertificateCreateWithoutStudentInput[] | MedicalCertificateUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: MedicalCertificateCreateOrConnectWithoutStudentInput | MedicalCertificateCreateOrConnectWithoutStudentInput[]
    createMany?: MedicalCertificateCreateManyStudentInputEnvelope
    connect?: MedicalCertificateWhereUniqueInput | MedicalCertificateWhereUniqueInput[]
  }

  export type AttendanceSnapshotUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutUserInput, AttendanceSnapshotUncheckedCreateWithoutUserInput> | AttendanceSnapshotCreateWithoutUserInput[] | AttendanceSnapshotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutUserInput | AttendanceSnapshotCreateOrConnectWithoutUserInput[]
    createMany?: AttendanceSnapshotCreateManyUserInputEnvelope
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
  }

  export type AccountUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput
    upsert?: AccountUpsertWithoutUserInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutUserInput, AccountUpdateWithoutUserInput>, AccountUncheckedUpdateWithoutUserInput>
  }

  export type GroupUpdateOneWithoutUsersNestedInput = {
    create?: XOR<GroupCreateWithoutUsersInput, GroupUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GroupCreateOrConnectWithoutUsersInput
    upsert?: GroupUpsertWithoutUsersInput
    disconnect?: GroupWhereInput | boolean
    delete?: GroupWhereInput | boolean
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutUsersInput, GroupUpdateWithoutUsersInput>, GroupUncheckedUpdateWithoutUsersInput>
  }

  export type MedicalCertificateUpdateManyWithoutStudentNestedInput = {
    create?: XOR<MedicalCertificateCreateWithoutStudentInput, MedicalCertificateUncheckedCreateWithoutStudentInput> | MedicalCertificateCreateWithoutStudentInput[] | MedicalCertificateUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: MedicalCertificateCreateOrConnectWithoutStudentInput | MedicalCertificateCreateOrConnectWithoutStudentInput[]
    upsert?: MedicalCertificateUpsertWithWhereUniqueWithoutStudentInput | MedicalCertificateUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: MedicalCertificateCreateManyStudentInputEnvelope
    set?: MedicalCertificateWhereUniqueInput | MedicalCertificateWhereUniqueInput[]
    disconnect?: MedicalCertificateWhereUniqueInput | MedicalCertificateWhereUniqueInput[]
    delete?: MedicalCertificateWhereUniqueInput | MedicalCertificateWhereUniqueInput[]
    connect?: MedicalCertificateWhereUniqueInput | MedicalCertificateWhereUniqueInput[]
    update?: MedicalCertificateUpdateWithWhereUniqueWithoutStudentInput | MedicalCertificateUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: MedicalCertificateUpdateManyWithWhereWithoutStudentInput | MedicalCertificateUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: MedicalCertificateScalarWhereInput | MedicalCertificateScalarWhereInput[]
  }

  export type AttendanceSnapshotUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutUserInput, AttendanceSnapshotUncheckedCreateWithoutUserInput> | AttendanceSnapshotCreateWithoutUserInput[] | AttendanceSnapshotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutUserInput | AttendanceSnapshotCreateOrConnectWithoutUserInput[]
    upsert?: AttendanceSnapshotUpsertWithWhereUniqueWithoutUserInput | AttendanceSnapshotUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttendanceSnapshotCreateManyUserInputEnvelope
    set?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    disconnect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    delete?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    update?: AttendanceSnapshotUpdateWithWhereUniqueWithoutUserInput | AttendanceSnapshotUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttendanceSnapshotUpdateManyWithWhereWithoutUserInput | AttendanceSnapshotUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttendanceSnapshotScalarWhereInput | AttendanceSnapshotScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MedicalCertificateUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<MedicalCertificateCreateWithoutStudentInput, MedicalCertificateUncheckedCreateWithoutStudentInput> | MedicalCertificateCreateWithoutStudentInput[] | MedicalCertificateUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: MedicalCertificateCreateOrConnectWithoutStudentInput | MedicalCertificateCreateOrConnectWithoutStudentInput[]
    upsert?: MedicalCertificateUpsertWithWhereUniqueWithoutStudentInput | MedicalCertificateUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: MedicalCertificateCreateManyStudentInputEnvelope
    set?: MedicalCertificateWhereUniqueInput | MedicalCertificateWhereUniqueInput[]
    disconnect?: MedicalCertificateWhereUniqueInput | MedicalCertificateWhereUniqueInput[]
    delete?: MedicalCertificateWhereUniqueInput | MedicalCertificateWhereUniqueInput[]
    connect?: MedicalCertificateWhereUniqueInput | MedicalCertificateWhereUniqueInput[]
    update?: MedicalCertificateUpdateWithWhereUniqueWithoutStudentInput | MedicalCertificateUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: MedicalCertificateUpdateManyWithWhereWithoutStudentInput | MedicalCertificateUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: MedicalCertificateScalarWhereInput | MedicalCertificateScalarWhereInput[]
  }

  export type AttendanceSnapshotUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutUserInput, AttendanceSnapshotUncheckedCreateWithoutUserInput> | AttendanceSnapshotCreateWithoutUserInput[] | AttendanceSnapshotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutUserInput | AttendanceSnapshotCreateOrConnectWithoutUserInput[]
    upsert?: AttendanceSnapshotUpsertWithWhereUniqueWithoutUserInput | AttendanceSnapshotUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttendanceSnapshotCreateManyUserInputEnvelope
    set?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    disconnect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    delete?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    update?: AttendanceSnapshotUpdateWithWhereUniqueWithoutUserInput | AttendanceSnapshotUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttendanceSnapshotUpdateManyWithWhereWithoutUserInput | AttendanceSnapshotUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttendanceSnapshotScalarWhereInput | AttendanceSnapshotScalarWhereInput[]
  }

  export type AccountCreateNestedOneWithoutAdminInput = {
    create?: XOR<AccountCreateWithoutAdminInput, AccountUncheckedCreateWithoutAdminInput>
    connectOrCreate?: AccountCreateOrConnectWithoutAdminInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<AccountCreateWithoutAdminInput, AccountUncheckedCreateWithoutAdminInput>
    connectOrCreate?: AccountCreateOrConnectWithoutAdminInput
    upsert?: AccountUpsertWithoutAdminInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutAdminInput, AccountUpdateWithoutAdminInput>, AccountUncheckedUpdateWithoutAdminInput>
  }

  export type AccountCreateNestedOneWithoutTeacherInput = {
    create?: XOR<AccountCreateWithoutTeacherInput, AccountUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: AccountCreateOrConnectWithoutTeacherInput
    connect?: AccountWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutTeacherInput = {
    create?: XOR<SubjectCreateWithoutTeacherInput, SubjectUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTeacherInput
    connect?: SubjectWhereUniqueInput
  }

  export type GroupCreateNestedManyWithoutTeacherInput = {
    create?: XOR<GroupCreateWithoutTeacherInput, GroupUncheckedCreateWithoutTeacherInput> | GroupCreateWithoutTeacherInput[] | GroupUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutTeacherInput | GroupCreateOrConnectWithoutTeacherInput[]
    createMany?: GroupCreateManyTeacherInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type GroupUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<GroupCreateWithoutTeacherInput, GroupUncheckedCreateWithoutTeacherInput> | GroupCreateWithoutTeacherInput[] | GroupUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutTeacherInput | GroupCreateOrConnectWithoutTeacherInput[]
    createMany?: GroupCreateManyTeacherInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type AccountUpdateOneRequiredWithoutTeacherNestedInput = {
    create?: XOR<AccountCreateWithoutTeacherInput, AccountUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: AccountCreateOrConnectWithoutTeacherInput
    upsert?: AccountUpsertWithoutTeacherInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutTeacherInput, AccountUpdateWithoutTeacherInput>, AccountUncheckedUpdateWithoutTeacherInput>
  }

  export type SubjectUpdateOneWithoutTeacherNestedInput = {
    create?: XOR<SubjectCreateWithoutTeacherInput, SubjectUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTeacherInput
    upsert?: SubjectUpsertWithoutTeacherInput
    disconnect?: SubjectWhereInput | boolean
    delete?: SubjectWhereInput | boolean
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutTeacherInput, SubjectUpdateWithoutTeacherInput>, SubjectUncheckedUpdateWithoutTeacherInput>
  }

  export type GroupUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<GroupCreateWithoutTeacherInput, GroupUncheckedCreateWithoutTeacherInput> | GroupCreateWithoutTeacherInput[] | GroupUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutTeacherInput | GroupCreateOrConnectWithoutTeacherInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutTeacherInput | GroupUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: GroupCreateManyTeacherInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutTeacherInput | GroupUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutTeacherInput | GroupUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type GroupUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<GroupCreateWithoutTeacherInput, GroupUncheckedCreateWithoutTeacherInput> | GroupCreateWithoutTeacherInput[] | GroupUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutTeacherInput | GroupCreateOrConnectWithoutTeacherInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutTeacherInput | GroupUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: GroupCreateManyTeacherInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutTeacherInput | GroupUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutTeacherInput | GroupUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutAccountInput = {
    create?: XOR<StudentCreateWithoutAccountInput, StudentUncheckedCreateWithoutAccountInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAccountInput
    connect?: StudentWhereUniqueInput
  }

  export type AdminCreateNestedOneWithoutAccountInput = {
    create?: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAccountInput
    connect?: AdminWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutAccountInput = {
    create?: XOR<TeacherCreateWithoutAccountInput, TeacherUncheckedCreateWithoutAccountInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutAccountInput
    connect?: TeacherWhereUniqueInput
  }

  export type StudentUncheckedCreateNestedOneWithoutAccountInput = {
    create?: XOR<StudentCreateWithoutAccountInput, StudentUncheckedCreateWithoutAccountInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAccountInput
    connect?: StudentWhereUniqueInput
  }

  export type AdminUncheckedCreateNestedOneWithoutAccountInput = {
    create?: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAccountInput
    connect?: AdminWhereUniqueInput
  }

  export type TeacherUncheckedCreateNestedOneWithoutAccountInput = {
    create?: XOR<TeacherCreateWithoutAccountInput, TeacherUncheckedCreateWithoutAccountInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutAccountInput
    connect?: TeacherWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumROLEFieldUpdateOperationsInput = {
    set?: $Enums.ROLE
  }

  export type StudentUpdateOneWithoutAccountNestedInput = {
    create?: XOR<StudentCreateWithoutAccountInput, StudentUncheckedCreateWithoutAccountInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAccountInput
    upsert?: StudentUpsertWithoutAccountInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAccountInput, StudentUpdateWithoutAccountInput>, StudentUncheckedUpdateWithoutAccountInput>
  }

  export type AdminUpdateOneWithoutAccountNestedInput = {
    create?: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAccountInput
    upsert?: AdminUpsertWithoutAccountInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutAccountInput, AdminUpdateWithoutAccountInput>, AdminUncheckedUpdateWithoutAccountInput>
  }

  export type TeacherUpdateOneWithoutAccountNestedInput = {
    create?: XOR<TeacherCreateWithoutAccountInput, TeacherUncheckedCreateWithoutAccountInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutAccountInput
    upsert?: TeacherUpsertWithoutAccountInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutAccountInput, TeacherUpdateWithoutAccountInput>, TeacherUncheckedUpdateWithoutAccountInput>
  }

  export type StudentUncheckedUpdateOneWithoutAccountNestedInput = {
    create?: XOR<StudentCreateWithoutAccountInput, StudentUncheckedCreateWithoutAccountInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAccountInput
    upsert?: StudentUpsertWithoutAccountInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAccountInput, StudentUpdateWithoutAccountInput>, StudentUncheckedUpdateWithoutAccountInput>
  }

  export type AdminUncheckedUpdateOneWithoutAccountNestedInput = {
    create?: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAccountInput
    upsert?: AdminUpsertWithoutAccountInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutAccountInput, AdminUpdateWithoutAccountInput>, AdminUncheckedUpdateWithoutAccountInput>
  }

  export type TeacherUncheckedUpdateOneWithoutAccountNestedInput = {
    create?: XOR<TeacherCreateWithoutAccountInput, TeacherUncheckedCreateWithoutAccountInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutAccountInput
    upsert?: TeacherUpsertWithoutAccountInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutAccountInput, TeacherUpdateWithoutAccountInput>, TeacherUncheckedUpdateWithoutAccountInput>
  }

  export type EPCreateNestedManyWithoutFacultyInput = {
    create?: XOR<EPCreateWithoutFacultyInput, EPUncheckedCreateWithoutFacultyInput> | EPCreateWithoutFacultyInput[] | EPUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: EPCreateOrConnectWithoutFacultyInput | EPCreateOrConnectWithoutFacultyInput[]
    createMany?: EPCreateManyFacultyInputEnvelope
    connect?: EPWhereUniqueInput | EPWhereUniqueInput[]
  }

  export type EPUncheckedCreateNestedManyWithoutFacultyInput = {
    create?: XOR<EPCreateWithoutFacultyInput, EPUncheckedCreateWithoutFacultyInput> | EPCreateWithoutFacultyInput[] | EPUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: EPCreateOrConnectWithoutFacultyInput | EPCreateOrConnectWithoutFacultyInput[]
    createMany?: EPCreateManyFacultyInputEnvelope
    connect?: EPWhereUniqueInput | EPWhereUniqueInput[]
  }

  export type EPUpdateManyWithoutFacultyNestedInput = {
    create?: XOR<EPCreateWithoutFacultyInput, EPUncheckedCreateWithoutFacultyInput> | EPCreateWithoutFacultyInput[] | EPUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: EPCreateOrConnectWithoutFacultyInput | EPCreateOrConnectWithoutFacultyInput[]
    upsert?: EPUpsertWithWhereUniqueWithoutFacultyInput | EPUpsertWithWhereUniqueWithoutFacultyInput[]
    createMany?: EPCreateManyFacultyInputEnvelope
    set?: EPWhereUniqueInput | EPWhereUniqueInput[]
    disconnect?: EPWhereUniqueInput | EPWhereUniqueInput[]
    delete?: EPWhereUniqueInput | EPWhereUniqueInput[]
    connect?: EPWhereUniqueInput | EPWhereUniqueInput[]
    update?: EPUpdateWithWhereUniqueWithoutFacultyInput | EPUpdateWithWhereUniqueWithoutFacultyInput[]
    updateMany?: EPUpdateManyWithWhereWithoutFacultyInput | EPUpdateManyWithWhereWithoutFacultyInput[]
    deleteMany?: EPScalarWhereInput | EPScalarWhereInput[]
  }

  export type EPUncheckedUpdateManyWithoutFacultyNestedInput = {
    create?: XOR<EPCreateWithoutFacultyInput, EPUncheckedCreateWithoutFacultyInput> | EPCreateWithoutFacultyInput[] | EPUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: EPCreateOrConnectWithoutFacultyInput | EPCreateOrConnectWithoutFacultyInput[]
    upsert?: EPUpsertWithWhereUniqueWithoutFacultyInput | EPUpsertWithWhereUniqueWithoutFacultyInput[]
    createMany?: EPCreateManyFacultyInputEnvelope
    set?: EPWhereUniqueInput | EPWhereUniqueInput[]
    disconnect?: EPWhereUniqueInput | EPWhereUniqueInput[]
    delete?: EPWhereUniqueInput | EPWhereUniqueInput[]
    connect?: EPWhereUniqueInput | EPWhereUniqueInput[]
    update?: EPUpdateWithWhereUniqueWithoutFacultyInput | EPUpdateWithWhereUniqueWithoutFacultyInput[]
    updateMany?: EPUpdateManyWithWhereWithoutFacultyInput | EPUpdateManyWithWhereWithoutFacultyInput[]
    deleteMany?: EPScalarWhereInput | EPScalarWhereInput[]
  }

  export type FacultyCreateNestedOneWithoutEPsInput = {
    create?: XOR<FacultyCreateWithoutEPsInput, FacultyUncheckedCreateWithoutEPsInput>
    connectOrCreate?: FacultyCreateOrConnectWithoutEPsInput
    connect?: FacultyWhereUniqueInput
  }

  export type GroupCreateNestedManyWithoutEpInput = {
    create?: XOR<GroupCreateWithoutEpInput, GroupUncheckedCreateWithoutEpInput> | GroupCreateWithoutEpInput[] | GroupUncheckedCreateWithoutEpInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutEpInput | GroupCreateOrConnectWithoutEpInput[]
    createMany?: GroupCreateManyEpInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type GroupUncheckedCreateNestedManyWithoutEpInput = {
    create?: XOR<GroupCreateWithoutEpInput, GroupUncheckedCreateWithoutEpInput> | GroupCreateWithoutEpInput[] | GroupUncheckedCreateWithoutEpInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutEpInput | GroupCreateOrConnectWithoutEpInput[]
    createMany?: GroupCreateManyEpInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type FacultyUpdateOneRequiredWithoutEPsNestedInput = {
    create?: XOR<FacultyCreateWithoutEPsInput, FacultyUncheckedCreateWithoutEPsInput>
    connectOrCreate?: FacultyCreateOrConnectWithoutEPsInput
    upsert?: FacultyUpsertWithoutEPsInput
    connect?: FacultyWhereUniqueInput
    update?: XOR<XOR<FacultyUpdateToOneWithWhereWithoutEPsInput, FacultyUpdateWithoutEPsInput>, FacultyUncheckedUpdateWithoutEPsInput>
  }

  export type GroupUpdateManyWithoutEpNestedInput = {
    create?: XOR<GroupCreateWithoutEpInput, GroupUncheckedCreateWithoutEpInput> | GroupCreateWithoutEpInput[] | GroupUncheckedCreateWithoutEpInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutEpInput | GroupCreateOrConnectWithoutEpInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutEpInput | GroupUpsertWithWhereUniqueWithoutEpInput[]
    createMany?: GroupCreateManyEpInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutEpInput | GroupUpdateWithWhereUniqueWithoutEpInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutEpInput | GroupUpdateManyWithWhereWithoutEpInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type GroupUncheckedUpdateManyWithoutEpNestedInput = {
    create?: XOR<GroupCreateWithoutEpInput, GroupUncheckedCreateWithoutEpInput> | GroupCreateWithoutEpInput[] | GroupUncheckedCreateWithoutEpInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutEpInput | GroupCreateOrConnectWithoutEpInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutEpInput | GroupUpsertWithWhereUniqueWithoutEpInput[]
    createMany?: GroupCreateManyEpInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutEpInput | GroupUpdateWithWhereUniqueWithoutEpInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutEpInput | GroupUpdateManyWithWhereWithoutEpInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type GroupCreateNestedOneWithoutScheduleInput = {
    create?: XOR<GroupCreateWithoutScheduleInput, GroupUncheckedCreateWithoutScheduleInput>
    connectOrCreate?: GroupCreateOrConnectWithoutScheduleInput
    connect?: GroupWhereUniqueInput
  }

  export type WeekCreateNestedManyWithoutScheduleInput = {
    create?: XOR<WeekCreateWithoutScheduleInput, WeekUncheckedCreateWithoutScheduleInput> | WeekCreateWithoutScheduleInput[] | WeekUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: WeekCreateOrConnectWithoutScheduleInput | WeekCreateOrConnectWithoutScheduleInput[]
    createMany?: WeekCreateManyScheduleInputEnvelope
    connect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
  }

  export type WeekUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<WeekCreateWithoutScheduleInput, WeekUncheckedCreateWithoutScheduleInput> | WeekCreateWithoutScheduleInput[] | WeekUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: WeekCreateOrConnectWithoutScheduleInput | WeekCreateOrConnectWithoutScheduleInput[]
    createMany?: WeekCreateManyScheduleInputEnvelope
    connect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
  }

  export type GroupUpdateOneRequiredWithoutScheduleNestedInput = {
    create?: XOR<GroupCreateWithoutScheduleInput, GroupUncheckedCreateWithoutScheduleInput>
    connectOrCreate?: GroupCreateOrConnectWithoutScheduleInput
    upsert?: GroupUpsertWithoutScheduleInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutScheduleInput, GroupUpdateWithoutScheduleInput>, GroupUncheckedUpdateWithoutScheduleInput>
  }

  export type WeekUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<WeekCreateWithoutScheduleInput, WeekUncheckedCreateWithoutScheduleInput> | WeekCreateWithoutScheduleInput[] | WeekUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: WeekCreateOrConnectWithoutScheduleInput | WeekCreateOrConnectWithoutScheduleInput[]
    upsert?: WeekUpsertWithWhereUniqueWithoutScheduleInput | WeekUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: WeekCreateManyScheduleInputEnvelope
    set?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    disconnect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    delete?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    connect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    update?: WeekUpdateWithWhereUniqueWithoutScheduleInput | WeekUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: WeekUpdateManyWithWhereWithoutScheduleInput | WeekUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: WeekScalarWhereInput | WeekScalarWhereInput[]
  }

  export type WeekUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<WeekCreateWithoutScheduleInput, WeekUncheckedCreateWithoutScheduleInput> | WeekCreateWithoutScheduleInput[] | WeekUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: WeekCreateOrConnectWithoutScheduleInput | WeekCreateOrConnectWithoutScheduleInput[]
    upsert?: WeekUpsertWithWhereUniqueWithoutScheduleInput | WeekUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: WeekCreateManyScheduleInputEnvelope
    set?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    disconnect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    delete?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    connect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    update?: WeekUpdateWithWhereUniqueWithoutScheduleInput | WeekUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: WeekUpdateManyWithWhereWithoutScheduleInput | WeekUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: WeekScalarWhereInput | WeekScalarWhereInput[]
  }

  export type ScheduleCreateNestedOneWithoutWeeksInput = {
    create?: XOR<ScheduleCreateWithoutWeeksInput, ScheduleUncheckedCreateWithoutWeeksInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutWeeksInput
    connect?: ScheduleWhereUniqueInput
  }

  export type DayCreateNestedManyWithoutWeekInput = {
    create?: XOR<DayCreateWithoutWeekInput, DayUncheckedCreateWithoutWeekInput> | DayCreateWithoutWeekInput[] | DayUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: DayCreateOrConnectWithoutWeekInput | DayCreateOrConnectWithoutWeekInput[]
    createMany?: DayCreateManyWeekInputEnvelope
    connect?: DayWhereUniqueInput | DayWhereUniqueInput[]
  }

  export type AttendanceSnapshotCreateNestedManyWithoutWeekInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutWeekInput, AttendanceSnapshotUncheckedCreateWithoutWeekInput> | AttendanceSnapshotCreateWithoutWeekInput[] | AttendanceSnapshotUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutWeekInput | AttendanceSnapshotCreateOrConnectWithoutWeekInput[]
    createMany?: AttendanceSnapshotCreateManyWeekInputEnvelope
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
  }

  export type DayUncheckedCreateNestedManyWithoutWeekInput = {
    create?: XOR<DayCreateWithoutWeekInput, DayUncheckedCreateWithoutWeekInput> | DayCreateWithoutWeekInput[] | DayUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: DayCreateOrConnectWithoutWeekInput | DayCreateOrConnectWithoutWeekInput[]
    createMany?: DayCreateManyWeekInputEnvelope
    connect?: DayWhereUniqueInput | DayWhereUniqueInput[]
  }

  export type AttendanceSnapshotUncheckedCreateNestedManyWithoutWeekInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutWeekInput, AttendanceSnapshotUncheckedCreateWithoutWeekInput> | AttendanceSnapshotCreateWithoutWeekInput[] | AttendanceSnapshotUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutWeekInput | AttendanceSnapshotCreateOrConnectWithoutWeekInput[]
    createMany?: AttendanceSnapshotCreateManyWeekInputEnvelope
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
  }

  export type ScheduleUpdateOneRequiredWithoutWeeksNestedInput = {
    create?: XOR<ScheduleCreateWithoutWeeksInput, ScheduleUncheckedCreateWithoutWeeksInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutWeeksInput
    upsert?: ScheduleUpsertWithoutWeeksInput
    connect?: ScheduleWhereUniqueInput
    update?: XOR<XOR<ScheduleUpdateToOneWithWhereWithoutWeeksInput, ScheduleUpdateWithoutWeeksInput>, ScheduleUncheckedUpdateWithoutWeeksInput>
  }

  export type DayUpdateManyWithoutWeekNestedInput = {
    create?: XOR<DayCreateWithoutWeekInput, DayUncheckedCreateWithoutWeekInput> | DayCreateWithoutWeekInput[] | DayUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: DayCreateOrConnectWithoutWeekInput | DayCreateOrConnectWithoutWeekInput[]
    upsert?: DayUpsertWithWhereUniqueWithoutWeekInput | DayUpsertWithWhereUniqueWithoutWeekInput[]
    createMany?: DayCreateManyWeekInputEnvelope
    set?: DayWhereUniqueInput | DayWhereUniqueInput[]
    disconnect?: DayWhereUniqueInput | DayWhereUniqueInput[]
    delete?: DayWhereUniqueInput | DayWhereUniqueInput[]
    connect?: DayWhereUniqueInput | DayWhereUniqueInput[]
    update?: DayUpdateWithWhereUniqueWithoutWeekInput | DayUpdateWithWhereUniqueWithoutWeekInput[]
    updateMany?: DayUpdateManyWithWhereWithoutWeekInput | DayUpdateManyWithWhereWithoutWeekInput[]
    deleteMany?: DayScalarWhereInput | DayScalarWhereInput[]
  }

  export type AttendanceSnapshotUpdateManyWithoutWeekNestedInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutWeekInput, AttendanceSnapshotUncheckedCreateWithoutWeekInput> | AttendanceSnapshotCreateWithoutWeekInput[] | AttendanceSnapshotUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutWeekInput | AttendanceSnapshotCreateOrConnectWithoutWeekInput[]
    upsert?: AttendanceSnapshotUpsertWithWhereUniqueWithoutWeekInput | AttendanceSnapshotUpsertWithWhereUniqueWithoutWeekInput[]
    createMany?: AttendanceSnapshotCreateManyWeekInputEnvelope
    set?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    disconnect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    delete?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    update?: AttendanceSnapshotUpdateWithWhereUniqueWithoutWeekInput | AttendanceSnapshotUpdateWithWhereUniqueWithoutWeekInput[]
    updateMany?: AttendanceSnapshotUpdateManyWithWhereWithoutWeekInput | AttendanceSnapshotUpdateManyWithWhereWithoutWeekInput[]
    deleteMany?: AttendanceSnapshotScalarWhereInput | AttendanceSnapshotScalarWhereInput[]
  }

  export type DayUncheckedUpdateManyWithoutWeekNestedInput = {
    create?: XOR<DayCreateWithoutWeekInput, DayUncheckedCreateWithoutWeekInput> | DayCreateWithoutWeekInput[] | DayUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: DayCreateOrConnectWithoutWeekInput | DayCreateOrConnectWithoutWeekInput[]
    upsert?: DayUpsertWithWhereUniqueWithoutWeekInput | DayUpsertWithWhereUniqueWithoutWeekInput[]
    createMany?: DayCreateManyWeekInputEnvelope
    set?: DayWhereUniqueInput | DayWhereUniqueInput[]
    disconnect?: DayWhereUniqueInput | DayWhereUniqueInput[]
    delete?: DayWhereUniqueInput | DayWhereUniqueInput[]
    connect?: DayWhereUniqueInput | DayWhereUniqueInput[]
    update?: DayUpdateWithWhereUniqueWithoutWeekInput | DayUpdateWithWhereUniqueWithoutWeekInput[]
    updateMany?: DayUpdateManyWithWhereWithoutWeekInput | DayUpdateManyWithWhereWithoutWeekInput[]
    deleteMany?: DayScalarWhereInput | DayScalarWhereInput[]
  }

  export type AttendanceSnapshotUncheckedUpdateManyWithoutWeekNestedInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutWeekInput, AttendanceSnapshotUncheckedCreateWithoutWeekInput> | AttendanceSnapshotCreateWithoutWeekInput[] | AttendanceSnapshotUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutWeekInput | AttendanceSnapshotCreateOrConnectWithoutWeekInput[]
    upsert?: AttendanceSnapshotUpsertWithWhereUniqueWithoutWeekInput | AttendanceSnapshotUpsertWithWhereUniqueWithoutWeekInput[]
    createMany?: AttendanceSnapshotCreateManyWeekInputEnvelope
    set?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    disconnect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    delete?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    update?: AttendanceSnapshotUpdateWithWhereUniqueWithoutWeekInput | AttendanceSnapshotUpdateWithWhereUniqueWithoutWeekInput[]
    updateMany?: AttendanceSnapshotUpdateManyWithWhereWithoutWeekInput | AttendanceSnapshotUpdateManyWithWhereWithoutWeekInput[]
    deleteMany?: AttendanceSnapshotScalarWhereInput | AttendanceSnapshotScalarWhereInput[]
  }

  export type WeekCreateNestedOneWithoutDaysInput = {
    create?: XOR<WeekCreateWithoutDaysInput, WeekUncheckedCreateWithoutDaysInput>
    connectOrCreate?: WeekCreateOrConnectWithoutDaysInput
    connect?: WeekWhereUniqueInput
  }

  export type DaySubjectCreateNestedManyWithoutDayInput = {
    create?: XOR<DaySubjectCreateWithoutDayInput, DaySubjectUncheckedCreateWithoutDayInput> | DaySubjectCreateWithoutDayInput[] | DaySubjectUncheckedCreateWithoutDayInput[]
    connectOrCreate?: DaySubjectCreateOrConnectWithoutDayInput | DaySubjectCreateOrConnectWithoutDayInput[]
    createMany?: DaySubjectCreateManyDayInputEnvelope
    connect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
  }

  export type DaySubjectUncheckedCreateNestedManyWithoutDayInput = {
    create?: XOR<DaySubjectCreateWithoutDayInput, DaySubjectUncheckedCreateWithoutDayInput> | DaySubjectCreateWithoutDayInput[] | DaySubjectUncheckedCreateWithoutDayInput[]
    connectOrCreate?: DaySubjectCreateOrConnectWithoutDayInput | DaySubjectCreateOrConnectWithoutDayInput[]
    createMany?: DaySubjectCreateManyDayInputEnvelope
    connect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
  }

  export type EnumWeekDaysFieldUpdateOperationsInput = {
    set?: $Enums.WeekDays
  }

  export type WeekUpdateOneRequiredWithoutDaysNestedInput = {
    create?: XOR<WeekCreateWithoutDaysInput, WeekUncheckedCreateWithoutDaysInput>
    connectOrCreate?: WeekCreateOrConnectWithoutDaysInput
    upsert?: WeekUpsertWithoutDaysInput
    connect?: WeekWhereUniqueInput
    update?: XOR<XOR<WeekUpdateToOneWithWhereWithoutDaysInput, WeekUpdateWithoutDaysInput>, WeekUncheckedUpdateWithoutDaysInput>
  }

  export type DaySubjectUpdateManyWithoutDayNestedInput = {
    create?: XOR<DaySubjectCreateWithoutDayInput, DaySubjectUncheckedCreateWithoutDayInput> | DaySubjectCreateWithoutDayInput[] | DaySubjectUncheckedCreateWithoutDayInput[]
    connectOrCreate?: DaySubjectCreateOrConnectWithoutDayInput | DaySubjectCreateOrConnectWithoutDayInput[]
    upsert?: DaySubjectUpsertWithWhereUniqueWithoutDayInput | DaySubjectUpsertWithWhereUniqueWithoutDayInput[]
    createMany?: DaySubjectCreateManyDayInputEnvelope
    set?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    disconnect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    delete?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    connect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    update?: DaySubjectUpdateWithWhereUniqueWithoutDayInput | DaySubjectUpdateWithWhereUniqueWithoutDayInput[]
    updateMany?: DaySubjectUpdateManyWithWhereWithoutDayInput | DaySubjectUpdateManyWithWhereWithoutDayInput[]
    deleteMany?: DaySubjectScalarWhereInput | DaySubjectScalarWhereInput[]
  }

  export type DaySubjectUncheckedUpdateManyWithoutDayNestedInput = {
    create?: XOR<DaySubjectCreateWithoutDayInput, DaySubjectUncheckedCreateWithoutDayInput> | DaySubjectCreateWithoutDayInput[] | DaySubjectUncheckedCreateWithoutDayInput[]
    connectOrCreate?: DaySubjectCreateOrConnectWithoutDayInput | DaySubjectCreateOrConnectWithoutDayInput[]
    upsert?: DaySubjectUpsertWithWhereUniqueWithoutDayInput | DaySubjectUpsertWithWhereUniqueWithoutDayInput[]
    createMany?: DaySubjectCreateManyDayInputEnvelope
    set?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    disconnect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    delete?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    connect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    update?: DaySubjectUpdateWithWhereUniqueWithoutDayInput | DaySubjectUpdateWithWhereUniqueWithoutDayInput[]
    updateMany?: DaySubjectUpdateManyWithWhereWithoutDayInput | DaySubjectUpdateManyWithWhereWithoutDayInput[]
    deleteMany?: DaySubjectScalarWhereInput | DaySubjectScalarWhereInput[]
  }

  export type DaySubjectCreateNestedManyWithoutSubjectInput = {
    create?: XOR<DaySubjectCreateWithoutSubjectInput, DaySubjectUncheckedCreateWithoutSubjectInput> | DaySubjectCreateWithoutSubjectInput[] | DaySubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: DaySubjectCreateOrConnectWithoutSubjectInput | DaySubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: DaySubjectCreateManySubjectInputEnvelope
    connect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
  }

  export type AttendanceSnapshotCreateNestedManyWithoutSubjectInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutSubjectInput, AttendanceSnapshotUncheckedCreateWithoutSubjectInput> | AttendanceSnapshotCreateWithoutSubjectInput[] | AttendanceSnapshotUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutSubjectInput | AttendanceSnapshotCreateOrConnectWithoutSubjectInput[]
    createMany?: AttendanceSnapshotCreateManySubjectInputEnvelope
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
  }

  export type TeacherCreateNestedOneWithoutSubjectInput = {
    create?: XOR<TeacherCreateWithoutSubjectInput, TeacherUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutSubjectInput
    connect?: TeacherWhereUniqueInput
  }

  export type DaySubjectUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<DaySubjectCreateWithoutSubjectInput, DaySubjectUncheckedCreateWithoutSubjectInput> | DaySubjectCreateWithoutSubjectInput[] | DaySubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: DaySubjectCreateOrConnectWithoutSubjectInput | DaySubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: DaySubjectCreateManySubjectInputEnvelope
    connect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
  }

  export type AttendanceSnapshotUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutSubjectInput, AttendanceSnapshotUncheckedCreateWithoutSubjectInput> | AttendanceSnapshotCreateWithoutSubjectInput[] | AttendanceSnapshotUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutSubjectInput | AttendanceSnapshotCreateOrConnectWithoutSubjectInput[]
    createMany?: AttendanceSnapshotCreateManySubjectInputEnvelope
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedOneWithoutSubjectInput = {
    create?: XOR<TeacherCreateWithoutSubjectInput, TeacherUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutSubjectInput
    connect?: TeacherWhereUniqueInput
  }

  export type DaySubjectUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<DaySubjectCreateWithoutSubjectInput, DaySubjectUncheckedCreateWithoutSubjectInput> | DaySubjectCreateWithoutSubjectInput[] | DaySubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: DaySubjectCreateOrConnectWithoutSubjectInput | DaySubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: DaySubjectUpsertWithWhereUniqueWithoutSubjectInput | DaySubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: DaySubjectCreateManySubjectInputEnvelope
    set?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    disconnect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    delete?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    connect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    update?: DaySubjectUpdateWithWhereUniqueWithoutSubjectInput | DaySubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: DaySubjectUpdateManyWithWhereWithoutSubjectInput | DaySubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: DaySubjectScalarWhereInput | DaySubjectScalarWhereInput[]
  }

  export type AttendanceSnapshotUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutSubjectInput, AttendanceSnapshotUncheckedCreateWithoutSubjectInput> | AttendanceSnapshotCreateWithoutSubjectInput[] | AttendanceSnapshotUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutSubjectInput | AttendanceSnapshotCreateOrConnectWithoutSubjectInput[]
    upsert?: AttendanceSnapshotUpsertWithWhereUniqueWithoutSubjectInput | AttendanceSnapshotUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: AttendanceSnapshotCreateManySubjectInputEnvelope
    set?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    disconnect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    delete?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    update?: AttendanceSnapshotUpdateWithWhereUniqueWithoutSubjectInput | AttendanceSnapshotUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: AttendanceSnapshotUpdateManyWithWhereWithoutSubjectInput | AttendanceSnapshotUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: AttendanceSnapshotScalarWhereInput | AttendanceSnapshotScalarWhereInput[]
  }

  export type TeacherUpdateOneWithoutSubjectNestedInput = {
    create?: XOR<TeacherCreateWithoutSubjectInput, TeacherUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutSubjectInput
    upsert?: TeacherUpsertWithoutSubjectInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutSubjectInput, TeacherUpdateWithoutSubjectInput>, TeacherUncheckedUpdateWithoutSubjectInput>
  }

  export type DaySubjectUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<DaySubjectCreateWithoutSubjectInput, DaySubjectUncheckedCreateWithoutSubjectInput> | DaySubjectCreateWithoutSubjectInput[] | DaySubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: DaySubjectCreateOrConnectWithoutSubjectInput | DaySubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: DaySubjectUpsertWithWhereUniqueWithoutSubjectInput | DaySubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: DaySubjectCreateManySubjectInputEnvelope
    set?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    disconnect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    delete?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    connect?: DaySubjectWhereUniqueInput | DaySubjectWhereUniqueInput[]
    update?: DaySubjectUpdateWithWhereUniqueWithoutSubjectInput | DaySubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: DaySubjectUpdateManyWithWhereWithoutSubjectInput | DaySubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: DaySubjectScalarWhereInput | DaySubjectScalarWhereInput[]
  }

  export type AttendanceSnapshotUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<AttendanceSnapshotCreateWithoutSubjectInput, AttendanceSnapshotUncheckedCreateWithoutSubjectInput> | AttendanceSnapshotCreateWithoutSubjectInput[] | AttendanceSnapshotUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AttendanceSnapshotCreateOrConnectWithoutSubjectInput | AttendanceSnapshotCreateOrConnectWithoutSubjectInput[]
    upsert?: AttendanceSnapshotUpsertWithWhereUniqueWithoutSubjectInput | AttendanceSnapshotUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: AttendanceSnapshotCreateManySubjectInputEnvelope
    set?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    disconnect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    delete?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    connect?: AttendanceSnapshotWhereUniqueInput | AttendanceSnapshotWhereUniqueInput[]
    update?: AttendanceSnapshotUpdateWithWhereUniqueWithoutSubjectInput | AttendanceSnapshotUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: AttendanceSnapshotUpdateManyWithWhereWithoutSubjectInput | AttendanceSnapshotUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: AttendanceSnapshotScalarWhereInput | AttendanceSnapshotScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateOneWithoutSubjectNestedInput = {
    create?: XOR<TeacherCreateWithoutSubjectInput, TeacherUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutSubjectInput
    upsert?: TeacherUpsertWithoutSubjectInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutSubjectInput, TeacherUpdateWithoutSubjectInput>, TeacherUncheckedUpdateWithoutSubjectInput>
  }

  export type SubjectCreateNestedOneWithoutDaysInput = {
    create?: XOR<SubjectCreateWithoutDaysInput, SubjectUncheckedCreateWithoutDaysInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutDaysInput
    connect?: SubjectWhereUniqueInput
  }

  export type DayCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<DayCreateWithoutSubjectsInput, DayUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: DayCreateOrConnectWithoutSubjectsInput
    connect?: DayWhereUniqueInput
  }

  export type SubjectUpdateOneRequiredWithoutDaysNestedInput = {
    create?: XOR<SubjectCreateWithoutDaysInput, SubjectUncheckedCreateWithoutDaysInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutDaysInput
    upsert?: SubjectUpsertWithoutDaysInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutDaysInput, SubjectUpdateWithoutDaysInput>, SubjectUncheckedUpdateWithoutDaysInput>
  }

  export type DayUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<DayCreateWithoutSubjectsInput, DayUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: DayCreateOrConnectWithoutSubjectsInput
    upsert?: DayUpsertWithoutSubjectsInput
    connect?: DayWhereUniqueInput
    update?: XOR<XOR<DayUpdateToOneWithWhereWithoutSubjectsInput, DayUpdateWithoutSubjectsInput>, DayUncheckedUpdateWithoutSubjectsInput>
  }

  export type StudentCreateNestedManyWithoutGroupInput = {
    create?: XOR<StudentCreateWithoutGroupInput, StudentUncheckedCreateWithoutGroupInput> | StudentCreateWithoutGroupInput[] | StudentUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutGroupInput | StudentCreateOrConnectWithoutGroupInput[]
    createMany?: StudentCreateManyGroupInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ScheduleCreateNestedOneWithoutGroupInput = {
    create?: XOR<ScheduleCreateWithoutGroupInput, ScheduleUncheckedCreateWithoutGroupInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutGroupInput
    connect?: ScheduleWhereUniqueInput
  }

  export type EPCreateNestedOneWithoutGroupsInput = {
    create?: XOR<EPCreateWithoutGroupsInput, EPUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: EPCreateOrConnectWithoutGroupsInput
    connect?: EPWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutGroupsInput = {
    create?: XOR<TeacherCreateWithoutGroupsInput, TeacherUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutGroupsInput
    connect?: TeacherWhereUniqueInput
  }

  export type StudentUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<StudentCreateWithoutGroupInput, StudentUncheckedCreateWithoutGroupInput> | StudentCreateWithoutGroupInput[] | StudentUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutGroupInput | StudentCreateOrConnectWithoutGroupInput[]
    createMany?: StudentCreateManyGroupInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedOneWithoutGroupInput = {
    create?: XOR<ScheduleCreateWithoutGroupInput, ScheduleUncheckedCreateWithoutGroupInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutGroupInput
    connect?: ScheduleWhereUniqueInput
  }

  export type StudentUpdateManyWithoutGroupNestedInput = {
    create?: XOR<StudentCreateWithoutGroupInput, StudentUncheckedCreateWithoutGroupInput> | StudentCreateWithoutGroupInput[] | StudentUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutGroupInput | StudentCreateOrConnectWithoutGroupInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutGroupInput | StudentUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: StudentCreateManyGroupInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutGroupInput | StudentUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutGroupInput | StudentUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ScheduleUpdateOneWithoutGroupNestedInput = {
    create?: XOR<ScheduleCreateWithoutGroupInput, ScheduleUncheckedCreateWithoutGroupInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutGroupInput
    upsert?: ScheduleUpsertWithoutGroupInput
    disconnect?: ScheduleWhereInput | boolean
    delete?: ScheduleWhereInput | boolean
    connect?: ScheduleWhereUniqueInput
    update?: XOR<XOR<ScheduleUpdateToOneWithWhereWithoutGroupInput, ScheduleUpdateWithoutGroupInput>, ScheduleUncheckedUpdateWithoutGroupInput>
  }

  export type EPUpdateOneRequiredWithoutGroupsNestedInput = {
    create?: XOR<EPCreateWithoutGroupsInput, EPUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: EPCreateOrConnectWithoutGroupsInput
    upsert?: EPUpsertWithoutGroupsInput
    connect?: EPWhereUniqueInput
    update?: XOR<XOR<EPUpdateToOneWithWhereWithoutGroupsInput, EPUpdateWithoutGroupsInput>, EPUncheckedUpdateWithoutGroupsInput>
  }

  export type TeacherUpdateOneWithoutGroupsNestedInput = {
    create?: XOR<TeacherCreateWithoutGroupsInput, TeacherUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutGroupsInput
    upsert?: TeacherUpsertWithoutGroupsInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutGroupsInput, TeacherUpdateWithoutGroupsInput>, TeacherUncheckedUpdateWithoutGroupsInput>
  }

  export type StudentUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<StudentCreateWithoutGroupInput, StudentUncheckedCreateWithoutGroupInput> | StudentCreateWithoutGroupInput[] | StudentUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutGroupInput | StudentCreateOrConnectWithoutGroupInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutGroupInput | StudentUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: StudentCreateManyGroupInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutGroupInput | StudentUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutGroupInput | StudentUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateOneWithoutGroupNestedInput = {
    create?: XOR<ScheduleCreateWithoutGroupInput, ScheduleUncheckedCreateWithoutGroupInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutGroupInput
    upsert?: ScheduleUpsertWithoutGroupInput
    disconnect?: ScheduleWhereInput | boolean
    delete?: ScheduleWhereInput | boolean
    connect?: ScheduleWhereUniqueInput
    update?: XOR<XOR<ScheduleUpdateToOneWithWhereWithoutGroupInput, ScheduleUpdateWithoutGroupInput>, ScheduleUncheckedUpdateWithoutGroupInput>
  }

  export type WeekCreateNestedOneWithoutAttendanceSnapshotsInput = {
    create?: XOR<WeekCreateWithoutAttendanceSnapshotsInput, WeekUncheckedCreateWithoutAttendanceSnapshotsInput>
    connectOrCreate?: WeekCreateOrConnectWithoutAttendanceSnapshotsInput
    connect?: WeekWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutAttendanceSnapshotsInput = {
    create?: XOR<SubjectCreateWithoutAttendanceSnapshotsInput, SubjectUncheckedCreateWithoutAttendanceSnapshotsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutAttendanceSnapshotsInput
    connect?: SubjectWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutAttendanceSnapshotInput = {
    create?: XOR<StudentCreateWithoutAttendanceSnapshotInput, StudentUncheckedCreateWithoutAttendanceSnapshotInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendanceSnapshotInput
    connect?: StudentWhereUniqueInput
  }

  export type WeekUpdateOneRequiredWithoutAttendanceSnapshotsNestedInput = {
    create?: XOR<WeekCreateWithoutAttendanceSnapshotsInput, WeekUncheckedCreateWithoutAttendanceSnapshotsInput>
    connectOrCreate?: WeekCreateOrConnectWithoutAttendanceSnapshotsInput
    upsert?: WeekUpsertWithoutAttendanceSnapshotsInput
    connect?: WeekWhereUniqueInput
    update?: XOR<XOR<WeekUpdateToOneWithWhereWithoutAttendanceSnapshotsInput, WeekUpdateWithoutAttendanceSnapshotsInput>, WeekUncheckedUpdateWithoutAttendanceSnapshotsInput>
  }

  export type SubjectUpdateOneRequiredWithoutAttendanceSnapshotsNestedInput = {
    create?: XOR<SubjectCreateWithoutAttendanceSnapshotsInput, SubjectUncheckedCreateWithoutAttendanceSnapshotsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutAttendanceSnapshotsInput
    upsert?: SubjectUpsertWithoutAttendanceSnapshotsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutAttendanceSnapshotsInput, SubjectUpdateWithoutAttendanceSnapshotsInput>, SubjectUncheckedUpdateWithoutAttendanceSnapshotsInput>
  }

  export type StudentUpdateOneRequiredWithoutAttendanceSnapshotNestedInput = {
    create?: XOR<StudentCreateWithoutAttendanceSnapshotInput, StudentUncheckedCreateWithoutAttendanceSnapshotInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendanceSnapshotInput
    upsert?: StudentUpsertWithoutAttendanceSnapshotInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAttendanceSnapshotInput, StudentUpdateWithoutAttendanceSnapshotInput>, StudentUncheckedUpdateWithoutAttendanceSnapshotInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumROLEFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    notIn?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    not?: NestedEnumROLEFilter<$PrismaModel> | $Enums.ROLE
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumROLEWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    notIn?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    not?: NestedEnumROLEWithAggregatesFilter<$PrismaModel> | $Enums.ROLE
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumROLEFilter<$PrismaModel>
    _max?: NestedEnumROLEFilter<$PrismaModel>
  }

  export type NestedEnumWeekDaysFilter<$PrismaModel = never> = {
    equals?: $Enums.WeekDays | EnumWeekDaysFieldRefInput<$PrismaModel>
    in?: $Enums.WeekDays[] | ListEnumWeekDaysFieldRefInput<$PrismaModel>
    notIn?: $Enums.WeekDays[] | ListEnumWeekDaysFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekDaysFilter<$PrismaModel> | $Enums.WeekDays
  }

  export type NestedEnumWeekDaysWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WeekDays | EnumWeekDaysFieldRefInput<$PrismaModel>
    in?: $Enums.WeekDays[] | ListEnumWeekDaysFieldRefInput<$PrismaModel>
    notIn?: $Enums.WeekDays[] | ListEnumWeekDaysFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekDaysWithAggregatesFilter<$PrismaModel> | $Enums.WeekDays
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWeekDaysFilter<$PrismaModel>
    _max?: NestedEnumWeekDaysFilter<$PrismaModel>
  }

  export type StudentCreateWithoutMedicalCertificateInput = {
    account: AccountCreateNestedOneWithoutUserInput
    group?: GroupCreateNestedOneWithoutUsersInput
    AttendanceSnapshot?: AttendanceSnapshotCreateNestedManyWithoutUserInput
  }

  export type StudentUncheckedCreateWithoutMedicalCertificateInput = {
    id?: number
    accountId: number
    groupId?: number | null
    AttendanceSnapshot?: AttendanceSnapshotUncheckedCreateNestedManyWithoutUserInput
  }

  export type StudentCreateOrConnectWithoutMedicalCertificateInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutMedicalCertificateInput, StudentUncheckedCreateWithoutMedicalCertificateInput>
  }

  export type StudentUpsertWithoutMedicalCertificateInput = {
    update: XOR<StudentUpdateWithoutMedicalCertificateInput, StudentUncheckedUpdateWithoutMedicalCertificateInput>
    create: XOR<StudentCreateWithoutMedicalCertificateInput, StudentUncheckedCreateWithoutMedicalCertificateInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutMedicalCertificateInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutMedicalCertificateInput, StudentUncheckedUpdateWithoutMedicalCertificateInput>
  }

  export type StudentUpdateWithoutMedicalCertificateInput = {
    account?: AccountUpdateOneRequiredWithoutUserNestedInput
    group?: GroupUpdateOneWithoutUsersNestedInput
    AttendanceSnapshot?: AttendanceSnapshotUpdateManyWithoutUserNestedInput
  }

  export type StudentUncheckedUpdateWithoutMedicalCertificateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    AttendanceSnapshot?: AttendanceSnapshotUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    email: string
    password: string
    name?: string | null
    surname?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string
    updatedAt?: Date | string
    Admin?: AdminCreateNestedOneWithoutAccountInput
    Teacher?: TeacherCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    surname?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string
    updatedAt?: Date | string
    Admin?: AdminUncheckedCreateNestedOneWithoutAccountInput
    Teacher?: TeacherUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type GroupCreateWithoutUsersInput = {
    name: string
    schedule?: ScheduleCreateNestedOneWithoutGroupInput
    ep: EPCreateNestedOneWithoutGroupsInput
    teacher?: TeacherCreateNestedOneWithoutGroupsInput
  }

  export type GroupUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    EPId: number
    teacherId?: number | null
    schedule?: ScheduleUncheckedCreateNestedOneWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutUsersInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutUsersInput, GroupUncheckedCreateWithoutUsersInput>
  }

  export type MedicalCertificateCreateWithoutStudentInput = {
    path: string
    status?: $Enums.Status
    originalName: string
    description: string
    startDate?: Date | string
    endDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalCertificateUncheckedCreateWithoutStudentInput = {
    id?: number
    path: string
    status?: $Enums.Status
    originalName: string
    description: string
    startDate?: Date | string
    endDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalCertificateCreateOrConnectWithoutStudentInput = {
    where: MedicalCertificateWhereUniqueInput
    create: XOR<MedicalCertificateCreateWithoutStudentInput, MedicalCertificateUncheckedCreateWithoutStudentInput>
  }

  export type MedicalCertificateCreateManyStudentInputEnvelope = {
    data: MedicalCertificateCreateManyStudentInput | MedicalCertificateCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceSnapshotCreateWithoutUserInput = {
    day: $Enums.WeekDays
    time: string
    createdAt?: Date | string
    updatedAt?: Date | string
    week: WeekCreateNestedOneWithoutAttendanceSnapshotsInput
    subject: SubjectCreateNestedOneWithoutAttendanceSnapshotsInput
  }

  export type AttendanceSnapshotUncheckedCreateWithoutUserInput = {
    id?: number
    day: $Enums.WeekDays
    time: string
    weekId: number
    subjectId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceSnapshotCreateOrConnectWithoutUserInput = {
    where: AttendanceSnapshotWhereUniqueInput
    create: XOR<AttendanceSnapshotCreateWithoutUserInput, AttendanceSnapshotUncheckedCreateWithoutUserInput>
  }

  export type AttendanceSnapshotCreateManyUserInputEnvelope = {
    data: AttendanceSnapshotCreateManyUserInput | AttendanceSnapshotCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithoutUserInput = {
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutUserInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Admin?: AdminUpdateOneWithoutAccountNestedInput
    Teacher?: TeacherUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Admin?: AdminUncheckedUpdateOneWithoutAccountNestedInput
    Teacher?: TeacherUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type GroupUpsertWithoutUsersInput = {
    update: XOR<GroupUpdateWithoutUsersInput, GroupUncheckedUpdateWithoutUsersInput>
    create: XOR<GroupCreateWithoutUsersInput, GroupUncheckedCreateWithoutUsersInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutUsersInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutUsersInput, GroupUncheckedUpdateWithoutUsersInput>
  }

  export type GroupUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    schedule?: ScheduleUpdateOneWithoutGroupNestedInput
    ep?: EPUpdateOneRequiredWithoutGroupsNestedInput
    teacher?: TeacherUpdateOneWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EPId?: IntFieldUpdateOperationsInput | number
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    schedule?: ScheduleUncheckedUpdateOneWithoutGroupNestedInput
  }

  export type MedicalCertificateUpsertWithWhereUniqueWithoutStudentInput = {
    where: MedicalCertificateWhereUniqueInput
    update: XOR<MedicalCertificateUpdateWithoutStudentInput, MedicalCertificateUncheckedUpdateWithoutStudentInput>
    create: XOR<MedicalCertificateCreateWithoutStudentInput, MedicalCertificateUncheckedCreateWithoutStudentInput>
  }

  export type MedicalCertificateUpdateWithWhereUniqueWithoutStudentInput = {
    where: MedicalCertificateWhereUniqueInput
    data: XOR<MedicalCertificateUpdateWithoutStudentInput, MedicalCertificateUncheckedUpdateWithoutStudentInput>
  }

  export type MedicalCertificateUpdateManyWithWhereWithoutStudentInput = {
    where: MedicalCertificateScalarWhereInput
    data: XOR<MedicalCertificateUpdateManyMutationInput, MedicalCertificateUncheckedUpdateManyWithoutStudentInput>
  }

  export type MedicalCertificateScalarWhereInput = {
    AND?: MedicalCertificateScalarWhereInput | MedicalCertificateScalarWhereInput[]
    OR?: MedicalCertificateScalarWhereInput[]
    NOT?: MedicalCertificateScalarWhereInput | MedicalCertificateScalarWhereInput[]
    id?: IntFilter<"MedicalCertificate"> | number
    path?: StringFilter<"MedicalCertificate"> | string
    status?: EnumStatusFilter<"MedicalCertificate"> | $Enums.Status
    originalName?: StringFilter<"MedicalCertificate"> | string
    description?: StringFilter<"MedicalCertificate"> | string
    startDate?: DateTimeFilter<"MedicalCertificate"> | Date | string
    endDate?: DateTimeFilter<"MedicalCertificate"> | Date | string
    studentId?: IntFilter<"MedicalCertificate"> | number
    createdAt?: DateTimeFilter<"MedicalCertificate"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalCertificate"> | Date | string
  }

  export type AttendanceSnapshotUpsertWithWhereUniqueWithoutUserInput = {
    where: AttendanceSnapshotWhereUniqueInput
    update: XOR<AttendanceSnapshotUpdateWithoutUserInput, AttendanceSnapshotUncheckedUpdateWithoutUserInput>
    create: XOR<AttendanceSnapshotCreateWithoutUserInput, AttendanceSnapshotUncheckedCreateWithoutUserInput>
  }

  export type AttendanceSnapshotUpdateWithWhereUniqueWithoutUserInput = {
    where: AttendanceSnapshotWhereUniqueInput
    data: XOR<AttendanceSnapshotUpdateWithoutUserInput, AttendanceSnapshotUncheckedUpdateWithoutUserInput>
  }

  export type AttendanceSnapshotUpdateManyWithWhereWithoutUserInput = {
    where: AttendanceSnapshotScalarWhereInput
    data: XOR<AttendanceSnapshotUpdateManyMutationInput, AttendanceSnapshotUncheckedUpdateManyWithoutUserInput>
  }

  export type AttendanceSnapshotScalarWhereInput = {
    AND?: AttendanceSnapshotScalarWhereInput | AttendanceSnapshotScalarWhereInput[]
    OR?: AttendanceSnapshotScalarWhereInput[]
    NOT?: AttendanceSnapshotScalarWhereInput | AttendanceSnapshotScalarWhereInput[]
    id?: IntFilter<"AttendanceSnapshot"> | number
    day?: EnumWeekDaysFilter<"AttendanceSnapshot"> | $Enums.WeekDays
    time?: StringFilter<"AttendanceSnapshot"> | string
    weekId?: IntFilter<"AttendanceSnapshot"> | number
    subjectId?: IntFilter<"AttendanceSnapshot"> | number
    userId?: IntFilter<"AttendanceSnapshot"> | number
    createdAt?: DateTimeFilter<"AttendanceSnapshot"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceSnapshot"> | Date | string
  }

  export type AccountCreateWithoutAdminInput = {
    email: string
    password: string
    name?: string | null
    surname?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string
    updatedAt?: Date | string
    User?: StudentCreateNestedOneWithoutAccountInput
    Teacher?: TeacherCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutAdminInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    surname?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string
    updatedAt?: Date | string
    User?: StudentUncheckedCreateNestedOneWithoutAccountInput
    Teacher?: TeacherUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutAdminInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutAdminInput, AccountUncheckedCreateWithoutAdminInput>
  }

  export type AccountUpsertWithoutAdminInput = {
    update: XOR<AccountUpdateWithoutAdminInput, AccountUncheckedUpdateWithoutAdminInput>
    create: XOR<AccountCreateWithoutAdminInput, AccountUncheckedCreateWithoutAdminInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutAdminInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutAdminInput, AccountUncheckedUpdateWithoutAdminInput>
  }

  export type AccountUpdateWithoutAdminInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: StudentUpdateOneWithoutAccountNestedInput
    Teacher?: TeacherUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: StudentUncheckedUpdateOneWithoutAccountNestedInput
    Teacher?: TeacherUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateWithoutTeacherInput = {
    email: string
    password: string
    name?: string | null
    surname?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string
    updatedAt?: Date | string
    User?: StudentCreateNestedOneWithoutAccountInput
    Admin?: AdminCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutTeacherInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    surname?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string
    updatedAt?: Date | string
    User?: StudentUncheckedCreateNestedOneWithoutAccountInput
    Admin?: AdminUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutTeacherInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutTeacherInput, AccountUncheckedCreateWithoutTeacherInput>
  }

  export type SubjectCreateWithoutTeacherInput = {
    name: string
    days?: DaySubjectCreateNestedManyWithoutSubjectInput
    attendanceSnapshots?: AttendanceSnapshotCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutTeacherInput = {
    id?: number
    name: string
    days?: DaySubjectUncheckedCreateNestedManyWithoutSubjectInput
    attendanceSnapshots?: AttendanceSnapshotUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutTeacherInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutTeacherInput, SubjectUncheckedCreateWithoutTeacherInput>
  }

  export type GroupCreateWithoutTeacherInput = {
    name: string
    users?: StudentCreateNestedManyWithoutGroupInput
    schedule?: ScheduleCreateNestedOneWithoutGroupInput
    ep: EPCreateNestedOneWithoutGroupsInput
  }

  export type GroupUncheckedCreateWithoutTeacherInput = {
    id?: number
    name: string
    EPId: number
    users?: StudentUncheckedCreateNestedManyWithoutGroupInput
    schedule?: ScheduleUncheckedCreateNestedOneWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutTeacherInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutTeacherInput, GroupUncheckedCreateWithoutTeacherInput>
  }

  export type GroupCreateManyTeacherInputEnvelope = {
    data: GroupCreateManyTeacherInput | GroupCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithoutTeacherInput = {
    update: XOR<AccountUpdateWithoutTeacherInput, AccountUncheckedUpdateWithoutTeacherInput>
    create: XOR<AccountCreateWithoutTeacherInput, AccountUncheckedCreateWithoutTeacherInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutTeacherInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutTeacherInput, AccountUncheckedUpdateWithoutTeacherInput>
  }

  export type AccountUpdateWithoutTeacherInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: StudentUpdateOneWithoutAccountNestedInput
    Admin?: AdminUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: StudentUncheckedUpdateOneWithoutAccountNestedInput
    Admin?: AdminUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type SubjectUpsertWithoutTeacherInput = {
    update: XOR<SubjectUpdateWithoutTeacherInput, SubjectUncheckedUpdateWithoutTeacherInput>
    create: XOR<SubjectCreateWithoutTeacherInput, SubjectUncheckedCreateWithoutTeacherInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutTeacherInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutTeacherInput, SubjectUncheckedUpdateWithoutTeacherInput>
  }

  export type SubjectUpdateWithoutTeacherInput = {
    name?: StringFieldUpdateOperationsInput | string
    days?: DaySubjectUpdateManyWithoutSubjectNestedInput
    attendanceSnapshots?: AttendanceSnapshotUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    days?: DaySubjectUncheckedUpdateManyWithoutSubjectNestedInput
    attendanceSnapshots?: AttendanceSnapshotUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type GroupUpsertWithWhereUniqueWithoutTeacherInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutTeacherInput, GroupUncheckedUpdateWithoutTeacherInput>
    create: XOR<GroupCreateWithoutTeacherInput, GroupUncheckedCreateWithoutTeacherInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutTeacherInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutTeacherInput, GroupUncheckedUpdateWithoutTeacherInput>
  }

  export type GroupUpdateManyWithWhereWithoutTeacherInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutTeacherInput>
  }

  export type GroupScalarWhereInput = {
    AND?: GroupScalarWhereInput | GroupScalarWhereInput[]
    OR?: GroupScalarWhereInput[]
    NOT?: GroupScalarWhereInput | GroupScalarWhereInput[]
    id?: IntFilter<"Group"> | number
    name?: StringFilter<"Group"> | string
    EPId?: IntFilter<"Group"> | number
    teacherId?: IntNullableFilter<"Group"> | number | null
  }

  export type StudentCreateWithoutAccountInput = {
    group?: GroupCreateNestedOneWithoutUsersInput
    MedicalCertificate?: MedicalCertificateCreateNestedManyWithoutStudentInput
    AttendanceSnapshot?: AttendanceSnapshotCreateNestedManyWithoutUserInput
  }

  export type StudentUncheckedCreateWithoutAccountInput = {
    id?: number
    groupId?: number | null
    MedicalCertificate?: MedicalCertificateUncheckedCreateNestedManyWithoutStudentInput
    AttendanceSnapshot?: AttendanceSnapshotUncheckedCreateNestedManyWithoutUserInput
  }

  export type StudentCreateOrConnectWithoutAccountInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAccountInput, StudentUncheckedCreateWithoutAccountInput>
  }

  export type AdminCreateWithoutAccountInput = {

  }

  export type AdminUncheckedCreateWithoutAccountInput = {
    id?: number
  }

  export type AdminCreateOrConnectWithoutAccountInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
  }

  export type TeacherCreateWithoutAccountInput = {
    subject?: SubjectCreateNestedOneWithoutTeacherInput
    groups?: GroupCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutAccountInput = {
    id?: number
    subjectId?: number | null
    groups?: GroupUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutAccountInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutAccountInput, TeacherUncheckedCreateWithoutAccountInput>
  }

  export type StudentUpsertWithoutAccountInput = {
    update: XOR<StudentUpdateWithoutAccountInput, StudentUncheckedUpdateWithoutAccountInput>
    create: XOR<StudentCreateWithoutAccountInput, StudentUncheckedCreateWithoutAccountInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAccountInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAccountInput, StudentUncheckedUpdateWithoutAccountInput>
  }

  export type StudentUpdateWithoutAccountInput = {
    group?: GroupUpdateOneWithoutUsersNestedInput
    MedicalCertificate?: MedicalCertificateUpdateManyWithoutStudentNestedInput
    AttendanceSnapshot?: AttendanceSnapshotUpdateManyWithoutUserNestedInput
  }

  export type StudentUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    MedicalCertificate?: MedicalCertificateUncheckedUpdateManyWithoutStudentNestedInput
    AttendanceSnapshot?: AttendanceSnapshotUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AdminUpsertWithoutAccountInput = {
    update: XOR<AdminUpdateWithoutAccountInput, AdminUncheckedUpdateWithoutAccountInput>
    create: XOR<AdminCreateWithoutAccountInput, AdminUncheckedCreateWithoutAccountInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutAccountInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutAccountInput, AdminUncheckedUpdateWithoutAccountInput>
  }

  export type AdminUpdateWithoutAccountInput = {

  }

  export type AdminUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherUpsertWithoutAccountInput = {
    update: XOR<TeacherUpdateWithoutAccountInput, TeacherUncheckedUpdateWithoutAccountInput>
    create: XOR<TeacherCreateWithoutAccountInput, TeacherUncheckedCreateWithoutAccountInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutAccountInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutAccountInput, TeacherUncheckedUpdateWithoutAccountInput>
  }

  export type TeacherUpdateWithoutAccountInput = {
    subject?: SubjectUpdateOneWithoutTeacherNestedInput
    groups?: GroupUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: NullableIntFieldUpdateOperationsInput | number | null
    groups?: GroupUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type EPCreateWithoutFacultyInput = {
    name: string
    groups?: GroupCreateNestedManyWithoutEpInput
  }

  export type EPUncheckedCreateWithoutFacultyInput = {
    id?: number
    name: string
    groups?: GroupUncheckedCreateNestedManyWithoutEpInput
  }

  export type EPCreateOrConnectWithoutFacultyInput = {
    where: EPWhereUniqueInput
    create: XOR<EPCreateWithoutFacultyInput, EPUncheckedCreateWithoutFacultyInput>
  }

  export type EPCreateManyFacultyInputEnvelope = {
    data: EPCreateManyFacultyInput | EPCreateManyFacultyInput[]
    skipDuplicates?: boolean
  }

  export type EPUpsertWithWhereUniqueWithoutFacultyInput = {
    where: EPWhereUniqueInput
    update: XOR<EPUpdateWithoutFacultyInput, EPUncheckedUpdateWithoutFacultyInput>
    create: XOR<EPCreateWithoutFacultyInput, EPUncheckedCreateWithoutFacultyInput>
  }

  export type EPUpdateWithWhereUniqueWithoutFacultyInput = {
    where: EPWhereUniqueInput
    data: XOR<EPUpdateWithoutFacultyInput, EPUncheckedUpdateWithoutFacultyInput>
  }

  export type EPUpdateManyWithWhereWithoutFacultyInput = {
    where: EPScalarWhereInput
    data: XOR<EPUpdateManyMutationInput, EPUncheckedUpdateManyWithoutFacultyInput>
  }

  export type EPScalarWhereInput = {
    AND?: EPScalarWhereInput | EPScalarWhereInput[]
    OR?: EPScalarWhereInput[]
    NOT?: EPScalarWhereInput | EPScalarWhereInput[]
    id?: IntFilter<"EP"> | number
    name?: StringFilter<"EP"> | string
    facultyId?: IntFilter<"EP"> | number
  }

  export type FacultyCreateWithoutEPsInput = {
    name: string
  }

  export type FacultyUncheckedCreateWithoutEPsInput = {
    id?: number
    name: string
  }

  export type FacultyCreateOrConnectWithoutEPsInput = {
    where: FacultyWhereUniqueInput
    create: XOR<FacultyCreateWithoutEPsInput, FacultyUncheckedCreateWithoutEPsInput>
  }

  export type GroupCreateWithoutEpInput = {
    name: string
    users?: StudentCreateNestedManyWithoutGroupInput
    schedule?: ScheduleCreateNestedOneWithoutGroupInput
    teacher?: TeacherCreateNestedOneWithoutGroupsInput
  }

  export type GroupUncheckedCreateWithoutEpInput = {
    id?: number
    name: string
    teacherId?: number | null
    users?: StudentUncheckedCreateNestedManyWithoutGroupInput
    schedule?: ScheduleUncheckedCreateNestedOneWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutEpInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutEpInput, GroupUncheckedCreateWithoutEpInput>
  }

  export type GroupCreateManyEpInputEnvelope = {
    data: GroupCreateManyEpInput | GroupCreateManyEpInput[]
    skipDuplicates?: boolean
  }

  export type FacultyUpsertWithoutEPsInput = {
    update: XOR<FacultyUpdateWithoutEPsInput, FacultyUncheckedUpdateWithoutEPsInput>
    create: XOR<FacultyCreateWithoutEPsInput, FacultyUncheckedCreateWithoutEPsInput>
    where?: FacultyWhereInput
  }

  export type FacultyUpdateToOneWithWhereWithoutEPsInput = {
    where?: FacultyWhereInput
    data: XOR<FacultyUpdateWithoutEPsInput, FacultyUncheckedUpdateWithoutEPsInput>
  }

  export type FacultyUpdateWithoutEPsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FacultyUncheckedUpdateWithoutEPsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GroupUpsertWithWhereUniqueWithoutEpInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutEpInput, GroupUncheckedUpdateWithoutEpInput>
    create: XOR<GroupCreateWithoutEpInput, GroupUncheckedCreateWithoutEpInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutEpInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutEpInput, GroupUncheckedUpdateWithoutEpInput>
  }

  export type GroupUpdateManyWithWhereWithoutEpInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutEpInput>
  }

  export type GroupCreateWithoutScheduleInput = {
    name: string
    users?: StudentCreateNestedManyWithoutGroupInput
    ep: EPCreateNestedOneWithoutGroupsInput
    teacher?: TeacherCreateNestedOneWithoutGroupsInput
  }

  export type GroupUncheckedCreateWithoutScheduleInput = {
    id?: number
    name: string
    EPId: number
    teacherId?: number | null
    users?: StudentUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutScheduleInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutScheduleInput, GroupUncheckedCreateWithoutScheduleInput>
  }

  export type WeekCreateWithoutScheduleInput = {
    number: number
    days?: DayCreateNestedManyWithoutWeekInput
    attendanceSnapshots?: AttendanceSnapshotCreateNestedManyWithoutWeekInput
  }

  export type WeekUncheckedCreateWithoutScheduleInput = {
    id?: number
    number: number
    days?: DayUncheckedCreateNestedManyWithoutWeekInput
    attendanceSnapshots?: AttendanceSnapshotUncheckedCreateNestedManyWithoutWeekInput
  }

  export type WeekCreateOrConnectWithoutScheduleInput = {
    where: WeekWhereUniqueInput
    create: XOR<WeekCreateWithoutScheduleInput, WeekUncheckedCreateWithoutScheduleInput>
  }

  export type WeekCreateManyScheduleInputEnvelope = {
    data: WeekCreateManyScheduleInput | WeekCreateManyScheduleInput[]
    skipDuplicates?: boolean
  }

  export type GroupUpsertWithoutScheduleInput = {
    update: XOR<GroupUpdateWithoutScheduleInput, GroupUncheckedUpdateWithoutScheduleInput>
    create: XOR<GroupCreateWithoutScheduleInput, GroupUncheckedCreateWithoutScheduleInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutScheduleInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutScheduleInput, GroupUncheckedUpdateWithoutScheduleInput>
  }

  export type GroupUpdateWithoutScheduleInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: StudentUpdateManyWithoutGroupNestedInput
    ep?: EPUpdateOneRequiredWithoutGroupsNestedInput
    teacher?: TeacherUpdateOneWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EPId?: IntFieldUpdateOperationsInput | number
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    users?: StudentUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type WeekUpsertWithWhereUniqueWithoutScheduleInput = {
    where: WeekWhereUniqueInput
    update: XOR<WeekUpdateWithoutScheduleInput, WeekUncheckedUpdateWithoutScheduleInput>
    create: XOR<WeekCreateWithoutScheduleInput, WeekUncheckedCreateWithoutScheduleInput>
  }

  export type WeekUpdateWithWhereUniqueWithoutScheduleInput = {
    where: WeekWhereUniqueInput
    data: XOR<WeekUpdateWithoutScheduleInput, WeekUncheckedUpdateWithoutScheduleInput>
  }

  export type WeekUpdateManyWithWhereWithoutScheduleInput = {
    where: WeekScalarWhereInput
    data: XOR<WeekUpdateManyMutationInput, WeekUncheckedUpdateManyWithoutScheduleInput>
  }

  export type WeekScalarWhereInput = {
    AND?: WeekScalarWhereInput | WeekScalarWhereInput[]
    OR?: WeekScalarWhereInput[]
    NOT?: WeekScalarWhereInput | WeekScalarWhereInput[]
    id?: IntFilter<"Week"> | number
    scheduleId?: IntFilter<"Week"> | number
    number?: IntFilter<"Week"> | number
  }

  export type ScheduleCreateWithoutWeeksInput = {
    group: GroupCreateNestedOneWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateWithoutWeeksInput = {
    id?: number
    groupId: number
  }

  export type ScheduleCreateOrConnectWithoutWeeksInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutWeeksInput, ScheduleUncheckedCreateWithoutWeeksInput>
  }

  export type DayCreateWithoutWeekInput = {
    name: $Enums.WeekDays
    subjects?: DaySubjectCreateNestedManyWithoutDayInput
  }

  export type DayUncheckedCreateWithoutWeekInput = {
    id?: number
    name: $Enums.WeekDays
    subjects?: DaySubjectUncheckedCreateNestedManyWithoutDayInput
  }

  export type DayCreateOrConnectWithoutWeekInput = {
    where: DayWhereUniqueInput
    create: XOR<DayCreateWithoutWeekInput, DayUncheckedCreateWithoutWeekInput>
  }

  export type DayCreateManyWeekInputEnvelope = {
    data: DayCreateManyWeekInput | DayCreateManyWeekInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceSnapshotCreateWithoutWeekInput = {
    day: $Enums.WeekDays
    time: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutAttendanceSnapshotsInput
    user: StudentCreateNestedOneWithoutAttendanceSnapshotInput
  }

  export type AttendanceSnapshotUncheckedCreateWithoutWeekInput = {
    id?: number
    day: $Enums.WeekDays
    time: string
    subjectId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceSnapshotCreateOrConnectWithoutWeekInput = {
    where: AttendanceSnapshotWhereUniqueInput
    create: XOR<AttendanceSnapshotCreateWithoutWeekInput, AttendanceSnapshotUncheckedCreateWithoutWeekInput>
  }

  export type AttendanceSnapshotCreateManyWeekInputEnvelope = {
    data: AttendanceSnapshotCreateManyWeekInput | AttendanceSnapshotCreateManyWeekInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleUpsertWithoutWeeksInput = {
    update: XOR<ScheduleUpdateWithoutWeeksInput, ScheduleUncheckedUpdateWithoutWeeksInput>
    create: XOR<ScheduleCreateWithoutWeeksInput, ScheduleUncheckedCreateWithoutWeeksInput>
    where?: ScheduleWhereInput
  }

  export type ScheduleUpdateToOneWithWhereWithoutWeeksInput = {
    where?: ScheduleWhereInput
    data: XOR<ScheduleUpdateWithoutWeeksInput, ScheduleUncheckedUpdateWithoutWeeksInput>
  }

  export type ScheduleUpdateWithoutWeeksInput = {
    group?: GroupUpdateOneRequiredWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutWeeksInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type DayUpsertWithWhereUniqueWithoutWeekInput = {
    where: DayWhereUniqueInput
    update: XOR<DayUpdateWithoutWeekInput, DayUncheckedUpdateWithoutWeekInput>
    create: XOR<DayCreateWithoutWeekInput, DayUncheckedCreateWithoutWeekInput>
  }

  export type DayUpdateWithWhereUniqueWithoutWeekInput = {
    where: DayWhereUniqueInput
    data: XOR<DayUpdateWithoutWeekInput, DayUncheckedUpdateWithoutWeekInput>
  }

  export type DayUpdateManyWithWhereWithoutWeekInput = {
    where: DayScalarWhereInput
    data: XOR<DayUpdateManyMutationInput, DayUncheckedUpdateManyWithoutWeekInput>
  }

  export type DayScalarWhereInput = {
    AND?: DayScalarWhereInput | DayScalarWhereInput[]
    OR?: DayScalarWhereInput[]
    NOT?: DayScalarWhereInput | DayScalarWhereInput[]
    id?: IntFilter<"Day"> | number
    name?: EnumWeekDaysFilter<"Day"> | $Enums.WeekDays
    weekId?: IntFilter<"Day"> | number
  }

  export type AttendanceSnapshotUpsertWithWhereUniqueWithoutWeekInput = {
    where: AttendanceSnapshotWhereUniqueInput
    update: XOR<AttendanceSnapshotUpdateWithoutWeekInput, AttendanceSnapshotUncheckedUpdateWithoutWeekInput>
    create: XOR<AttendanceSnapshotCreateWithoutWeekInput, AttendanceSnapshotUncheckedCreateWithoutWeekInput>
  }

  export type AttendanceSnapshotUpdateWithWhereUniqueWithoutWeekInput = {
    where: AttendanceSnapshotWhereUniqueInput
    data: XOR<AttendanceSnapshotUpdateWithoutWeekInput, AttendanceSnapshotUncheckedUpdateWithoutWeekInput>
  }

  export type AttendanceSnapshotUpdateManyWithWhereWithoutWeekInput = {
    where: AttendanceSnapshotScalarWhereInput
    data: XOR<AttendanceSnapshotUpdateManyMutationInput, AttendanceSnapshotUncheckedUpdateManyWithoutWeekInput>
  }

  export type WeekCreateWithoutDaysInput = {
    number: number
    schedule: ScheduleCreateNestedOneWithoutWeeksInput
    attendanceSnapshots?: AttendanceSnapshotCreateNestedManyWithoutWeekInput
  }

  export type WeekUncheckedCreateWithoutDaysInput = {
    id?: number
    scheduleId: number
    number: number
    attendanceSnapshots?: AttendanceSnapshotUncheckedCreateNestedManyWithoutWeekInput
  }

  export type WeekCreateOrConnectWithoutDaysInput = {
    where: WeekWhereUniqueInput
    create: XOR<WeekCreateWithoutDaysInput, WeekUncheckedCreateWithoutDaysInput>
  }

  export type DaySubjectCreateWithoutDayInput = {
    startTime: string
    subject: SubjectCreateNestedOneWithoutDaysInput
  }

  export type DaySubjectUncheckedCreateWithoutDayInput = {
    id?: number
    subjectId: number
    startTime: string
  }

  export type DaySubjectCreateOrConnectWithoutDayInput = {
    where: DaySubjectWhereUniqueInput
    create: XOR<DaySubjectCreateWithoutDayInput, DaySubjectUncheckedCreateWithoutDayInput>
  }

  export type DaySubjectCreateManyDayInputEnvelope = {
    data: DaySubjectCreateManyDayInput | DaySubjectCreateManyDayInput[]
    skipDuplicates?: boolean
  }

  export type WeekUpsertWithoutDaysInput = {
    update: XOR<WeekUpdateWithoutDaysInput, WeekUncheckedUpdateWithoutDaysInput>
    create: XOR<WeekCreateWithoutDaysInput, WeekUncheckedCreateWithoutDaysInput>
    where?: WeekWhereInput
  }

  export type WeekUpdateToOneWithWhereWithoutDaysInput = {
    where?: WeekWhereInput
    data: XOR<WeekUpdateWithoutDaysInput, WeekUncheckedUpdateWithoutDaysInput>
  }

  export type WeekUpdateWithoutDaysInput = {
    number?: IntFieldUpdateOperationsInput | number
    schedule?: ScheduleUpdateOneRequiredWithoutWeeksNestedInput
    attendanceSnapshots?: AttendanceSnapshotUpdateManyWithoutWeekNestedInput
  }

  export type WeekUncheckedUpdateWithoutDaysInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleId?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    attendanceSnapshots?: AttendanceSnapshotUncheckedUpdateManyWithoutWeekNestedInput
  }

  export type DaySubjectUpsertWithWhereUniqueWithoutDayInput = {
    where: DaySubjectWhereUniqueInput
    update: XOR<DaySubjectUpdateWithoutDayInput, DaySubjectUncheckedUpdateWithoutDayInput>
    create: XOR<DaySubjectCreateWithoutDayInput, DaySubjectUncheckedCreateWithoutDayInput>
  }

  export type DaySubjectUpdateWithWhereUniqueWithoutDayInput = {
    where: DaySubjectWhereUniqueInput
    data: XOR<DaySubjectUpdateWithoutDayInput, DaySubjectUncheckedUpdateWithoutDayInput>
  }

  export type DaySubjectUpdateManyWithWhereWithoutDayInput = {
    where: DaySubjectScalarWhereInput
    data: XOR<DaySubjectUpdateManyMutationInput, DaySubjectUncheckedUpdateManyWithoutDayInput>
  }

  export type DaySubjectScalarWhereInput = {
    AND?: DaySubjectScalarWhereInput | DaySubjectScalarWhereInput[]
    OR?: DaySubjectScalarWhereInput[]
    NOT?: DaySubjectScalarWhereInput | DaySubjectScalarWhereInput[]
    id?: IntFilter<"DaySubject"> | number
    dayId?: IntFilter<"DaySubject"> | number
    subjectId?: IntFilter<"DaySubject"> | number
    startTime?: StringFilter<"DaySubject"> | string
  }

  export type DaySubjectCreateWithoutSubjectInput = {
    startTime: string
    day: DayCreateNestedOneWithoutSubjectsInput
  }

  export type DaySubjectUncheckedCreateWithoutSubjectInput = {
    id?: number
    dayId: number
    startTime: string
  }

  export type DaySubjectCreateOrConnectWithoutSubjectInput = {
    where: DaySubjectWhereUniqueInput
    create: XOR<DaySubjectCreateWithoutSubjectInput, DaySubjectUncheckedCreateWithoutSubjectInput>
  }

  export type DaySubjectCreateManySubjectInputEnvelope = {
    data: DaySubjectCreateManySubjectInput | DaySubjectCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceSnapshotCreateWithoutSubjectInput = {
    day: $Enums.WeekDays
    time: string
    createdAt?: Date | string
    updatedAt?: Date | string
    week: WeekCreateNestedOneWithoutAttendanceSnapshotsInput
    user: StudentCreateNestedOneWithoutAttendanceSnapshotInput
  }

  export type AttendanceSnapshotUncheckedCreateWithoutSubjectInput = {
    id?: number
    day: $Enums.WeekDays
    time: string
    weekId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceSnapshotCreateOrConnectWithoutSubjectInput = {
    where: AttendanceSnapshotWhereUniqueInput
    create: XOR<AttendanceSnapshotCreateWithoutSubjectInput, AttendanceSnapshotUncheckedCreateWithoutSubjectInput>
  }

  export type AttendanceSnapshotCreateManySubjectInputEnvelope = {
    data: AttendanceSnapshotCreateManySubjectInput | AttendanceSnapshotCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCreateWithoutSubjectInput = {
    account: AccountCreateNestedOneWithoutTeacherInput
    groups?: GroupCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutSubjectInput = {
    id?: number
    accountId: number
    groups?: GroupUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutSubjectInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutSubjectInput, TeacherUncheckedCreateWithoutSubjectInput>
  }

  export type DaySubjectUpsertWithWhereUniqueWithoutSubjectInput = {
    where: DaySubjectWhereUniqueInput
    update: XOR<DaySubjectUpdateWithoutSubjectInput, DaySubjectUncheckedUpdateWithoutSubjectInput>
    create: XOR<DaySubjectCreateWithoutSubjectInput, DaySubjectUncheckedCreateWithoutSubjectInput>
  }

  export type DaySubjectUpdateWithWhereUniqueWithoutSubjectInput = {
    where: DaySubjectWhereUniqueInput
    data: XOR<DaySubjectUpdateWithoutSubjectInput, DaySubjectUncheckedUpdateWithoutSubjectInput>
  }

  export type DaySubjectUpdateManyWithWhereWithoutSubjectInput = {
    where: DaySubjectScalarWhereInput
    data: XOR<DaySubjectUpdateManyMutationInput, DaySubjectUncheckedUpdateManyWithoutSubjectInput>
  }

  export type AttendanceSnapshotUpsertWithWhereUniqueWithoutSubjectInput = {
    where: AttendanceSnapshotWhereUniqueInput
    update: XOR<AttendanceSnapshotUpdateWithoutSubjectInput, AttendanceSnapshotUncheckedUpdateWithoutSubjectInput>
    create: XOR<AttendanceSnapshotCreateWithoutSubjectInput, AttendanceSnapshotUncheckedCreateWithoutSubjectInput>
  }

  export type AttendanceSnapshotUpdateWithWhereUniqueWithoutSubjectInput = {
    where: AttendanceSnapshotWhereUniqueInput
    data: XOR<AttendanceSnapshotUpdateWithoutSubjectInput, AttendanceSnapshotUncheckedUpdateWithoutSubjectInput>
  }

  export type AttendanceSnapshotUpdateManyWithWhereWithoutSubjectInput = {
    where: AttendanceSnapshotScalarWhereInput
    data: XOR<AttendanceSnapshotUpdateManyMutationInput, AttendanceSnapshotUncheckedUpdateManyWithoutSubjectInput>
  }

  export type TeacherUpsertWithoutSubjectInput = {
    update: XOR<TeacherUpdateWithoutSubjectInput, TeacherUncheckedUpdateWithoutSubjectInput>
    create: XOR<TeacherCreateWithoutSubjectInput, TeacherUncheckedCreateWithoutSubjectInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutSubjectInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutSubjectInput, TeacherUncheckedUpdateWithoutSubjectInput>
  }

  export type TeacherUpdateWithoutSubjectInput = {
    account?: AccountUpdateOneRequiredWithoutTeacherNestedInput
    groups?: GroupUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    groups?: GroupUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type SubjectCreateWithoutDaysInput = {
    name: string
    attendanceSnapshots?: AttendanceSnapshotCreateNestedManyWithoutSubjectInput
    teacher?: TeacherCreateNestedOneWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutDaysInput = {
    id?: number
    name: string
    attendanceSnapshots?: AttendanceSnapshotUncheckedCreateNestedManyWithoutSubjectInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutDaysInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutDaysInput, SubjectUncheckedCreateWithoutDaysInput>
  }

  export type DayCreateWithoutSubjectsInput = {
    name: $Enums.WeekDays
    week: WeekCreateNestedOneWithoutDaysInput
  }

  export type DayUncheckedCreateWithoutSubjectsInput = {
    id?: number
    name: $Enums.WeekDays
    weekId: number
  }

  export type DayCreateOrConnectWithoutSubjectsInput = {
    where: DayWhereUniqueInput
    create: XOR<DayCreateWithoutSubjectsInput, DayUncheckedCreateWithoutSubjectsInput>
  }

  export type SubjectUpsertWithoutDaysInput = {
    update: XOR<SubjectUpdateWithoutDaysInput, SubjectUncheckedUpdateWithoutDaysInput>
    create: XOR<SubjectCreateWithoutDaysInput, SubjectUncheckedCreateWithoutDaysInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutDaysInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutDaysInput, SubjectUncheckedUpdateWithoutDaysInput>
  }

  export type SubjectUpdateWithoutDaysInput = {
    name?: StringFieldUpdateOperationsInput | string
    attendanceSnapshots?: AttendanceSnapshotUpdateManyWithoutSubjectNestedInput
    teacher?: TeacherUpdateOneWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutDaysInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    attendanceSnapshots?: AttendanceSnapshotUncheckedUpdateManyWithoutSubjectNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutSubjectNestedInput
  }

  export type DayUpsertWithoutSubjectsInput = {
    update: XOR<DayUpdateWithoutSubjectsInput, DayUncheckedUpdateWithoutSubjectsInput>
    create: XOR<DayCreateWithoutSubjectsInput, DayUncheckedCreateWithoutSubjectsInput>
    where?: DayWhereInput
  }

  export type DayUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: DayWhereInput
    data: XOR<DayUpdateWithoutSubjectsInput, DayUncheckedUpdateWithoutSubjectsInput>
  }

  export type DayUpdateWithoutSubjectsInput = {
    name?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    week?: WeekUpdateOneRequiredWithoutDaysNestedInput
  }

  export type DayUncheckedUpdateWithoutSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    weekId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateWithoutGroupInput = {
    account: AccountCreateNestedOneWithoutUserInput
    MedicalCertificate?: MedicalCertificateCreateNestedManyWithoutStudentInput
    AttendanceSnapshot?: AttendanceSnapshotCreateNestedManyWithoutUserInput
  }

  export type StudentUncheckedCreateWithoutGroupInput = {
    id?: number
    accountId: number
    MedicalCertificate?: MedicalCertificateUncheckedCreateNestedManyWithoutStudentInput
    AttendanceSnapshot?: AttendanceSnapshotUncheckedCreateNestedManyWithoutUserInput
  }

  export type StudentCreateOrConnectWithoutGroupInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutGroupInput, StudentUncheckedCreateWithoutGroupInput>
  }

  export type StudentCreateManyGroupInputEnvelope = {
    data: StudentCreateManyGroupInput | StudentCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutGroupInput = {
    weeks?: WeekCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateWithoutGroupInput = {
    id?: number
    weeks?: WeekUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleCreateOrConnectWithoutGroupInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutGroupInput, ScheduleUncheckedCreateWithoutGroupInput>
  }

  export type EPCreateWithoutGroupsInput = {
    name: string
    faculty: FacultyCreateNestedOneWithoutEPsInput
  }

  export type EPUncheckedCreateWithoutGroupsInput = {
    id?: number
    name: string
    facultyId: number
  }

  export type EPCreateOrConnectWithoutGroupsInput = {
    where: EPWhereUniqueInput
    create: XOR<EPCreateWithoutGroupsInput, EPUncheckedCreateWithoutGroupsInput>
  }

  export type TeacherCreateWithoutGroupsInput = {
    account: AccountCreateNestedOneWithoutTeacherInput
    subject?: SubjectCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutGroupsInput = {
    id?: number
    accountId: number
    subjectId?: number | null
  }

  export type TeacherCreateOrConnectWithoutGroupsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutGroupsInput, TeacherUncheckedCreateWithoutGroupsInput>
  }

  export type StudentUpsertWithWhereUniqueWithoutGroupInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutGroupInput, StudentUncheckedUpdateWithoutGroupInput>
    create: XOR<StudentCreateWithoutGroupInput, StudentUncheckedCreateWithoutGroupInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutGroupInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutGroupInput, StudentUncheckedUpdateWithoutGroupInput>
  }

  export type StudentUpdateManyWithWhereWithoutGroupInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutGroupInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: IntFilter<"Student"> | number
    accountId?: IntFilter<"Student"> | number
    groupId?: IntNullableFilter<"Student"> | number | null
  }

  export type ScheduleUpsertWithoutGroupInput = {
    update: XOR<ScheduleUpdateWithoutGroupInput, ScheduleUncheckedUpdateWithoutGroupInput>
    create: XOR<ScheduleCreateWithoutGroupInput, ScheduleUncheckedCreateWithoutGroupInput>
    where?: ScheduleWhereInput
  }

  export type ScheduleUpdateToOneWithWhereWithoutGroupInput = {
    where?: ScheduleWhereInput
    data: XOR<ScheduleUpdateWithoutGroupInput, ScheduleUncheckedUpdateWithoutGroupInput>
  }

  export type ScheduleUpdateWithoutGroupInput = {
    weeks?: WeekUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    weeks?: WeekUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type EPUpsertWithoutGroupsInput = {
    update: XOR<EPUpdateWithoutGroupsInput, EPUncheckedUpdateWithoutGroupsInput>
    create: XOR<EPCreateWithoutGroupsInput, EPUncheckedCreateWithoutGroupsInput>
    where?: EPWhereInput
  }

  export type EPUpdateToOneWithWhereWithoutGroupsInput = {
    where?: EPWhereInput
    data: XOR<EPUpdateWithoutGroupsInput, EPUncheckedUpdateWithoutGroupsInput>
  }

  export type EPUpdateWithoutGroupsInput = {
    name?: StringFieldUpdateOperationsInput | string
    faculty?: FacultyUpdateOneRequiredWithoutEPsNestedInput
  }

  export type EPUncheckedUpdateWithoutGroupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    facultyId?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherUpsertWithoutGroupsInput = {
    update: XOR<TeacherUpdateWithoutGroupsInput, TeacherUncheckedUpdateWithoutGroupsInput>
    create: XOR<TeacherCreateWithoutGroupsInput, TeacherUncheckedCreateWithoutGroupsInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutGroupsInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutGroupsInput, TeacherUncheckedUpdateWithoutGroupsInput>
  }

  export type TeacherUpdateWithoutGroupsInput = {
    account?: AccountUpdateOneRequiredWithoutTeacherNestedInput
    subject?: SubjectUpdateOneWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutGroupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    subjectId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WeekCreateWithoutAttendanceSnapshotsInput = {
    number: number
    schedule: ScheduleCreateNestedOneWithoutWeeksInput
    days?: DayCreateNestedManyWithoutWeekInput
  }

  export type WeekUncheckedCreateWithoutAttendanceSnapshotsInput = {
    id?: number
    scheduleId: number
    number: number
    days?: DayUncheckedCreateNestedManyWithoutWeekInput
  }

  export type WeekCreateOrConnectWithoutAttendanceSnapshotsInput = {
    where: WeekWhereUniqueInput
    create: XOR<WeekCreateWithoutAttendanceSnapshotsInput, WeekUncheckedCreateWithoutAttendanceSnapshotsInput>
  }

  export type SubjectCreateWithoutAttendanceSnapshotsInput = {
    name: string
    days?: DaySubjectCreateNestedManyWithoutSubjectInput
    teacher?: TeacherCreateNestedOneWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutAttendanceSnapshotsInput = {
    id?: number
    name: string
    days?: DaySubjectUncheckedCreateNestedManyWithoutSubjectInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutAttendanceSnapshotsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutAttendanceSnapshotsInput, SubjectUncheckedCreateWithoutAttendanceSnapshotsInput>
  }

  export type StudentCreateWithoutAttendanceSnapshotInput = {
    account: AccountCreateNestedOneWithoutUserInput
    group?: GroupCreateNestedOneWithoutUsersInput
    MedicalCertificate?: MedicalCertificateCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAttendanceSnapshotInput = {
    id?: number
    accountId: number
    groupId?: number | null
    MedicalCertificate?: MedicalCertificateUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAttendanceSnapshotInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAttendanceSnapshotInput, StudentUncheckedCreateWithoutAttendanceSnapshotInput>
  }

  export type WeekUpsertWithoutAttendanceSnapshotsInput = {
    update: XOR<WeekUpdateWithoutAttendanceSnapshotsInput, WeekUncheckedUpdateWithoutAttendanceSnapshotsInput>
    create: XOR<WeekCreateWithoutAttendanceSnapshotsInput, WeekUncheckedCreateWithoutAttendanceSnapshotsInput>
    where?: WeekWhereInput
  }

  export type WeekUpdateToOneWithWhereWithoutAttendanceSnapshotsInput = {
    where?: WeekWhereInput
    data: XOR<WeekUpdateWithoutAttendanceSnapshotsInput, WeekUncheckedUpdateWithoutAttendanceSnapshotsInput>
  }

  export type WeekUpdateWithoutAttendanceSnapshotsInput = {
    number?: IntFieldUpdateOperationsInput | number
    schedule?: ScheduleUpdateOneRequiredWithoutWeeksNestedInput
    days?: DayUpdateManyWithoutWeekNestedInput
  }

  export type WeekUncheckedUpdateWithoutAttendanceSnapshotsInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleId?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    days?: DayUncheckedUpdateManyWithoutWeekNestedInput
  }

  export type SubjectUpsertWithoutAttendanceSnapshotsInput = {
    update: XOR<SubjectUpdateWithoutAttendanceSnapshotsInput, SubjectUncheckedUpdateWithoutAttendanceSnapshotsInput>
    create: XOR<SubjectCreateWithoutAttendanceSnapshotsInput, SubjectUncheckedCreateWithoutAttendanceSnapshotsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutAttendanceSnapshotsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutAttendanceSnapshotsInput, SubjectUncheckedUpdateWithoutAttendanceSnapshotsInput>
  }

  export type SubjectUpdateWithoutAttendanceSnapshotsInput = {
    name?: StringFieldUpdateOperationsInput | string
    days?: DaySubjectUpdateManyWithoutSubjectNestedInput
    teacher?: TeacherUpdateOneWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutAttendanceSnapshotsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    days?: DaySubjectUncheckedUpdateManyWithoutSubjectNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutSubjectNestedInput
  }

  export type StudentUpsertWithoutAttendanceSnapshotInput = {
    update: XOR<StudentUpdateWithoutAttendanceSnapshotInput, StudentUncheckedUpdateWithoutAttendanceSnapshotInput>
    create: XOR<StudentCreateWithoutAttendanceSnapshotInput, StudentUncheckedCreateWithoutAttendanceSnapshotInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAttendanceSnapshotInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAttendanceSnapshotInput, StudentUncheckedUpdateWithoutAttendanceSnapshotInput>
  }

  export type StudentUpdateWithoutAttendanceSnapshotInput = {
    account?: AccountUpdateOneRequiredWithoutUserNestedInput
    group?: GroupUpdateOneWithoutUsersNestedInput
    MedicalCertificate?: MedicalCertificateUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAttendanceSnapshotInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    MedicalCertificate?: MedicalCertificateUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type MedicalCertificateCreateManyStudentInput = {
    id?: number
    path: string
    status?: $Enums.Status
    originalName: string
    description: string
    startDate?: Date | string
    endDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceSnapshotCreateManyUserInput = {
    id?: number
    day: $Enums.WeekDays
    time: string
    weekId: number
    subjectId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalCertificateUpdateWithoutStudentInput = {
    path?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    originalName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalCertificateUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    originalName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalCertificateUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    originalName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceSnapshotUpdateWithoutUserInput = {
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    week?: WeekUpdateOneRequiredWithoutAttendanceSnapshotsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutAttendanceSnapshotsNestedInput
  }

  export type AttendanceSnapshotUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    weekId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceSnapshotUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    weekId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupCreateManyTeacherInput = {
    id?: number
    name: string
    EPId: number
  }

  export type GroupUpdateWithoutTeacherInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: StudentUpdateManyWithoutGroupNestedInput
    schedule?: ScheduleUpdateOneWithoutGroupNestedInput
    ep?: EPUpdateOneRequiredWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EPId?: IntFieldUpdateOperationsInput | number
    users?: StudentUncheckedUpdateManyWithoutGroupNestedInput
    schedule?: ScheduleUncheckedUpdateOneWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EPId?: IntFieldUpdateOperationsInput | number
  }

  export type EPCreateManyFacultyInput = {
    id?: number
    name: string
  }

  export type EPUpdateWithoutFacultyInput = {
    name?: StringFieldUpdateOperationsInput | string
    groups?: GroupUpdateManyWithoutEpNestedInput
  }

  export type EPUncheckedUpdateWithoutFacultyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    groups?: GroupUncheckedUpdateManyWithoutEpNestedInput
  }

  export type EPUncheckedUpdateManyWithoutFacultyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GroupCreateManyEpInput = {
    id?: number
    name: string
    teacherId?: number | null
  }

  export type GroupUpdateWithoutEpInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: StudentUpdateManyWithoutGroupNestedInput
    schedule?: ScheduleUpdateOneWithoutGroupNestedInput
    teacher?: TeacherUpdateOneWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateWithoutEpInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    users?: StudentUncheckedUpdateManyWithoutGroupNestedInput
    schedule?: ScheduleUncheckedUpdateOneWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateManyWithoutEpInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WeekCreateManyScheduleInput = {
    id?: number
    number: number
  }

  export type WeekUpdateWithoutScheduleInput = {
    number?: IntFieldUpdateOperationsInput | number
    days?: DayUpdateManyWithoutWeekNestedInput
    attendanceSnapshots?: AttendanceSnapshotUpdateManyWithoutWeekNestedInput
  }

  export type WeekUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    days?: DayUncheckedUpdateManyWithoutWeekNestedInput
    attendanceSnapshots?: AttendanceSnapshotUncheckedUpdateManyWithoutWeekNestedInput
  }

  export type WeekUncheckedUpdateManyWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
  }

  export type DayCreateManyWeekInput = {
    id?: number
    name: $Enums.WeekDays
  }

  export type AttendanceSnapshotCreateManyWeekInput = {
    id?: number
    day: $Enums.WeekDays
    time: string
    subjectId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DayUpdateWithoutWeekInput = {
    name?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    subjects?: DaySubjectUpdateManyWithoutDayNestedInput
  }

  export type DayUncheckedUpdateWithoutWeekInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    subjects?: DaySubjectUncheckedUpdateManyWithoutDayNestedInput
  }

  export type DayUncheckedUpdateManyWithoutWeekInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
  }

  export type AttendanceSnapshotUpdateWithoutWeekInput = {
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutAttendanceSnapshotsNestedInput
    user?: StudentUpdateOneRequiredWithoutAttendanceSnapshotNestedInput
  }

  export type AttendanceSnapshotUncheckedUpdateWithoutWeekInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceSnapshotUncheckedUpdateManyWithoutWeekInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DaySubjectCreateManyDayInput = {
    id?: number
    subjectId: number
    startTime: string
  }

  export type DaySubjectUpdateWithoutDayInput = {
    startTime?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutDaysNestedInput
  }

  export type DaySubjectUncheckedUpdateWithoutDayInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
  }

  export type DaySubjectUncheckedUpdateManyWithoutDayInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
  }

  export type DaySubjectCreateManySubjectInput = {
    id?: number
    dayId: number
    startTime: string
  }

  export type AttendanceSnapshotCreateManySubjectInput = {
    id?: number
    day: $Enums.WeekDays
    time: string
    weekId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DaySubjectUpdateWithoutSubjectInput = {
    startTime?: StringFieldUpdateOperationsInput | string
    day?: DayUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type DaySubjectUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayId?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
  }

  export type DaySubjectUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayId?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
  }

  export type AttendanceSnapshotUpdateWithoutSubjectInput = {
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    week?: WeekUpdateOneRequiredWithoutAttendanceSnapshotsNestedInput
    user?: StudentUpdateOneRequiredWithoutAttendanceSnapshotNestedInput
  }

  export type AttendanceSnapshotUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    weekId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceSnapshotUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: EnumWeekDaysFieldUpdateOperationsInput | $Enums.WeekDays
    time?: StringFieldUpdateOperationsInput | string
    weekId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateManyGroupInput = {
    id?: number
    accountId: number
  }

  export type StudentUpdateWithoutGroupInput = {
    account?: AccountUpdateOneRequiredWithoutUserNestedInput
    MedicalCertificate?: MedicalCertificateUpdateManyWithoutStudentNestedInput
    AttendanceSnapshot?: AttendanceSnapshotUpdateManyWithoutUserNestedInput
  }

  export type StudentUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    MedicalCertificate?: MedicalCertificateUncheckedUpdateManyWithoutStudentNestedInput
    AttendanceSnapshot?: AttendanceSnapshotUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StudentCountOutputTypeDefaultArgs instead
     */
    export type StudentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeacherCountOutputTypeDefaultArgs instead
     */
    export type TeacherCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FacultyCountOutputTypeDefaultArgs instead
     */
    export type FacultyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacultyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EPCountOutputTypeDefaultArgs instead
     */
    export type EPCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EPCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleCountOutputTypeDefaultArgs instead
     */
    export type ScheduleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeekCountOutputTypeDefaultArgs instead
     */
    export type WeekCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeekCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DayCountOutputTypeDefaultArgs instead
     */
    export type DayCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DayCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectCountOutputTypeDefaultArgs instead
     */
    export type SubjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupCountOutputTypeDefaultArgs instead
     */
    export type GroupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicalCertificateDefaultArgs instead
     */
    export type MedicalCertificateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicalCertificateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentDefaultArgs instead
     */
    export type StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeacherDefaultArgs instead
     */
    export type TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FacultyDefaultArgs instead
     */
    export type FacultyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacultyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EPDefaultArgs instead
     */
    export type EPArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EPDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDefaultArgs instead
     */
    export type ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeekDefaultArgs instead
     */
    export type WeekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeekDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DayDefaultArgs instead
     */
    export type DayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DayDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectDefaultArgs instead
     */
    export type SubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DaySubjectDefaultArgs instead
     */
    export type DaySubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DaySubjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupDefaultArgs instead
     */
    export type GroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttendanceSnapshotDefaultArgs instead
     */
    export type AttendanceSnapshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttendanceSnapshotDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}